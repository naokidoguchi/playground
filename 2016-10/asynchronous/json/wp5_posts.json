/**
 Export to JSON plugin for PHPMyAdmin
 @version 0.1
 */

// Database 'LAA0627684-85b1v9'
// LAA0627684-85b1v9.wp5_posts

[{"ID": 1,"post_author": 1,"post_date": "2015-11-09 13:00:36","post_date_gmt": "2015-11-09 04:00:36","post_content": "cssで:afterに:hoverをかけたい時、
 
<pre class=\"lang:css decode:true \" >.classname:hover:after {}</pre> 

でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。

&nbsp;","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "css%e3%81%a7after%e3%81%abhover%e3%82%92%e3%81%8b%e3%81%91%e3%82%8b","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/?p=1","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 4,"post_author": 1,"post_date": "2015-10-24 02:12:05","post_date_gmt": "2015-10-23 17:12:05","post_content": "","post_title": "blogbg","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "blogbg","to_ping": "","pinged": "","post_modified": "2015-10-24 02:12:05","post_modified_gmt": "2015-10-23 17:12:05","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/blogbg.gif","menu_order": 0,"post_type": "attachment","post_mime_type": "image/gif","comment_count": 0}, {"ID": 11,"post_author": 1,"post_date": "2015-10-24 02:48:32","post_date_gmt": "2015-10-23 17:48:32","post_content": "","post_title": "kumao-no-mori","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "kumao-no-mori","to_ping": "","pinged": "","post_modified": "2015-10-24 02:48:32","post_modified_gmt": "2015-10-23 17:48:32","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/kumao-no-mori.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 17,"post_author": 1,"post_date": "2015-10-24 02:56:07","post_date_gmt": "2015-10-23 17:56:07","post_content": "http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/cropped-mori_bg.jpg","post_title": "cropped-mori_bg.jpg","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "cropped-mori_bg-jpg","to_ping": "","pinged": "","post_modified": "2015-10-24 02:56:07","post_modified_gmt": "2015-10-23 17:56:07","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/cropped-mori_bg.jpg","menu_order": 0,"post_type": "attachment","post_mime_type": "image/jpeg","comment_count": 0}, {"ID": 18,"post_author": 1,"post_date": "2015-10-24 11:04:14","post_date_gmt": "2015-10-24 02:04:14","post_content": "一時公開を停止しています。
気が向いたらまたこのURLで戻ってくるつもりです。
その時には技術メモブログじゃなくなってるかも。わくわく","post_title": "森の主","post_excerpt": "","post_status": "publish","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "%e6%a3%ae%e3%81%ae%e4%b8%bb","to_ping": "","pinged": "","post_modified": "2016-09-29 19:15:01","post_modified_gmt": "2016-09-29 10:15:01","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/?page_id=18","menu_order": 0,"post_type": "page","post_mime_type": "","comment_count": 0}, {"ID": 20,"post_author": 1,"post_date": "2015-10-24 10:57:20","post_date_gmt": "2015-10-24 01:57:20","post_content": "","post_title": "image","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "image-2","to_ping": "","pinged": "","post_modified": "2015-11-20 23:23:19","post_modified_gmt": "2015-11-20 14:23:19","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1.jpg","menu_order": 0,"post_type": "attachment","post_mime_type": "image/jpeg","comment_count": 0}, {"ID": 21,"post_author": 1,"post_date": "2015-10-24 11:01:04","post_date_gmt": "2015-10-24 02:01:04","post_content": "テディモルモットのくまおだよ！

ぽよぽよしてるから\"くまぽよ\"って呼んでもいいよ☆","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-10-24 11:01:04","post_modified_gmt": "2015-10-24 02:01:04","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/2015/10/24/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 22,"post_author": 1,"post_date": "2015-10-24 11:03:43","post_date_gmt": "2015-10-24 02:03:43","post_content": "","post_title": "image","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "image-3","to_ping": "","pinged": "","post_modified": "2015-10-24 11:03:43","post_modified_gmt": "2015-10-24 02:03:43","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image2.jpg","menu_order": 0,"post_type": "attachment","post_mime_type": "image/jpeg","comment_count": 0}, {"ID": 23,"post_author": 1,"post_date": "2015-10-24 11:04:14","post_date_gmt": "2015-10-24 02:04:14","post_content": "<a href=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image2.jpg\"><img class=\"alignnone size-medium wp-image-22\" src=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image2-300x300.jpg\" alt=\"image\" width=\"300\" height=\"300\" /></a>

テディモルモットのくまおだよ！

ぽよぽよしてるから\"くまぽよ\"って呼んでもいいよ☆","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-10-24 11:04:14","post_modified_gmt": "2015-10-24 02:04:14","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/2015/10/24/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 29,"post_author": 1,"post_date": "2015-10-24 14:20:44","post_date_gmt": "2015-10-24 05:20:44","post_content": "<a href=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20\" src=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>

テディモルモットのくまおだよ！

ぽよぽよしてるから\"くまぽよ\"って呼んでもいいよ☆","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-10-24 14:20:44","post_modified_gmt": "2015-10-24 05:20:44","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/2015/10/24/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 30,"post_author": 1,"post_date": "2015-10-25 15:49:30","post_date_gmt": "2015-10-25 06:49:30","post_content": "","post_title": "logo","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "logo","to_ping": "","pinged": "","post_modified": "2015-10-25 15:49:30","post_modified_gmt": "2015-10-25 06:49:30","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/logo.gif","menu_order": 0,"post_type": "attachment","post_mime_type": "image/gif","comment_count": 0}, {"ID": 32,"post_author": 1,"post_date": "2015-11-09 12:31:30","post_date_gmt": "2015-11-09 03:31:30","post_content": "<a href=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</p>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-09 12:31:30","post_modified_gmt": "2015-11-09 03:31:30","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/2015/11/09/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 33,"post_author": 1,"post_date": "2015-11-10 13:40:26","post_date_gmt": "2015-11-10 04:40:26","post_content": "cssで:afterに:hoverをかけたい時、
 
<pre class=\"lang:default decode:true \" >.classname:hover:after {}</pre> 

でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。

css3から疑似クラスはコロン2つらしいですが、仕事では全部コロン1つで記述されてたのでそのままコロン1つでやってます。
自分のサイトは2つで書いてみよー。(テキトー)","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-autosave-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:40:26","post_modified_gmt": "2015-11-10 04:40:26","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/blog/2015/11/09/1-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 34,"post_author": 1,"post_date": "2015-11-09 12:58:08","post_date_gmt": "2015-11-09 03:58:08","post_content": "cssで:afterに:hoverをかけたい時、
<pre lang=\"LANGUAGE\" line=\"1\"> .classname:hover:after</pre>
でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。

","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-09 12:58:08","post_modified_gmt": "2015-11-09 03:58:08","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/blog/2015/11/09/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 35,"post_author": 1,"post_date": "2015-11-09 12:59:10","post_date_gmt": "2015-11-09 03:59:10","post_content": "cssで:afterに:hoverをかけたい時、
<pre lang=\"LANGUAGE\" line=\"1\">.classname:hover:after</pre>
でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-09 12:59:10","post_modified_gmt": "2015-11-09 03:59:10","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/blog/2015/11/09/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 36,"post_author": 1,"post_date": "2015-11-09 13:00:18","post_date_gmt": "2015-11-09 04:00:18","post_content": "cssで:afterに:hoverをかけたい時、
<pre lang=\"LANGUAGE\" line=\"1\">　.classname:hover:after</pre>
でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-09 13:00:18","post_modified_gmt": "2015-11-09 04:00:18","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/blog/2015/11/09/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 37,"post_author": 1,"post_date": "2015-11-09 13:06:32","post_date_gmt": "2015-11-09 04:06:32","post_content": "cssで:afterに:hoverをかけたい時、
<pre lang=\"LANGUAGE\" line=\"1\">　.classname:hover:after{}</pre>
でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。

css3から疑似クラスはコロン2つらしいですが、
仕事では全部コロン1つで記述されてたのでそのままコロン1つでやってます。
自分のサイトは2つで書いてみよー。(テキトー)","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-09 13:06:32","post_modified_gmt": "2015-11-09 04:06:32","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/blog/2015/11/09/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 38,"post_author": 1,"post_date": "2015-11-09 13:16:45","post_date_gmt": "2015-11-09 04:16:45","post_content": "cssで:afterに:hoverをかけたい時、
<pre lang=\"LANGUAGE\" line=\"1\">　.classname:hover:after{}</pre>
でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。

css3から疑似クラスはコロン2つらしいですが、仕事では全部コロン1つで記述されてたのでそのままコロン1つでやってます。
自分のサイトは2つで書いてみよー。(テキトー)","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-09 13:16:45","post_modified_gmt": "2015-11-09 04:16:45","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/blog/2015/11/09/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 39,"post_author": 1,"post_date": "2015-11-10 13:56:17","post_date_gmt": "2015-11-10 04:56:17","post_content": "★ORDER句★
レコードを降順、昇順に並び替える。
<pre class=\"lang:mysql decode:true \" >-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC;
-- 降順
ORDER BY フィールド名 DESC;
-- 並び替えたものを5件だけ表示させる場合の例
ORDER BY COUNT(*) DESC LIMIT 2;</pre> 


★GROUP BY句★
指定したフィールドの集計ができる。
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索する
SELECT status, COUNT(*) FROM hogehoge GROUP BY status;</pre> 

GROUP BYと組み合わせて使える関数
・MAX
・MIN
・AVG
・SUM(合計)
・COUNT

★HAVING句★
集計関数が利用出来るようになる。GROUP BY句と共によく用いられる。 
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索して，累計数が100以上のものに限定
SELECT status, COUNT(*) FROM hogehoge GROUP BY status HAVING COUNT(*) &gt;= 100; </pre> 
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "sql%e3%81%ae%e3%83%a1%e3%83%a2%ef%bc%91","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/?p=39","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 40,"post_author": 1,"post_date": "2015-11-10 13:10:15","post_date_gmt": "2015-11-10 04:10:15","post_content": "☆ORDER句

順番に並び替える","post_title": "SQLのメモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:10:15","post_modified_gmt": "2015-11-10 04:10:15","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 41,"post_author": 1,"post_date": "2015-11-10 13:28:50","post_date_gmt": "2015-11-10 04:28:50","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
<pre lang=\"LANGUAGE\" line=\"1\">　-- 昇順(デフォルトなので省略可)</pre>
<pre lang=\"LANGUAGE\" line=\"2\">　ORDER BY フィールド名 ASC</pre>
<pre lang=\"LANGUAGE\" line=\"3\"></pre>
<pre lang=\"LANGUAGE\" line=\"4\">　-- 降順</pre>
<pre lang=\"LANGUAGE\" line=\"5\">　ORDER BY フィールド名 DESC</pre>

☆GROUP BY句☆
指定したフィールドの集計ができる。
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:28:50","post_modified_gmt": "2015-11-10 04:28:50","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 42,"post_author": 1,"post_date": "2015-11-10 13:29:38","post_date_gmt": "2015-11-10 04:29:38","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
<pre lang=\"LANGUAGE\" line=\"5\">
-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC

　-- 降順
ORDER BY フィールド名 DESC
</pre>

☆GROUP BY句☆
指定したフィールドの集計ができる。
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:29:38","post_modified_gmt": "2015-11-10 04:29:38","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 43,"post_author": 1,"post_date": "2015-11-10 13:29:55","post_date_gmt": "2015-11-10 04:29:55","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
<pre lang=\"LANGUAGE\" line=\"1\">
-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC

　-- 降順
ORDER BY フィールド名 DESC
</pre>

☆GROUP BY句☆
指定したフィールドの集計ができる。
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:29:55","post_modified_gmt": "2015-11-10 04:29:55","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 44,"post_author": 1,"post_date": "2015-11-10 13:30:33","post_date_gmt": "2015-11-10 04:30:33","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
<pre lang=\"LANGUAGE\" line=\"1\">
  -- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC

　-- 降順
ORDER BY フィールド名 DESC
</pre>

☆GROUP BY句☆
指定したフィールドの集計ができる。
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:30:33","post_modified_gmt": "2015-11-10 04:30:33","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 45,"post_author": 1,"post_date": "2015-11-10 13:31:20","post_date_gmt": "2015-11-10 04:31:20","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
<pre lang=\"LANGUAGE\" line=\"1\">
  -- 昇順(デフォルトなので省略可)
  ORDER BY フィールド名 ASC

　-- 降順
  ORDER BY フィールド名 DESC
</pre>

☆GROUP BY句☆
指定したフィールドの集計ができる。
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:31:20","post_modified_gmt": "2015-11-10 04:31:20","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 46,"post_author": 1,"post_date": "2015-11-10 13:40:44","post_date_gmt": "2015-11-10 04:40:44","post_content": "cssで:afterに:hoverをかけたい時、
 
<pre class=\"lang:default decode:true \" >.classname:hover:after {}</pre> 

でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。

css3から疑似クラスはコロン2つらしいですが、仕事では全部コロン1つで記述されてたのでそのままコロン1つでやってます。
自分のサイトは2つで書いてみよー。(テキトー)","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:40:44","post_modified_gmt": "2015-11-10 04:40:44","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/blog/2015/11/10/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 47,"post_author": 1,"post_date": "2015-11-10 13:42:36","post_date_gmt": "2015-11-10 04:42:36","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
 
<pre class=\"lang:default decode:true \" >-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC
-- 降順
ORDER BY フィールド名 DESC</pre> 



☆GROUP BY句☆
指定したフィールドの集計ができる。
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:42:36","post_modified_gmt": "2015-11-10 04:42:36","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 48,"post_author": 1,"post_date": "2015-11-10 13:43:31","post_date_gmt": "2015-11-10 04:43:31","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
 
<pre class=\"lang:default decode:true \" >
-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC;
-- 降順
ORDER BY フィールド名 DESC;
</pre> 

☆GROUP BY句☆
指定したフィールドの集計ができる。
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:43:31","post_modified_gmt": "2015-11-10 04:43:31","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 49,"post_author": 1,"post_date": "2015-11-10 13:44:58","post_date_gmt": "2015-11-10 04:44:58","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
 
<pre class=\"lang:mysql decode:true \" >-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC;
-- 降順
ORDER BY フィールド名 DESC;</pre> 


☆GROUP BY句☆
指定したフィールドの集計ができる。
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:44:58","post_modified_gmt": "2015-11-10 04:44:58","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 50,"post_author": 1,"post_date": "2015-11-10 13:45:45","post_date_gmt": "2015-11-10 04:45:45","post_content": "cssで:afterに:hoverをかけたい時、
 
<pre class=\"lang:css decode:true \" >.classname:hover:after {}</pre> 

でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。

css3から疑似クラスはコロン2つらしいですが、仕事では全部コロン1つで記述されてたのでそのままコロン1つでやってます。
自分のサイトは2つで書いてみよー。(テキトー)","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:45:45","post_modified_gmt": "2015-11-10 04:45:45","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/blog/2015/11/10/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 51,"post_author": 1,"post_date": "2015-11-10 13:56:17","post_date_gmt": "2015-11-10 04:56:17","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
 
<pre class=\"lang:mysql decode:true \" >-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC;
-- 降順
ORDER BY フィールド名 DESC;
-- 並び替えたものを5件だけ表示させる場合の例
ORDER BY COUNT(*) DESC LIMIT 2;</pre> 


☆GROUP BY句☆
指定したフィールドの集計ができる。
 
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索する
SELECT status, COUNT(*) FROM hogehoge GROUP BY status;</pre> 

GROUP BYと組み合わせて使える関数
<ul>
	<li>MAX</li>
	<li>MIN</li>
	<li>AVG</li>
	<li>SUM(合計)</li>
	<li>COUNT</li>
</ul>

☆HAVING句☆
集計関数が利用出来るようになる。GROUP BY句と共によく用いられる。 

<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索して，累計数が100以上のものに限定
SELECT status, COUNT(*) FROM hogehoge GROUP BY status HAVING COUNT(*) &gt;= 100 </pre> 
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:56:17","post_modified_gmt": "2015-11-10 04:56:17","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 52,"post_author": 1,"post_date": "2016-07-22 15:03:16","post_date_gmt": "2016-07-22 06:03:16","post_content": "★ORDER句★
レコードを降順、昇順に並び替える。
<pre class=\"lang:mysql decode:true \" >-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC;
-- 降順
ORDER BY フィールド名 DESC;
-- 並び替えたものを5件だけ表示させる場合の例
ORDER BY COUNT(*) DESC LIMIT 2;</pre> 


★GROUP BY句★
指定したフィールドの集計ができる。
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索する
SELECT status, COUNT(*) FROM hogehoge GROUP BY status;</pre> 

GROUP BYと組み合わせて使える関数
・MAX
・MIN
・AVG
・SUM(合計)
・COUNT

★HAVING句★
集計関数が利用出来るようになる。GROUP BY句と共によく用いられる。 
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索して，累計数が100以上のものに限定
SELECT status, COUNT(*) FROM hogehoge GROUP BY status HAVING COUNT(*) &gt;= 100; </pre> 

&nbsp;","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 15:03:16","post_modified_gmt": "2016-07-22 06:03:16","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 53,"post_author": 1,"post_date": "2015-11-10 13:58:53","post_date_gmt": "2015-11-10 04:58:53","post_content": "☆ORDER句☆
レコードを降順、昇順に並び替える。
<pre class=\"lang:mysql decode:true \" >-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC;
-- 降順
ORDER BY フィールド名 DESC;
-- 並び替えたものを5件だけ表示させる場合の例
ORDER BY COUNT(*) DESC LIMIT 2;</pre> 


☆GROUP BY句☆
指定したフィールドの集計ができる。
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索する
SELECT status, COUNT(*) FROM hogehoge GROUP BY status;</pre> 

GROUP BYと組み合わせて使える関数
・MAX
・MIN
・AVG
・SUM(合計)
・COUNT

☆HAVING句☆
集計関数が利用出来るようになる。GROUP BY句と共によく用いられる。 
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索して，累計数が100以上のものに限定
SELECT status, COUNT(*) FROM hogehoge GROUP BY status HAVING COUNT(*) &gt;= 100; </pre> 
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 13:58:53","post_modified_gmt": "2015-11-10 04:58:53","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/10/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 54,"post_author": 1,"post_date": "2015-11-10 20:58:17","post_date_gmt": "2015-11-10 11:58:17","post_content": "<a href=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>
食いしん坊いだよ★</p>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 20:58:17","post_modified_gmt": "2015-11-10 11:58:17","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/2015/11/10/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 55,"post_author": 1,"post_date": "2015-11-10 20:59:16","post_date_gmt": "2015-11-10 11:59:16","post_content": "<a href=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊いだよ★</p>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-10 20:59:16","post_modified_gmt": "2015-11-10 11:59:16","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/2015/11/10/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 56,"post_author": 1,"post_date": "2015-11-11 09:04:33","post_date_gmt": "2015-11-11 00:04:33","post_content": "★ORDER句★
レコードを降順、昇順に並び替える。
<pre class=\"lang:mysql decode:true \" >-- 昇順(デフォルトなので省略可)
ORDER BY フィールド名 ASC;
-- 降順
ORDER BY フィールド名 DESC;
-- 並び替えたものを5件だけ表示させる場合の例
ORDER BY COUNT(*) DESC LIMIT 2;</pre> 


★GROUP BY句★
指定したフィールドの集計ができる。
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索する
SELECT status, COUNT(*) FROM hogehoge GROUP BY status;</pre> 

GROUP BYと組み合わせて使える関数
・MAX
・MIN
・AVG
・SUM(合計)
・COUNT

★HAVING句★
集計関数が利用出来るようになる。GROUP BY句と共によく用いられる。 
<pre class=\"lang:mysql decode:true \" >-- ほげほげテーブルからステータスごとの件数を検索して，累計数が100以上のものに限定
SELECT status, COUNT(*) FROM hogehoge GROUP BY status HAVING COUNT(*) &gt;= 100; </pre> 
","post_title": "SQLのメモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "39-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 09:04:33","post_modified_gmt": "2015-11-11 00:04:33","post_content_filtered": "","post_parent": 39,"guid": "http://kumao-no-mori.com/blog/2015/11/11/39-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 57,"post_author": 1,"post_date": "2015-11-11 15:21:58","post_date_gmt": "2015-11-11 06:21:58","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \">gem install haml</pre>

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre>haml index.haml index.html</pre>
hamlのオプションは
<pre>haml --help</pre>
で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は &lt;header&gt;&lt;/header&gt; ということ。

例えば %body の中に Hello World! と打ちたい場合はこんな感じです。
<pre>/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# これはhaml内のみのコメントアウト。htmlには表示されません。</pre>
&nbsp;","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "haml%e5%8b%89%e5%bc%b7%e3%83%a1%e3%83%a2%ef%bc%91","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/?p=57","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 58,"post_author": 1,"post_date": "2015-11-11 14:18:03","post_date_gmt": "2015-11-11 05:18:03","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しくかけるもの

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
Hamlをインストール
→公式サイト
<blockquote>
http://haml.info/</blockquote>

","post_title": "Haml勉強メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 14:18:03","post_modified_gmt": "2015-11-11 05:18:03","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 59,"post_author": 1,"post_date": "2015-11-11 14:18:19","post_date_gmt": "2015-11-11 05:18:19","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しくかけるもの

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
Hamlをインストール

→公式サイト
<blockquote>http://haml.info/</blockquote>

","post_title": "Haml勉強メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 14:18:19","post_modified_gmt": "2015-11-11 05:18:19","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 60,"post_author": 1,"post_date": "2015-11-11 14:19:09","post_date_gmt": "2015-11-11 05:19:09","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しくかけるもの

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
Hamlをインストール

☆公式サイト
<blockquote>http://haml.info/</blockquote>

★★","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 14:19:09","post_modified_gmt": "2015-11-11 05:19:09","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 61,"post_author": 1,"post_date": "2015-11-11 15:21:58","post_date_gmt": "2015-11-11 06:21:58","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<blockquote>http://haml.info/</blockquote>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %p の中に Hello World! と打ちたい場合は 
<pre class=\"lang:ruby decode:true \" >/ &lt;p&gt;Hello World!&lt;/p&gt; としたい場合
%p
  Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:21:58","post_modified_gmt": "2015-11-11 06:21:58","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 62,"post_author": 1,"post_date": "2015-11-11 15:23:44","post_date_gmt": "2015-11-11 06:23:44","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %p の中に Hello World! と打ちたい場合は 
<pre class=\"lang:ruby decode:true \" >/ &lt;p&gt;Hello World!&lt;/p&gt; としたい場合
%p
  Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:23:44","post_modified_gmt": "2015-11-11 06:23:44","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 63,"post_author": 1,"post_date": "2015-11-12 14:15:18","post_date_gmt": "2015-11-12 05:15:18","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \">$ sudo gem install haml</pre>

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \">$ haml index.haml index.html</pre>
hamlのオプションは
<pre class=\"lang:sh decode:true \">$ haml --help</pre>
で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は &lt;header&gt;&lt;/header&gt; ということ。

例えば %body の中に Hello World! と打ちたい場合はこんな感じです。
 
<pre class=\"lang:xhtml decode:true \" >/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。
</pre> 

&nbsp;

ぬあ、hamlのシンタックスハイライトどうしよう。。。

以降hamlについて書くときまでにどうにかしようと思います。","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-autosave-v1","to_ping": "","pinged": "","post_modified": "2015-11-12 14:15:18","post_modified_gmt": "2015-11-12 05:15:18","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 64,"post_author": 1,"post_date": "2015-11-11 15:25:40","post_date_gmt": "2015-11-11 06:25:40","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:default decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:default decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %p の中に Hello World! と打ちたい場合は 
<pre class=\"lang:default decode:true \" >/ &lt;p&gt;Hello World!&lt;/p&gt; としたい場合
%p
  Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:25:40","post_modified_gmt": "2015-11-11 06:25:40","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 65,"post_author": 1,"post_date": "2015-11-11 15:26:35","post_date_gmt": "2015-11-11 06:26:35","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %p の中に Hello World! と打ちたい場合は 
<pre class=\"lang:default decode:true \" >/ &lt;p&gt;Hello World!&lt;/p&gt; としたい場合
%p
  Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:26:35","post_modified_gmt": "2015-11-11 06:26:35","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 66,"post_author": 1,"post_date": "2015-11-11 15:30:05","post_date_gmt": "2015-11-11 06:30:05","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %p の中に Hello World! と打ちたい場合は  
<pre class=\"lang:default range:1-10 decode:true \" >/ &lt;p&gt;Hello World!&lt;/p&gt; としたい場合
%p
  Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:30:05","post_modified_gmt": "2015-11-11 06:30:05","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 67,"post_author": 1,"post_date": "2015-11-11 15:31:54","post_date_gmt": "2015-11-11 06:31:54","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %p の中に Hello World! と打ちたい場合は  
<pre class=\"lang:default range:1-10 decode:true \" > 
<pre class=\"lang:default highlight:0 decode:true \" >/ &amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt; としたい場合

%p
  Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません</pre> 
。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:31:54","post_modified_gmt": "2015-11-11 06:31:54","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 68,"post_author": 1,"post_date": "2015-11-11 15:32:25","post_date_gmt": "2015-11-11 06:32:25","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %p の中に Hello World! と打ちたい場合は  
<pre class=\"lang:default highlight:0 decode:true \" >/ &amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt; としたい場合

%p
  Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:32:25","post_modified_gmt": "2015-11-11 06:32:25","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 69,"post_author": 1,"post_date": "2015-11-11 15:49:10","post_date_gmt": "2015-11-11 06:49:10","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %p の中に Hello World! と打ちたい場合は  
<pre class=\"lang:default highlight:0 decode:true \" >/ pタグで囲みたい場合
%p
 Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:49:10","post_modified_gmt": "2015-11-11 06:49:10","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 70,"post_author": 1,"post_date": "2015-11-11 15:51:09","post_date_gmt": "2015-11-11 06:51:09","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %body の中に Hello World! と打ちたい場合は  
<pre class=\"lang:default highlight:0 decode:true \" >/ bodyタグで囲みたい場合

%body
  Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> ","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:51:09","post_modified_gmt": "2015-11-11 06:51:09","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 71,"post_author": 1,"post_date": "2015-11-11 15:56:00","post_date_gmt": "2015-11-11 06:56:00","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %body の中に Hello World! と打ちたい場合は  
 
<pre class=\"lang:default mark:3,4 highlight:0 decode:true \" >/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> 

hamlのシンタックスハイライトどうしよう。。。以降hamlについて書くときまでにどうにかします(汗)","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:56:00","post_modified_gmt": "2015-11-11 06:56:00","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 72,"post_author": 1,"post_date": "2015-11-11 15:56:37","post_date_gmt": "2015-11-11 06:56:37","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac) 
<pre class=\"lang:sh decode:true \" >$ sudo gem install haml</pre> 

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \" >$ haml index.haml index.html</pre> 
hamlのオプションは --help で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は <header></header> ということ。

例えば %body の中に Hello World! と打ちたい場合は  
 
<pre class=\"lang:default highlight:0 decode:true \" >/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre> 

hamlのシンタックスハイライトどうしよう。。。以降hamlについて書くときまでにどうにかします(汗)","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:56:37","post_modified_gmt": "2015-11-11 06:56:37","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 73,"post_author": 1,"post_date": "2015-11-11 15:59:46","post_date_gmt": "2015-11-11 06:59:46","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \">$ sudo gem install haml</pre>
★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \">$ haml index.haml index.html</pre>
hamlのオプションは <pre>--help<pre> で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は &lt;header&gt;&lt;/header&gt; ということ。

例えば %body の中に Hello World! と打ちたい場合は
<pre class=\"lang:default highlight:0 decode:true\">/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre>
hamlのシンタックスハイライトどうしよう。。。

以降hamlについて書くときまでにどうにかします(汗)","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 15:59:46","post_modified_gmt": "2015-11-11 06:59:46","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 74,"post_author": 1,"post_date": "2015-11-11 16:01:03","post_date_gmt": "2015-11-11 07:01:03","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \">$ sudo gem install haml</pre>
★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \">$ haml index.haml index.html</pre>
hamlのオプションは <pre>$ haml --help</pre> で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は &lt;header&gt;&lt;/header&gt; ということ。

例えば %body の中に Hello World! と打ちたい場合は
<pre class=\"lang:default highlight:0 decode:true\">/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre>
hamlのシンタックスハイライトどうしよう。。。

以降hamlについて書くときまでにどうにかします(汗)","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 16:01:03","post_modified_gmt": "2015-11-11 07:01:03","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 75,"post_author": 1,"post_date": "2015-11-11 16:02:18","post_date_gmt": "2015-11-11 07:02:18","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \">$ sudo gem install haml</pre>
★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \">$ haml index.haml index.html</pre>
hamlのオプションは<pre>$ haml --help</pre>で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は &lt;header&gt;&lt;/header&gt; ということ。

例えば %body の中に Hello World! と打ちたい場合は
<pre class=\"lang:default highlight:0 decode:true\">/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre>
hamlのシンタックスハイライトどうしよう。。。

以降hamlについて書くときまでにどうにかします(汗)","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 16:02:18","post_modified_gmt": "2015-11-11 07:02:18","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 82,"post_author": 1,"post_date": "2015-11-11 21:11:55","post_date_gmt": "2015-11-11 12:11:55","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \">$ sudo gem install haml</pre>
★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \">$ haml index.haml index.html</pre>
hamlのオプションは
<pre>$ haml --help</pre>
で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は &lt;header&gt;&lt;/header&gt; ということ。

例えば %body の中に Hello World! と打ちたい場合はこんな感じです。
<pre class=\"lang:default highlight:0 decode:true\">/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre>
&nbsp;

ぬあ、hamlのシンタックスハイライトどうしよう。。。

以降hamlについて書くときまでにどうにかしようと思います。","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 21:11:55","post_modified_gmt": "2015-11-11 12:11:55","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 83,"post_author": 1,"post_date": "2015-11-11 21:14:51","post_date_gmt": "2015-11-11 12:14:51","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \">$ sudo gem install haml</pre>
★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre class=\"lang:sh decode:true \">$ haml index.haml index.html</pre>
hamlのオプションは
<pre class=\"lang:sh decode:true \">$ haml --help</pre>
で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は &lt;header&gt;&lt;/header&gt; ということ。

例えば %body の中に Hello World! と打ちたい場合はこんな感じです。
<pre class=\"lang:default highlight:0 decode:true\">/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# 右のこれはhaml内のみのコメントアウト。htmlには表示されません。</pre>
&nbsp;

ぬあ、hamlのシンタックスハイライトどうしよう。。。

以降hamlについて書くときまでにどうにかしようと思います。","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-11 21:14:51","post_modified_gmt": "2015-11-11 12:14:51","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/blog/2015/11/11/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 86,"post_author": 1,"post_date": "2015-11-12 14:11:39","post_date_gmt": "2015-11-12 05:11:39","post_content": "地味にボタンに対してのdisabledの付け外しがわからなかったのでメモメモ

 
<pre class=\"lang:js decode:true \" >// 付ける時
$(\".hoge\").prop(\"disabled\", true);

// 外す時
$(\".hoge\").prop(\"disabled\", false);</pre> 



attrメソッドで一生懸命やってて出来なくて調べたら…
んなは！propでしたか。

ラジオボタンとかチェックボックスとかのチェック状態の付け外しもpropが良いですね。

 
<pre class=\"lang:js decode:true \" >$(\"input[name=\'radio\']\").on(\"click\", function(){
   if($(\"#check\").prop(\'checked\')) {
     alert(\"チェックされています。\");
   }
   else {
     alert(\"チェックされていません。\");
   }
});</pre> 


ちなみにラジオボタン、チェックボックスのチェック状態はchecked、
selectのプルダウンの初期表示はoptionにselectedですね。

disabled=\"disabled\"みたいな書き方ありますが、よくわからないんですよね。
これが正しい書き方らしいのですが、selected付ければ効くし？これでも正しいし？全然問題ないので自分はそんな書き方はしませぬ。
ドキュメントタイプが古いと駄目なのかもですね！HTML4.01では大丈夫みたいです。それより古いやつかな。","post_title": "jQueryでdisabledの付け外し","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "jquery%e3%81%a7disabled%e3%81%ae%e4%bb%98%e3%81%91%e5%a4%96%e3%81%97","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/?p=86","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 87,"post_author": 1,"post_date": "2015-11-12 14:11:39","post_date_gmt": "2015-11-12 05:11:39","post_content": "地味にボタンに対してのdisabledの付け外しがわからなかったのでメモメモ

 
<pre class=\"lang:js decode:true \" >// 付ける時
$(\".hoge\").prop(\"disabled\", true);

// 外す時
$(\".hoge\").prop(\"disabled\", false);</pre> 



attrメソッドで一生懸命やって出来なかったので...


ラジオボタンとかチェックボックスとかのチェック状態の付け外しもpropメソッドですね

 
<pre class=\"lang:js decode:true \" >$(\"input[name=\'radio\']\").on(\"click\", function(){
   if($(\"#check\").prop(\'checked\')) {
     alert(\"チェックされています。\");
   }
   else {
     alert(\"チェックされていません。\");
   }
});</pre> 


こんな感じ。

ちなみにラジオボタン、チェックボックスのチェック状態はchecked、
selectのプルダウンの初期表示はoptionにselectedですね。

disabled=\"disabled\"みたいな書き方ありますが、よくわからないんですよね。
これが正しい書き方らしいのですが、selected付ければ効くし？これでも正しいし？全然問題ないので自分はそんな書き方はしませぬ。
ドキュメントタイプが古いと駄目なのかもですね！HTML4.01では大丈夫みたいです。それより古いやつかな。","post_title": "jQueryでdisabledの付け外し","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "86-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-12 14:11:39","post_modified_gmt": "2015-11-12 05:11:39","post_content_filtered": "","post_parent": 86,"guid": "http://kumao-no-mori.com/blog/2015/11/12/86-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 91,"post_author": 1,"post_date": "2015-11-13 01:59:56","post_date_gmt": "2015-11-12 16:59:56","post_content": "地味にボタンに対してのdisabledの付け外しがわからなかったのでメモメモ

 
<pre class=\"lang:js decode:true \" >// 付ける時
$(\".hoge\").prop(\"disabled\", true);

// 外す時
$(\".hoge\").prop(\"disabled\", false);</pre> 



attrメソッドで一生懸命やって出来なかったので...


ラジオボタンとかチェックボックスとかのチェック状態の付け外しもpropが良いですね

 
<pre class=\"lang:js decode:true \" >$(\"input[name=\'radio\']\").on(\"click\", function(){
   if($(\"#check\").prop(\'checked\')) {
     alert(\"チェックされています。\");
   }
   else {
     alert(\"チェックされていません。\");
   }
});</pre> 


ちなみにラジオボタン、チェックボックスのチェック状態はchecked、
selectのプルダウンの初期表示はoptionにselectedですね。

disabled=\"disabled\"みたいな書き方ありますが、よくわからないんですよね。
これが正しい書き方らしいのですが、selected付ければ効くし？これでも正しいし？全然問題ないので自分はそんな書き方はしませぬ。
ドキュメントタイプが古いと駄目なのかもですね！HTML4.01では大丈夫みたいです。それより古いやつかな。","post_title": "jQueryでdisabledの付け外し","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "86-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-13 01:59:56","post_modified_gmt": "2015-11-12 16:59:56","post_content_filtered": "","post_parent": 86,"guid": "http://kumao-no-mori.com/blog/2015/11/13/86-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 92,"post_author": 1,"post_date": "2015-11-13 02:01:29","post_date_gmt": "2015-11-12 17:01:29","post_content": "地味にボタンに対してのdisabledの付け外しがわからなかったのでメモメモ

 
<pre class=\"lang:js decode:true \" >// 付ける時
$(\".hoge\").prop(\"disabled\", true);

// 外す時
$(\".hoge\").prop(\"disabled\", false);</pre> 



attrメソッドで一生懸命やってて出来なくて調べたら…
んなは！propでしたか！

ラジオボタンとかチェックボックスとかのチェック状態の付け外しもpropが良いですね

 
<pre class=\"lang:js decode:true \" >$(\"input[name=\'radio\']\").on(\"click\", function(){
   if($(\"#check\").prop(\'checked\')) {
     alert(\"チェックされています。\");
   }
   else {
     alert(\"チェックされていません。\");
   }
});</pre> 


ちなみにラジオボタン、チェックボックスのチェック状態はchecked、
selectのプルダウンの初期表示はoptionにselectedですね。

disabled=\"disabled\"みたいな書き方ありますが、よくわからないんですよね。
これが正しい書き方らしいのですが、selected付ければ効くし？これでも正しいし？全然問題ないので自分はそんな書き方はしませぬ。
ドキュメントタイプが古いと駄目なのかもですね！HTML4.01では大丈夫みたいです。それより古いやつかな。","post_title": "jQueryでdisabledの付け外し","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "86-autosave-v1","to_ping": "","pinged": "","post_modified": "2015-11-13 02:01:29","post_modified_gmt": "2015-11-12 17:01:29","post_content_filtered": "","post_parent": 86,"guid": "http://kumao-no-mori.com/blog/2015/11/13/86-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 93,"post_author": 1,"post_date": "2015-11-13 02:01:50","post_date_gmt": "2015-11-12 17:01:50","post_content": "地味にボタンに対してのdisabledの付け外しがわからなかったのでメモメモ

 
<pre class=\"lang:js decode:true \" >// 付ける時
$(\".hoge\").prop(\"disabled\", true);

// 外す時
$(\".hoge\").prop(\"disabled\", false);</pre> 



attrメソッドで一生懸命やってて出来なくて調べたら…
んなは！propでしたか。

ラジオボタンとかチェックボックスとかのチェック状態の付け外しもpropが良いですね。

 
<pre class=\"lang:js decode:true \" >$(\"input[name=\'radio\']\").on(\"click\", function(){
   if($(\"#check\").prop(\'checked\')) {
     alert(\"チェックされています。\");
   }
   else {
     alert(\"チェックされていません。\");
   }
});</pre> 


ちなみにラジオボタン、チェックボックスのチェック状態はchecked、
selectのプルダウンの初期表示はoptionにselectedですね。

disabled=\"disabled\"みたいな書き方ありますが、よくわからないんですよね。
これが正しい書き方らしいのですが、selected付ければ効くし？これでも正しいし？全然問題ないので自分はそんな書き方はしませぬ。
ドキュメントタイプが古いと駄目なのかもですね！HTML4.01では大丈夫みたいです。それより古いやつかな。","post_title": "jQueryでdisabledの付け外し","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "86-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-13 02:01:50","post_modified_gmt": "2015-11-12 17:01:50","post_content_filtered": "","post_parent": 86,"guid": "http://kumao-no-mori.com/blog/2015/11/13/86-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 94,"post_author": 1,"post_date": "2015-11-13 03:25:16","post_date_gmt": "2015-11-12 18:25:16","post_content": "<a href=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊いだよ★</br>@kumapoyo_</p>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-13 03:25:16","post_modified_gmt": "2015-11-12 18:25:16","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/2015/11/13/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 95,"post_author": 1,"post_date": "2015-11-13 03:52:56","post_date_gmt": "2015-11-12 18:52:56","post_content": "<a href=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>@kumapoyo_</p>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-13 03:52:56","post_modified_gmt": "2015-11-12 18:52:56","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/blog/2015/11/13/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 97,"post_author": 1,"post_date": "2015-11-13 11:04:58","post_date_gmt": "2015-11-13 02:04:58","post_content": "PHPの基礎の基礎。記号の名前を覚えよう。

<strong>★アロー演算子　-&gt;</strong>

クラスから任意の要素を抜き出すためのもの
<pre class=\"lang:php decode:true\">//クラスanimalのなかに
a=さかな
b=うさぎ
c=モルモット
//とすると
animal -&gt; c
//はモルモットとなる</pre>
&nbsp;

<strong>★ダブルアロー　=&gt;</strong>

連想配列や任意で配列を定義したいときに使う記号
<pre class=\"lang:php decode:true \"> //array()を使ってみるとこう
&lt;?php
$data = array(7, 8, 7);
var_dunp($data);

//var_dunpによって表示される結果が
array(3) {
     [0]=&gt;int(7)
     [1]=&gt;int(8)
     [2]=&gt;int(7)
}
//preタグで囲むとこんな感じで見やすい
</pre>
&nbsp;

<strong>★スコープ定義演算子　::</strong>

sutatic,定数およびオーバーライドされたクラスのプロパティやメソッドにアクセスする事が出来る
<pre class=\"lang:php decode:true \">&lt;?php
class MyClass {
     const CONST_VALUE = \'Kumao\';
}

echo MyClass::CONST_VALUE;

//下はPHP 5.3.0以降で対応バージョン
$classname = \'MyClass\';
echo $classname::CONST_VALUE;

?&gt;</pre>","post_title": "PHPの基礎","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "php%e3%81%ae%e5%9f%ba%e7%a4%8e","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/?p=97","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 98,"post_author": 1,"post_date": "2015-11-13 11:03:09","post_date_gmt": "2015-11-13 02:03:09","post_content": "PHPの基礎の基礎

記号の名前を覚えよう。
<ul>
	<li><strong>アロー演算子　-&gt;</strong>
クラスから任意の要素を抜き出すためのもの</li>
</ul>
<pre class=\"lang:php decode:true \" >//クラスanimalのなかに
a=さかな
b=うさぎ
c=モルモット
//とすると
animal -&gt; c
//はモルモットとなる</pre> 
&nbsp;
<ul>
	<li><strong>ダブルアロー　=&gt;</strong></li>
</ul>
連想配列や任意で配列を定義したいときに使う記号
 
<pre class=\"lang:php decode:true \" > //array()を使ってみるとこう
&lt;?php
$data = array(7, 8, 7);
var_dunp($data);

//var_dunpによって表示される結果が
array(3) {
     [0]=&gt;int(7)
     [1]=&gt;int(8)
     [2]=&gt;int(7)
}
//preタグで囲むとこんな感じで見やすい</pre> 

<ul>
	<li><strong>スコープ定義演算子　::</strong></li>
</ul>
sutatic,定数およびオーバーライドされたクラスのプロパティやメソッドにアクセスする事が出来る
 
<pre class=\"lang:php decode:true \" >&lt;?php
class MyClass {
     const CONST_VALUE = \'Kumao\';
}

echo MyClass::CONST_VALUE;

//下はPHP 5.3.0以降で対応バージョン
$classname = \'MyClass\';
echo $classname::CONST_VALUE;

?&gt; </pre> 
","post_title": "PHPの基礎","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "97-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-13 11:03:09","post_modified_gmt": "2015-11-13 02:03:09","post_content_filtered": "","post_parent": 97,"guid": "http://kumao-no-mori.com/blog/2015/11/13/97-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 99,"post_author": 1,"post_date": "2015-11-13 11:04:58","post_date_gmt": "2015-11-13 02:04:58","post_content": "PHPの基礎の基礎

記号の名前を覚えよう。

<strong>★アロー演算子　-&gt;</strong>
クラスから任意の要素を抜き出すためのもの
<pre class=\"lang:php decode:true\">//クラスanimalのなかに
a=さかな
b=うさぎ
c=モルモット
//とすると
animal -&gt; c
//はモルモットとなる</pre>
&nbsp;

<strong>★ダブルアロー　=&gt;</strong>

連想配列や任意で配列を定義したいときに使う記号
<pre class=\"lang:php decode:true \"> //array()を使ってみるとこう
&lt;?php
$data = array(7, 8, 7);
var_dunp($data);

//var_dunpによって表示される結果が
array(3) {
     [0]=&gt;int(7)
     [1]=&gt;int(8)
     [2]=&gt;int(7)
}
//preタグで囲むとこんな感じで見やすい
</pre>
&nbsp;

<strong>★スコープ定義演算子　::</strong>

sutatic,定数およびオーバーライドされたクラスのプロパティやメソッドにアクセスする事が出来る
<pre class=\"lang:php decode:true \">&lt;?php
class MyClass {
     const CONST_VALUE = \'Kumao\';
}

echo MyClass::CONST_VALUE;

//下はPHP 5.3.0以降で対応バージョン
$classname = \'MyClass\';
echo $classname::CONST_VALUE;

?&gt;</pre>","post_title": "PHPの基礎","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "97-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-13 11:04:58","post_modified_gmt": "2015-11-13 02:04:58","post_content_filtered": "","post_parent": 97,"guid": "http://kumao-no-mori.com/blog/2015/11/13/97-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 100,"post_author": 1,"post_date": "2015-11-13 11:06:28","post_date_gmt": "2015-11-13 02:06:28","post_content": "PHPの基礎の基礎。記号の名前を覚えよう。

<strong>★アロー演算子　-&gt;</strong>

クラスから任意の要素を抜き出すためのもの
<pre class=\"lang:php decode:true\">//クラスanimalのなかに
a=さかな
b=うさぎ
c=モルモット
//とすると
animal -&gt; c
//はモルモットとなる</pre>
&nbsp;

<strong>★ダブルアロー　=&gt;</strong>

連想配列や任意で配列を定義したいときに使う記号
<pre class=\"lang:php decode:true \"> //array()を使ってみるとこう
&lt;?php
$data = array(7, 8, 7);
var_dunp($data);

//var_dunpによって表示される結果が
array(3) {
     [0]=&gt;int(7)
     [1]=&gt;int(8)
     [2]=&gt;int(7)
}
//preタグで囲むとこんな感じで見やすい
</pre>
&nbsp;

<strong>★スコープ定義演算子　::</strong>

sutatic,定数およびオーバーライドされたクラスのプロパティやメソッドにアクセスする事が出来る
<pre class=\"lang:php decode:true \">&lt;?php
class MyClass {
     const CONST_VALUE = \'Kumao\';
}

echo MyClass::CONST_VALUE;

//下はPHP 5.3.0以降で対応バージョン
$classname = \'MyClass\';
echo $classname::CONST_VALUE;

?&gt;</pre>","post_title": "PHPの基礎","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "97-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-13 11:06:28","post_modified_gmt": "2015-11-13 02:06:28","post_content_filtered": "","post_parent": 97,"guid": "http://kumao-no-mori.com/blog/2015/11/13/97-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 104,"post_author": 1,"post_date": "2015-11-17 14:19:22","post_date_gmt": "2015-11-17 05:19:22","post_content": "★divタグにidやクラスをつける方法

https://gist.github.com/naokidoguchi/24e31bf288dc2dd33a5e

&nbsp;

★html内にcssやjavascriptを記述する場合と実体参照の方法

https://gist.github.com/naokidoguchi/4716ba95c699910656a9

&nbsp;

★リストの書き方

https://gist.github.com/naokidoguchi/1a13e74695fe5b7ab885

&nbsp;

★hamlならではの超便利な書き方

https://gist.github.com/naokidoguchi/e54760a7c7326f038fb2","post_title": "Haml勉強メモ２","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "haml%e5%8b%89%e5%bc%b7%e3%83%a1%e3%83%a2%ef%bc%92","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/?p=104","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 106,"post_author": 1,"post_date": "2015-11-17 13:45:08","post_date_gmt": "2015-11-17 04:45:08","post_content": "★divタグにidやクラスをつける方法

https://gist.github.com/naokidoguchi/24e31bf288dc2dd33a5e","post_title": "Haml勉強メモ２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "104-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-17 13:45:08","post_modified_gmt": "2015-11-17 04:45:08","post_content_filtered": "","post_parent": 104,"guid": "http://kumao-no-mori.com/blog/2015/11/17/104-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 107,"post_author": 1,"post_date": "2015-11-17 14:09:42","post_date_gmt": "2015-11-17 05:09:42","post_content": "★divタグにidやクラスをつける方法

https://gist.github.com/naokidoguchi/24e31bf288dc2dd33a5e

★html内にcssやjavascriptを記述する場合と実体参照の方法

https://gist.github.com/naokidoguchi/4716ba95c699910656a9

★リストの書き方

https://gist.github.com/naokidoguchi/1a13e74695fe5b7ab885

★hamlならではの超便利な書き方

&nbsp;","post_title": "Haml勉強メモ２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "104-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-17 14:09:42","post_modified_gmt": "2015-11-17 05:09:42","post_content_filtered": "","post_parent": 104,"guid": "http://kumao-no-mori.com/blog/2015/11/17/104-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 108,"post_author": 1,"post_date": "2015-11-17 14:19:22","post_date_gmt": "2015-11-17 05:19:22","post_content": "★divタグにidやクラスをつける方法

https://gist.github.com/naokidoguchi/24e31bf288dc2dd33a5e

★html内にcssやjavascriptを記述する場合と実体参照の方法

https://gist.github.com/naokidoguchi/4716ba95c699910656a9

★リストの書き方

https://gist.github.com/naokidoguchi/1a13e74695fe5b7ab885

★hamlならではの超便利な書き方

https://gist.github.com/naokidoguchi/e54760a7c7326f038fb2","post_title": "Haml勉強メモ２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "104-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-17 14:19:22","post_modified_gmt": "2015-11-17 05:19:22","post_content_filtered": "","post_parent": 104,"guid": "http://kumao-no-mori.com/blog/2015/11/17/104-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 109,"post_author": 1,"post_date": "2015-11-17 14:20:10","post_date_gmt": "2015-11-17 05:20:10","post_content": "★divタグにidやクラスをつける方法

https://gist.github.com/naokidoguchi/24e31bf288dc2dd33a5e

&nbsp;

★html内にcssやjavascriptを記述する場合と実体参照の方法

https://gist.github.com/naokidoguchi/4716ba95c699910656a9

&nbsp;

★リストの書き方

https://gist.github.com/naokidoguchi/1a13e74695fe5b7ab885

&nbsp;

★hamlならではの超便利な書き方

https://gist.github.com/naokidoguchi/e54760a7c7326f038fb2","post_title": "Haml勉強メモ２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "104-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-17 14:20:10","post_modified_gmt": "2015-11-17 05:20:10","post_content_filtered": "","post_parent": 104,"guid": "http://kumao-no-mori.com/blog/2015/11/17/104-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 110,"post_author": 1,"post_date": "2015-11-18 19:58:48","post_date_gmt": "2015-11-18 10:58:48","post_content": "47都道府県はコピペでゴーゴー

https://gist.github.com/naokidoguchi/b9ffebb1be23c36a9ea1","post_title": "コピペ素材１","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "%e3%82%b3%e3%83%94%e3%83%9a%e7%b4%a0%e6%9d%90%ef%bc%91","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/blog/?p=110","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 111,"post_author": 1,"post_date": "2015-11-18 19:58:48","post_date_gmt": "2015-11-18 10:58:48","post_content": "47都道府県はコピペでゴーゴー

https://gist.github.com/anonymous/aaf7c8b8fb9d17c8fadc","post_title": "コピペ素材１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "110-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-18 19:58:48","post_modified_gmt": "2015-11-18 10:58:48","post_content_filtered": "","post_parent": 110,"guid": "http://kumao-no-mori.com/blog/2015/11/18/110-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 112,"post_author": 1,"post_date": "2015-11-18 20:16:47","post_date_gmt": "2015-11-18 11:16:47","post_content": "47都道府県はコピペでゴーゴー

https://gist.github.com/naokidoguchi/b9ffebb1be23c36a9ea1","post_title": "コピペ素材１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "110-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-18 20:16:47","post_modified_gmt": "2015-11-18 11:16:47","post_content_filtered": "","post_parent": 110,"guid": "http://kumao-no-mori.com/blog/2015/11/18/110-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 117,"post_author": 1,"post_date": "2015-11-20 03:29:07","post_date_gmt": "2015-11-19 18:29:07","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

&nbsp;

<hr />

★<strong>1. 壊れたきっかけ</strong>

<hr />

URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

<hr />

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

<hr />

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら何もうつらなくなっていたサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました。が!

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\" target=\"blank\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

&nbsp;

<hr />

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊し、”サーバーエラー 500”との戦いが始まります。</strong>

<hr />

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\" target=\"blank\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その新たにダウンロードした一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

&nbsp;

<hr />

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

<hr />

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "wordpress%e3%81%a7%e3%80%8c%e3%81%93%e3%81%ae%e3%83%9a%e3%83%bc%e3%82%b8%e3%81%ab%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e3%81%99%e3%82%8b%e3%81%9f%e3%82%81%e3%81%ae%e5%8d%81%e5%88%86%e3%81%aa%e3%82%a2","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=117","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 118,"post_author": 1,"post_date": "2015-11-19 23:40:12","post_date_gmt": "2015-11-19 14:40:12","post_content": "","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-19 23:40:12","post_modified_gmt": "2015-11-19 14:40:12","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/19/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 120,"post_author": 1,"post_date": "2015-11-20 01:06:13","post_date_gmt": "2015-11-19 16:06:13","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法をメモ。()

★1. <strong>壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の”WordPress アドレス (URL)”と”サイトアドレス (URL)”でこのブログを”http://kumao-no-mori/blog/”から”http://kumao-no-mori/”へURLを変更しようと、その2カ所を書き換え[変更を保存]ボタンを押した瞬間にサイトが開けなくなった。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"alignnone size-thumbnail wp-image-119\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1-150x150.png\" alt=\"WordPress設定画面画像\" width=\"150\" height=\"150\" /></a>","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 01:06:13","post_modified_gmt": "2015-11-19 16:06:13","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 122,"post_author": 1,"post_date": "2015-11-20 01:22:14","post_date_gmt": "2015-11-19 16:22:14","post_content": "","post_title": "wordpress_1","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "wordpress_1","to_ping": "","pinged": "","post_modified": "2015-11-20 01:22:22","post_modified_gmt": "2015-11-19 16:22:22","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 123,"post_author": 1,"post_date": "2015-11-20 01:31:59","post_date_gmt": "2015-11-19 16:31:59","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法をメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”WordPress アドレス (URL)”と”サイトアドレス (URL)”

でこのブログを

”http://kumao-no-mori/blog/”から”http://kumao-no-mori/”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなった。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"alignnone size-thumbnail wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

&nbsp;","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 01:31:59","post_modified_gmt": "2015-11-19 16:31:59","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 124,"post_author": 1,"post_date": "2015-11-20 01:35:45","post_date_gmt": "2015-11-19 16:35:45","post_content": "","post_title": "wordpress_2","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "wordpress_2","to_ping": "","pinged": "","post_modified": "2015-11-20 01:35:59","post_modified_gmt": "2015-11-19 16:35:59","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 125,"post_author": 1,"post_date": "2015-11-20 01:38:22","post_date_gmt": "2015-11-19 16:38:22","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法をメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”WordPress アドレス (URL)”と”サイトアドレス (URL)”

でこのブログを

”http://kumao-no-mori/blog/”から”http://kumao-no-mori/”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなった。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

ロリポップでは簡単にWordPressをインストールすることができます。

&nbsp;","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 01:38:22","post_modified_gmt": "2015-11-19 16:38:22","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 126,"post_author": 1,"post_date": "2015-11-20 01:40:55","post_date_gmt": "2015-11-19 16:40:55","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法をメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”WordPress アドレス (URL)”と”サイトアドレス (URL)”

でこのブログを

”http://kumao-no-mori/blog/”から”http://kumao-no-mori/”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度WordPressをインストールしてみることにしました。

&nbsp;","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 01:40:55","post_modified_gmt": "2015-11-19 16:40:55","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 127,"post_author": 1,"post_date": "2015-11-20 02:04:07","post_date_gmt": "2015-11-19 17:04:07","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”WordPress アドレス (URL)”と”サイトアドレス (URL)”

でこのブログを

”http://kumao-no-mori/blog/”から”http://kumao-no-mori/”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たに<strong>wp2_</strong>みたいなテーブルが","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 02:04:07","post_modified_gmt": "2015-11-19 17:04:07","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 128,"post_author": 1,"post_date": "2015-11-20 12:11:16","post_date_gmt": "2015-11-20 03:11:16","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

&nbsp;

<hr />

★<strong>1. 壊れたきっかけ</strong>

<hr />

URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

<hr />

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

<hr />

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら何もうつらなくなっていたサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました。が!

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\" target=\"blank\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

&nbsp;

<hr />

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊し、”サーバーエラー 500”との戦いが始まります。</strong>

<hr />

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\" target=\"blank\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その新たにダウンロードした一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

&nbsp;

<hr />

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

<hr />

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-autosave-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 12:11:16","post_modified_gmt": "2015-11-20 03:11:16","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 129,"post_author": 1,"post_date": "2015-11-20 02:13:55","post_date_gmt": "2015-11-19 17:13:55","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

&nbsp;","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 02:13:55","post_modified_gmt": "2015-11-19 17:13:55","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 130,"post_author": 1,"post_date": "2015-11-20 02:14:51","post_date_gmt": "2015-11-19 17:14:51","post_content": "","post_title": "wordpress_3","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "wordpress_3","to_ping": "","pinged": "","post_modified": "2015-11-20 02:15:12","post_modified_gmt": "2015-11-19 17:15:12","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 131,"post_author": 1,"post_date": "2015-11-20 02:21:55","post_date_gmt": "2015-11-19 17:21:55","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)(例として、)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp1_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp2_</strong>だったとすると、接頭語が<strong>wp2_</strong>のテーブルを全て削除し(11個)<strong>wp1_</strong>だったテーブル名の頭を<strong>wp2_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

&nbsp;","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 02:21:55","post_modified_gmt": "2015-11-19 17:21:55","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 132,"post_author": 1,"post_date": "2015-11-20 02:26:27","post_date_gmt": "2015-11-19 17:26:27","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)(例として、)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp1_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp2_</strong>だったとすると、接頭語が<strong>wp2_</strong>のテーブルを全て削除し(11個)<strong>wp1_</strong>だったテーブル名の頭を<strong>wp2_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 02:26:27","post_modified_gmt": "2015-11-19 17:26:27","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 133,"post_author": 1,"post_date": "2015-11-20 02:40:46","post_date_gmt": "2015-11-19 17:40:46","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)(例として、)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊してしまいます。”サーバーエラー 500”との戦いが始まります。</strong>

&nbsp;","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 02:40:46","post_modified_gmt": "2015-11-19 17:40:46","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 134,"post_author": 1,"post_date": "2015-11-20 03:00:16","post_date_gmt": "2015-11-19 18:00:16","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)(例として、)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊してしまいます。”サーバーエラー 500”との戦いが始まります。</strong>

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccess","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 03:00:16","post_modified_gmt": "2015-11-19 18:00:16","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 135,"post_author": 1,"post_date": "2015-11-20 03:14:52","post_date_gmt": "2015-11-19 18:14:52","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)(例として、)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊してしまいます。”サーバーエラー 500”との戦いが始まります。</strong>

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 03:14:52","post_modified_gmt": "2015-11-19 18:14:52","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 136,"post_author": 1,"post_date": "2015-11-20 03:16:27","post_date_gmt": "2015-11-19 18:16:27","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)(例として、)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊してしまいます。”サーバーエラー 500”との戦いが始まります。</strong>

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

&nbsp;","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 03:16:27","post_modified_gmt": "2015-11-19 18:16:27","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 137,"post_author": 1,"post_date": "2015-11-20 03:29:45","post_date_gmt": "2015-11-19 18:29:45","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)(例として、)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊してしまいます。”サーバーエラー 500”との戦いが始まります。</strong>

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 03:29:45","post_modified_gmt": "2015-11-19 18:29:45","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 138,"post_author": 1,"post_date": "2015-11-20 03:31:28","post_date_gmt": "2015-11-19 18:31:28","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

★<strong>1. 壊れたきっかけ</strong>
URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊してしまいます。”サーバーエラー 500”との戦いが始まります。</strong>

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 03:31:28","post_modified_gmt": "2015-11-19 18:31:28","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 139,"post_author": 1,"post_date": "2015-11-20 03:34:17","post_date_gmt": "2015-11-19 18:34:17","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

&nbsp;

<hr />

★<strong>1. 壊れたきっかけ</strong>

<hr />

URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

<hr />

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

<hr />

&nbsp;

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

&nbsp;

<hr />

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊してしまいます。”サーバーエラー 500”との戦いが始まります。</strong>

<hr />

&nbsp;

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

&nbsp;

<hr />

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

<hr />

&nbsp;

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 03:34:17","post_modified_gmt": "2015-11-19 18:34:17","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 140,"post_author": 1,"post_date": "2015-11-20 03:35:25","post_date_gmt": "2015-11-19 18:35:25","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

&nbsp;

<hr />

★<strong>1. 壊れたきっかけ</strong>

<hr />

URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

<hr />

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

<hr />

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら確か何もうつらなくなってしまっていたくサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました！が！

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

&nbsp;

<hr />

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊してしまいます。”サーバーエラー 500”との戦いが始まります。</strong>

<hr />

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

&nbsp;

<hr />

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

<hr />

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 03:35:25","post_modified_gmt": "2015-11-19 18:35:25","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 141,"post_author": 1,"post_date": "2015-11-20 04:18:20","post_date_gmt": "2015-11-19 19:18:20","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

&nbsp;

<hr />

★<strong>1. 壊れたきっかけ</strong>

<hr />

URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

<hr />

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

<hr />

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら何もうつらなくなっていたサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました。が!

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

&nbsp;

<hr />

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊し、”サーバーエラー 500”との戦いが始まります。</strong>

<hr />

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その新たにダウンロードした一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

&nbsp;

<hr />

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

<hr />

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 04:18:20","post_modified_gmt": "2015-11-19 19:18:20","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 142,"post_author": 1,"post_date": "2015-11-20 12:12:40","post_date_gmt": "2015-11-20 03:12:40","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

&nbsp;

<hr />

★<strong>1. 壊れたきっかけ</strong>

<hr />

URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

<hr />

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

<hr />

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら何もうつらなくなっていたサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました。が!

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\" target=\"blank\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

&nbsp;

<hr />

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊し、”サーバーエラー 500”との戦いが始まります。</strong>

<hr />

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\" target=\"blank\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その新たにダウンロードした一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

&nbsp;

<hr />

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

<hr />

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 12:12:40","post_modified_gmt": "2015-11-20 03:12:40","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 143,"post_author": 1,"post_date": "2015-11-20 12:14:27","post_date_gmt": "2015-11-20 03:14:27","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

&nbsp;

<hr />

★<strong>1. 壊れたきっかけ</strong>

<hr />

URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

<hr />

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

<hr />

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら何もうつらなくなっていたサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました。が!

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

&nbsp;

<hr />

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊し、”サーバーエラー 500”との戦いが始まります。</strong>

<hr />

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その新たにダウンロードした一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

&nbsp;

<hr />

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

<hr />

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 12:14:27","post_modified_gmt": "2015-11-20 03:14:27","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 144,"post_author": 1,"post_date": "2015-11-20 12:15:17","post_date_gmt": "2015-11-20 03:15:17","post_content": "昨日と今日で2回このくまおの森が開けなくなる事件が起こったので、その時の対処した方法を覚えてるだけメモ。

&nbsp;

<hr />

★<strong>1. 壊れたきっかけ</strong>

<hr />

URLをWordPressの 設定 &gt; 一般 の

”<strong>WordPress アドレス (URL)</strong>”と”<strong>サイトアドレス (URL)”</strong>

でこのブログを

”<strong>http://kumao-no-mori/blog/</strong>”から”<strong>http://kumao-no-mori/</strong>”

へURLを変更しようと、その2カ所を書き換え

[変更を保存]ボタンを押した瞬間にサイトが開けなくなりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\"><img class=\"aligncenter size-full wp-image-122\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_1.png\" alt=\"WordPress設定画面画像\" width=\"1071\" height=\"349\" /></a>

この時に焦らずに調べてたら、簡単に復活する方法があったのですが、、

自力で直そうとして沼にはまりました。

&nbsp;

<hr />

★<strong>2. wp-adminの「このページにアクセスするための十分なアクセス権がありません。」との戦い</strong>

<hr />

ロリポップのレンタルサーバーを利用しているので、ロリポップに限られてしまうのですが、

ロリポップでは簡単にWordPressをインストールすることができます。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\"><img class=\"size-full wp-image-124 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_2.png\" alt=\"ロリポップ参考画像\" width=\"370\" height=\"111\" /></a>

&nbsp;

私はここから再度変更したいURLでWordPressをインストールしてみることにしました。（やらないほうが良い）

そうしたら何もうつらなくなっていたサイトが、エラーページを表示したと思います。

まあそのURLのディレクトリに表示させたいものを置いていないので、そりゃそうだなという感じで、

次にその表示させたいファイルたちをそのディレクトリに移動させました。

そうしたら、表示されました。が!

見た目はそこそこ復活したのですが、これまでコツコツ投稿してきたものが全てなくなりました。

まじかぁ...めんどくさぁ...と思いつつ、とりあえずデータどこかに残ってないか探しにデータベースへ行きました。

phpMyAdminに入ってデータがないか探してみると、これまで投稿してきたものを見つけることができました。

そのテーブル名を見ると、何か見覚えのある接頭語が...

ロリポップのユーザー専用ページに戻って、<strong id=\"TOGGLE_HISTORY\">WordPressインストール履歴</strong>を確認すると、やっぱりテーブル接頭辞が書いてありました。

ロリポップでWordPressをインストールしたために、新たな接頭語がついたテーブルが作成されていました。(\"wp2_\"みたいなやつ)

ということは、データベースから新しく作成された空っぽのテーブルを取得しているので、そりゃそうだなという感じで、

データベース慣れてないので怖かったですが、思い切って新たに作成された空のテーブルを全部消して、その消したテーブル名の接頭語に変更。

(例として、これまで使っていたテーブル名の接頭語が<strong>wp2_</strong>だったとし、新たに作成したテーブル名の接頭語が<strong>wp3_</strong>だったとすると、接頭語が<strong>wp3_</strong>のテーブルを全て削除し(11個)<strong>wp2_</strong>だったテーブル名の頭を<strong>wp3_</strong>に変更する)

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\"><img class=\"aligncenter size-full wp-image-130\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/11/wordpress_3.png\" alt=\"テーブル接頭語のサンプル\" width=\"243\" height=\"23\" /></a>

これでどうだ！とサイトを見てみると、ちゃんとこれまで投稿してきたものが復活していました。

ですが喜んだのも束の間、ここでようやく<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>との戦いが始まります。

サイトは表示されても、wp-adminに入ろうとしてみると<strong>「このページにアクセスするための十分なアクセス権がありません。」</strong>が表示されました。

表示できても管理ができないと元も子もないです。

これはさすがにググりました。そうしたら、

<a href=\"http://ysklog.net/wordpress/2025.html\" target=\"blank\">http://ysklog.net/wordpress/2025.html</a>

こちらのサイト様に助けられました。

詳しくはめんどいのでこちらのサイトを参考して欲しいですが、

要はデータベース内でまだやることがあり、テーブル内のフィールド内にも接頭語の影響が及んでいたのですね。

テーブル名の接頭語と同じ接頭語にフィールド内の対象も変更します。

これで無事に復活しました。

&nbsp;

<hr />

★<strong>3. と思いきや、欲張りなのでまたすぐにぶっ壊し、”サーバーエラー 500”との戦いが始まります。</strong>

<hr />

★<strong>2</strong>の終わりに復活しました。と書きましたが、完全ではありませんでした。

アップした画像は表示されず、インストールしたプラグインもなくなってしまってました。

新しくWordPressをインストールし直して、それを見てるのだからそりゃそうだなという感じで、

まあ、これまで画像少ししか上げてないし。プラグインもまたインストールすればいいし。と諦めることもできたのですが、「このページにアクセスするための十分なアクセス権がありません。」との戦いで何か楽しくなってきた私は、これも戻してみようとチャレンジすることにしました。

ディレクトリのルートには新しく作成されたphpファイルなどが先ほどの行為で作成されました。

なので丸ごとこれまでのWordPress一式のファイルをそのルートの新規作成されたphpたちに上書きさせちゃえばいいんじゃない？と閃き、WordPress関連一式全てをルートに持ってきて上書きさせました。(やってはいけません)

そして全部元に戻ったかなとサイトの方を見てみると、<strong>サーバーエラー 500</strong>と出ており、完全に表示されなくなりました。

オワタかな...と思いましたが、ここでまたグーグル先生に訊ねました。

すると大概が.htaccessの仕業だろうとの事。

私もそこを疑っていたのですが、見たところ最初の状態と変わってなくて問題がなさそうでした。

そこで私はとりあえず元に戻そうと考え、<a href=\"https://ja.wordpress.org/install/\" target=\"blank\">https://ja.wordpress.org/install/</a> こちらのWordPressのサイトから一式をダウンロードし、ルートディレクトリのWordPress関連一式ファイルを削除し、その新たにダウンロードした一式をルートディレクトリにアップロードしました。

そして　wp-config.phpの
<pre class=\"lang:php decode:true\">$table_prefix</pre>
箇所を接頭語を正しいものに変えたら、先ほどの表示される状態に戻りました。(★2終了時の状態。)

wp-adminを見ると、また見慣れないものが表示されました。ですがちゃんとWPのロゴと説明文が表示されていてちょっと安心。

とりあえず、表示されるがまま進んでいくと、既にあって使いたいデータベースがあれば打ち込んで的なのが出たと思うので、正しく自分のデータベースの情報を打ち込み進むと、wp-adminが無事表示されました。(★2終了時の状態。)

ということで、また振り出しに戻ったわけです。(★2終了時の状態。)

&nbsp;

<hr />

★<strong>4. 最終章！完璧に壊れる前の元の状態に復活させます！</strong>

<hr />

忘れないうちに今日中に書ききってしまおうとしたらもう今日じゃない、3時過ぎとるやさかいに、テンションもおかしくなっとるで。

★3.の”サーバーエラー 500”との戦いは無駄ではありませんでした。

サーバーエラー 500が私にこう囁いてくれました、「wp関連ファイル全てをぶち込んで上書きとかするな、必要なものだけ上書きさせろ」と。。。

確かに聞こえました。

そして私はあるフォルダの声を聞きました。その声の主は”<strong>wp-content</strong>”。

私が唯一直接弄るフォルダです。

それだけ...これまでの”<strong>wp-content</strong>”だけを、インストールしただけの真っさらで無垢なWordPressのwp-contentに上書きさせます。

すると....なんということでしょう。プラグインも画像も何もかも元どおりに復活しました。

めでたしめでたし。","post_title": "WordPressで「このページにアクセスするための十分なアクセス権がありません。」になった時と \"サーバーエラー 500\" になった時","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "117-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 12:15:17","post_modified_gmt": "2015-11-20 03:15:17","post_content_filtered": "","post_parent": 117,"guid": "http://kumao-no-mori.com/2015/11/20/117-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 145,"post_author": 1,"post_date": "2015-11-20 21:19:39","post_date_gmt": "2015-11-20 12:19:39","post_content": "<a href=\"http://kumao-no-mori.com/blog/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>@kumapoyo_</p>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 21:19:39","post_modified_gmt": "2015-11-20 12:19:39","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/11/20/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 146,"post_author": 1,"post_date": "2015-11-20 21:20:31","post_date_gmt": "2015-11-20 12:20:31","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>@kumapoyo_</p>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-20 21:20:31","post_modified_gmt": "2015-11-20 12:20:31","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/11/20/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 147,"post_author": 1,"post_date": "2015-11-20 23:32:08","post_date_gmt": "2015-11-20 14:32:08","post_content": "","post_title": "cropped-mori_bg","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "cropped-mori_bg","to_ping": "","pinged": "","post_modified": "2015-11-20 23:32:18","post_modified_gmt": "2015-11-20 14:32:18","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/11/cropped-mori_bg.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 148,"post_author": 1,"post_date": "2015-11-21 00:00:35","post_date_gmt": "2015-11-20 15:00:35","post_content": "http://kumao-no-mori.com/wp-content/uploads/2015/11/cropped-cropped-mori_bg.png","post_title": "cropped-cropped-mori_bg.png","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "cropped-cropped-mori_bg-png","to_ping": "","pinged": "","post_modified": "2015-11-21 00:00:35","post_modified_gmt": "2015-11-20 15:00:35","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/11/cropped-cropped-mori_bg.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 149,"post_author": 1,"post_date": "2015-11-21 00:00:57","post_date_gmt": "2015-11-20 15:00:57","post_content": "http://kumao-no-mori.com/wp-content/uploads/2015/11/cropped-cropped-mori_bg1.png","post_title": "cropped-cropped-mori_bg1.png","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "cropped-cropped-mori_bg1-png","to_ping": "","pinged": "","post_modified": "2015-11-21 00:00:57","post_modified_gmt": "2015-11-20 15:00:57","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/11/cropped-cropped-mori_bg1.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 150,"post_author": 1,"post_date": "2015-11-21 00:01:32","post_date_gmt": "2015-11-20 15:01:32","post_content": "http://kumao-no-mori.com/wp-content/uploads/2015/11/cropped-cropped-mori_bg2.png","post_title": "cropped-cropped-mori_bg2.png","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "cropped-cropped-mori_bg2-png","to_ping": "","pinged": "","post_modified": "2015-11-21 00:01:32","post_modified_gmt": "2015-11-20 15:01:32","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/11/cropped-cropped-mori_bg2.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 152,"post_author": 1,"post_date": "2015-11-27 10:24:34","post_date_gmt": "2015-11-27 01:24:34","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>Twitter☆@kumapoyo_</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-11-27 10:24:34","post_modified_gmt": "2015-11-27 01:24:34","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/11/27/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 155,"post_author": 1,"post_date": "2015-12-02 02:31:14","post_date_gmt": "2015-12-01 17:31:14","post_content": "左右中央にしたいときって、
https://gist.github.com/naokidoguchi/8d88ddc3652c345d576c
てするじゃないですか。

前者の margin: 0 auto; でセンターにさせる為に display:  block; にしたり、
また後者の方でいきたいなら display: inline; 又は inline-block; にするじゃないですか。

 でも今日、このどれでも効かないという状況が起こったのです。

それはブロック要素の筈なのですが、上のコード２つ書いても効かない。

その要素には position: absolute; がかかっていて、それが原因だと思うのですが。

そういう時は、
https://gist.github.com/naokidoguchi/b85704c8786ab8b03652
これでなんかうまく真ん中にいくと思います。
","post_title": "CSSの左右中央","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "css%e3%81%ae%e5%b7%a6%e5%8f%b3%e4%b8%ad%e5%a4%ae","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=155","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 157,"post_author": 1,"post_date": "2015-12-02 02:31:14","post_date_gmt": "2015-12-01 17:31:14","post_content": "左右中央にしたいときって、
https://gist.github.com/naokidoguchi/8d88ddc3652c345d576c
てするじゃないですか。

前者の margin: 0 auto; でセンターにさせる為に display:  block; にしたり、
また後者の方でいきたいなら display: inline; 又は inline-block; にするじゃないですか。

 でも今日、このどれでも効かないという状況が起こったのです。

それはブロック要素の筈なのですが、上のコード２つ書いても効かない。

その要素には position: absolute; がかかっていて、それがきっかけだと思うのですが。

そういう時は、
https://gist.github.com/naokidoguchi/b85704c8786ab8b03652
これでなんかうまく真ん中にいった気がします。
","post_title": "CSSの左右中央","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "155-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 02:31:14","post_modified_gmt": "2015-12-01 17:31:14","post_content_filtered": "","post_parent": 155,"guid": "http://kumao-no-mori.com/2015/12/02/155-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 159,"post_author": 1,"post_date": "2015-12-02 13:55:39","post_date_gmt": "2015-12-02 04:55:39","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre>[push]
	default = nothing</pre>
の箇所を
<pre>[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre>$ git --version
Illegal instruction: 4</pre> 
...。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。

というか、vimでホイホイ環境変数を変えてしまって、しかもそれをバックアップとってなくてパスわからなくて、gitコマンドも他に使ってるコマンドもいろいろと使えなくなってしまいました。
command not found
の嵐です。

もともと指定していたパス探しに時間がかかってしまったので、これからはこういった.bash_profileファイルとかはバックアップちゃんとしようとおもいます…

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git%e3%81%ae%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e3%82%a2%e3%83%83%e3%83%97","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=159","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 160,"post_author": 1,"post_date": "2015-12-02 13:15:49","post_date_gmt": "2015-12-02 04:15:49","post_content": "","post_title": "Gitのバージョンアップ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 13:15:49","post_modified_gmt": "2015-12-02 04:15:49","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2015/12/02/159-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 161,"post_author": 1,"post_date": "2015-12-02 13:55:39","post_date_gmt": "2015-12-02 04:55:39","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre class=\"lang:sh range:12-13 decode:true \">[push]
	default = nothing</pre>
の箇所を
<pre class=\"lang:sh range:12-13 decode:true \">[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre class=\"lang:sh decode:true \" >$ git --version
Illegal instruction: 4</pre> 
.....。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 13:55:39","post_modified_gmt": "2015-12-02 04:55:39","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2015/12/02/159-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 162,"post_author": 1,"post_date": "2015-12-02 15:14:34","post_date_gmt": "2015-12-02 06:14:34","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre>[push]
	default = nothing</pre>
の箇所を
<pre>[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre>$ git --version
Illegal instruction: 4</pre> 
.....。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。

というか、vimでホイホイ環境変数を変えてしまって、しかもそれをバックアップとってなくてパスわからなくて、gitコマンドも他に使ってるコマンドもいろいろと使えなくなってしまいました。
command not found
の嵐です。

もともと指定していたパス探しに時間がかかってしまったので。","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-autosave-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 15:14:34","post_modified_gmt": "2015-12-02 06:14:34","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2015/12/02/159-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 163,"post_author": 1,"post_date": "2015-12-02 13:59:12","post_date_gmt": "2015-12-02 04:59:12","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre class=\"nums-toggle:false\">[push]
	default = nothing</pre>
の箇所を
<pre class=\"nums-toggle:false\">[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre>$ git --version
Illegal instruction: 4</pre> 
.....。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 13:59:12","post_modified_gmt": "2015-12-02 04:59:12","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2015/12/02/159-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 164,"post_author": 1,"post_date": "2015-12-02 13:59:45","post_date_gmt": "2015-12-02 04:59:45","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre>[push]
	default = nothing</pre>
の箇所を
<pre>[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre>$ git --version
Illegal instruction: 4</pre> 
.....。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 13:59:45","post_modified_gmt": "2015-12-02 04:59:45","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2015/12/02/159-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 165,"post_author": 1,"post_date": "2015-12-02 15:15:26","post_date_gmt": "2015-12-02 06:15:26","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre>[push]
	default = nothing</pre>
の箇所を
<pre>[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre>$ git --version
Illegal instruction: 4</pre> 
.....。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。

というか、vimでホイホイ環境変数を変えてしまって、しかもそれをバックアップとってなくてパスわからなくて、gitコマンドも他に使ってるコマンドもいろいろと使えなくなってしまいました。
command not found
の嵐です。

もともと指定していたパス探しに時間がかかってしまったので、これからはこういったファイルはバックアップちゃんとしようとおもいます...。","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 15:15:26","post_modified_gmt": "2015-12-02 06:15:26","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2015/12/02/159-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 166,"post_author": 1,"post_date": "2015-12-02 15:18:30","post_date_gmt": "2015-12-02 06:18:30","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre>[push]
	default = nothing</pre>
の箇所を
<pre>[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre>$ git --version
Illegal instruction: 4</pre> 
.....。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。

というか、vimでホイホイ環境変数を変えてしまって、しかもそれをバックアップとってなくてパスわからなくて、gitコマンドも他に使ってるコマンドもいろいろと使えなくなってしまいました。
command not found
の嵐です。

もともと指定していたパス探しに時間がかかってしまったので、これからはこういった.bash_profileファイルとかはバックアップちゃんとしようとおもいます...。","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 15:18:30","post_modified_gmt": "2015-12-02 06:18:30","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2015/12/02/159-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 167,"post_author": 1,"post_date": "2015-12-02 15:19:02","post_date_gmt": "2015-12-02 06:19:02","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre>[push]
	default = nothing</pre>
の箇所を
<pre>[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre>$ git --version
Illegal instruction: 4</pre> 
...。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。

というか、vimでホイホイ環境変数を変えてしまって、しかもそれをバックアップとってなくてパスわからなくて、gitコマンドも他に使ってるコマンドもいろいろと使えなくなってしまいました。
command not found
の嵐です。

もともと指定していたパス探しに時間がかかってしまったので、これからはこういった.bash_profileファイルとかはバックアップちゃんとしようとおもいます...。","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 15:19:02","post_modified_gmt": "2015-12-02 06:19:02","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2015/12/02/159-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 168,"post_author": 1,"post_date": "2015-12-02 18:55:05","post_date_gmt": "2015-12-02 09:55:05","post_content": "左右中央にしたいときって、
https://gist.github.com/naokidoguchi/8d88ddc3652c345d576c
てするじゃないですか。

前者の margin: 0 auto; でセンターにさせる為に display:  block; にしたり、
また後者の方でいきたいなら display: inline; 又は inline-block; にするじゃないですか。

 でも今日、このどれでも効かないという状況が起こったのです。

それはブロック要素の筈なのですが、上のコード２つ書いても効かない。

その要素には position: absolute; がかかっていて、それが原因だと思うのですが。

そういう時は、
https://gist.github.com/naokidoguchi/b85704c8786ab8b03652
これでなんかうまく真ん中にいくと思います。
","post_title": "CSSの左右中央","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "155-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-02 18:55:05","post_modified_gmt": "2015-12-02 09:55:05","post_content_filtered": "","post_parent": 155,"guid": "http://kumao-no-mori.com/2015/12/02/155-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 169,"post_author": 1,"post_date": "2015-12-03 14:47:14","post_date_gmt": "2015-12-03 05:47:14","post_content": "htmlでこんな風にinput type=\"file\"を設定した時。
（labelタグで囲って、inputタグをdisplay:none;で消して、div.fileBtnLayoutをボタンとして見せている。labelタグで囲う事で、display:none;で消してもちゃんとtype=\"file\"が機能する。）
https://gist.github.com/naokidoguchi/977625fc67aff6778a5c

input type=\"file\"すると、デフォルトでは選択したファイル名がボタンの横に表示されるが、input消してしまったのでオリジナルにそれを作成したい場合。
(span.fileNameに取得したファイル名が入るようにしている。)
https://gist.github.com/naokidoguchi/fe2a70bf683331d0132c","post_title": "jQuery inputでの[ファイルを選択]ボタンをオリジナルにした時の横に出すファイル名","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "jquery-input%e3%81%a7%e3%81%ae%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e9%81%b8%e6%8a%9e%e3%83%9c%e3%82%bf%e3%83%b3%e3%82%92%e3%82%aa%e3%83%aa%e3%82%b8%e3%83%8a%e3%83%ab%e3%81%ab%e3%81%97","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=169","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 170,"post_author": 1,"post_date": "2015-12-03 14:36:01","post_date_gmt": "2015-12-03 05:36:01","post_content": "","post_title": "jQuery inputでの[ファイルを選択ボタン]をオリジナル化時の横に出すファイル名","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "169-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-03 14:36:01","post_modified_gmt": "2015-12-03 05:36:01","post_content_filtered": "","post_parent": 169,"guid": "http://kumao-no-mori.com/2015/12/03/169-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 171,"post_author": 1,"post_date": "2015-12-03 14:47:14","post_date_gmt": "2015-12-03 05:47:14","post_content": "htmlでこんな風にinput type=\"file\"を設定した時。
（<label>タグで囲って、<input>タグをdisplay:none;で消して、div.fileBtnLayoutをボタンとして見せている。<label>タグで囲う事で、display:none;で消してもちゃんとtype=\"file\"が機能する。）
https://gist.github.com/naokidoguchi/977625fc67aff6778a5c

input type=\"file\"すると、デフォルトでは選択したファイル名がボタンの横に表示されるが、input消してしまったのでオリジナルにそれを作成したい場合。
(span.fileNameに取得したファイル名が入るようにしている。)
https://gist.github.com/naokidoguchi/fe2a70bf683331d0132c","post_title": "jQuery inputでの[ファイルを選択ボタン]をオリジナルにした時の横に出すファイル名","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "169-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-03 14:47:14","post_modified_gmt": "2015-12-03 05:47:14","post_content_filtered": "","post_parent": 169,"guid": "http://kumao-no-mori.com/2015/12/03/169-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 172,"post_author": 1,"post_date": "2015-12-03 14:48:08","post_date_gmt": "2015-12-03 05:48:08","post_content": "htmlでこんな風にinput type=\"file\"を設定した時。
（labelタグで囲って、inputタグをdisplay:none;で消して、div.fileBtnLayoutをボタンとして見せている。labelタグで囲う事で、display:none;で消してもちゃんとtype=\"file\"が機能する。）
https://gist.github.com/naokidoguchi/977625fc67aff6778a5c

input type=\"file\"すると、デフォルトでは選択したファイル名がボタンの横に表示されるが、input消してしまったのでオリジナルにそれを作成したい場合。
(span.fileNameに取得したファイル名が入るようにしている。)
https://gist.github.com/naokidoguchi/fe2a70bf683331d0132c","post_title": "jQuery inputでの[ファイルを選択ボタン]をオリジナルにした時の横に出すファイル名","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "169-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-03 14:48:08","post_modified_gmt": "2015-12-03 05:48:08","post_content_filtered": "","post_parent": 169,"guid": "http://kumao-no-mori.com/2015/12/03/169-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 173,"post_author": 1,"post_date": "2015-12-03 19:56:45","post_date_gmt": "2015-12-03 10:56:45","post_content": "htmlでこんな風にinput type=\"file\"を設定した時。
（labelタグで囲って、inputタグをdisplay:none;で消して、div.fileBtnLayoutをボタンとして見せている。labelタグで囲う事で、display:none;で消してもちゃんとtype=\"file\"が機能する。）
https://gist.github.com/naokidoguchi/977625fc67aff6778a5c

input type=\"file\"すると、デフォルトでは選択したファイル名がボタンの横に表示されるが、input消してしまったのでオリジナルにそれを作成したい場合。
(span.fileNameに取得したファイル名が入るようにしている。)
https://gist.github.com/naokidoguchi/fe2a70bf683331d0132c","post_title": "jQuery inputでの[ファイルを選択]ボタンをオリジナルにした時の横に出すファイル名","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "169-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-03 19:56:45","post_modified_gmt": "2015-12-03 10:56:45","post_content_filtered": "","post_parent": 169,"guid": "http://kumao-no-mori.com/2015/12/03/169-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 177,"post_author": 1,"post_date": "2015-12-07 13:15:36","post_date_gmt": "2015-12-07 04:15:36","post_content": "jsプラグインで、モーダルウィンドウを作るのに便利な「leanModal」ですが、スクロールした先で画面中央に表示させるオプションって自分が探したところなかったので、自分はこんな風にして上下中央っぽくみせるように書き足しています。
https://gist.github.com/naokidoguchi/56feaddf48a0a0259dd3
これだけ。(jquery読み込んでる前提です。)

leanModalに限らず、divでボックス作ってそれをposition:absolute;にして上記のコードを応用すれば同じように思い通りの画面位置で表示できますね。","post_title": "leanModalの上下中央配置","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "leanmodal%e3%81%ae%e4%b8%8a%e4%b8%8b%e4%b8%ad%e5%a4%ae%e9%85%8d%e7%bd%ae","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=177","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 178,"post_author": 1,"post_date": "2015-12-07 13:15:25","post_date_gmt": "2015-12-07 04:15:25","post_content": "jsプラグインで、モーダルウィンドウを作るのに便利な「leanModal」ですが、
スクロールした先で画面中央に表示させるオプションって自分が探したところなかったので、
自分はこんな風にして、上下中央っぽくみせるように書き足しています。
https://gist.github.com/naokidoguchi/56feaddf48a0a0259dd3
これだけ。","post_title": "leanModalの上下中央配置","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "177-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-07 13:15:25","post_modified_gmt": "2015-12-07 04:15:25","post_content_filtered": "","post_parent": 177,"guid": "http://kumao-no-mori.com/2015/12/07/177-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 179,"post_author": 1,"post_date": "2015-12-07 13:17:36","post_date_gmt": "2015-12-07 04:17:36","post_content": "jsプラグインで、モーダルウィンドウを作るのに便利な「leanModal」ですが、
スクロールした先で画面中央に表示させるオプションって自分が探したところなかったので、
自分はこんな風にして、上下中央っぽくみせるように書き足しています。
https://gist.github.com/naokidoguchi/56feaddf48a0a0259dd3
これだけ。(jquery読み込んでる前提です。)","post_title": "leanModalの上下中央配置","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "177-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-07 13:17:36","post_modified_gmt": "2015-12-07 04:17:36","post_content_filtered": "","post_parent": 177,"guid": "http://kumao-no-mori.com/2015/12/07/177-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 180,"post_author": 1,"post_date": "2015-12-07 13:30:19","post_date_gmt": "2015-12-07 04:30:19","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script></p><a href=\"https://twitter.com/share\" class=\"twitter-share-button\"{count} data-via=\"kumapoyo_\" data-size=\"large\" data-hashtags=\"くまおの森\">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-07 13:30:19","post_modified_gmt": "2015-12-07 04:30:19","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/12/07/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 181,"post_author": 1,"post_date": "2015-12-07 16:31:12","post_date_gmt": "2015-12-07 07:31:12","post_content": "jsプラグインで、モーダルウィンドウを作るのに便利な「leanModal」ですが、
スクロールした先で画面中央に表示させるオプションって自分が探したところなかったので、
自分はこんな風にして、上下中央っぽくみせるように書き足しています。
https://gist.github.com/naokidoguchi/56feaddf48a0a0259dd3
これだけ。(jquery読み込んでる前提です。)

leanModalに限らず、divでボックス作って、それをposition:absolute;にして上記のコードを応用すれば同じようにおも画面位置で表示できますね。","post_title": "leanModalの上下中央配置","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "177-autosave-v1","to_ping": "","pinged": "","post_modified": "2015-12-07 16:31:12","post_modified_gmt": "2015-12-07 07:31:12","post_content_filtered": "","post_parent": 177,"guid": "http://kumao-no-mori.com/2015/12/07/177-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 182,"post_author": 1,"post_date": "2015-12-07 16:31:27","post_date_gmt": "2015-12-07 07:31:27","post_content": "jsプラグインで、モーダルウィンドウを作るのに便利な「leanModal」ですが、
スクロールした先で画面中央に表示させるオプションって自分が探したところなかったので、
自分はこんな風にして、上下中央っぽくみせるように書き足しています。
https://gist.github.com/naokidoguchi/56feaddf48a0a0259dd3
これだけ。(jquery読み込んでる前提です。)

leanModalに限らず、divでボックス作って、それをposition:absolute;にして上記のコードを応用すれば同じように思い通りの画面位置で表示できますね。","post_title": "leanModalの上下中央配置","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "177-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-07 16:31:27","post_modified_gmt": "2015-12-07 07:31:27","post_content_filtered": "","post_parent": 177,"guid": "http://kumao-no-mori.com/2015/12/07/177-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 183,"post_author": 1,"post_date": "2015-12-07 16:32:44","post_date_gmt": "2015-12-07 07:32:44","post_content": "jsプラグインで、モーダルウィンドウを作るのに便利な「leanModal」ですが、スクロールした先で画面中央に表示させるオプションって自分が探したところなかったので、自分はこんな風にして上下中央っぽくみせるように書き足しています。
https://gist.github.com/naokidoguchi/56feaddf48a0a0259dd3
これだけ。(jquery読み込んでる前提です。)

leanModalに限らず、divでボックス作ってそれをposition:absolute;にして上記のコードを応用すれば同じように思い通りの画面位置で表示できますね。","post_title": "leanModalの上下中央配置","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "177-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-07 16:32:44","post_modified_gmt": "2015-12-07 07:32:44","post_content_filtered": "","post_parent": 177,"guid": "http://kumao-no-mori.com/2015/12/07/177-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 184,"post_author": 1,"post_date": "2015-12-08 12:46:11","post_date_gmt": "2015-12-08 03:46:11","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script></p>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 12:46:11","post_modified_gmt": "2015-12-08 03:46:11","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/12/08/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 187,"post_author": 1,"post_date": "2015-12-08 13:33:09","post_date_gmt": "2015-12-08 04:33:09","post_content": "「schema.org(スキーマドットオルグ)」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

<strong>★リッチスニペット</strong>
metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。
schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。


<strong>★プロパティ</strong>
<strong>☆ itemscope</strong>
microdata(検索エンジンに送られる情報)を使う事を宣言する。

<strong>☆ itemtype</strong>
microdataの種類をURLで指定する。

<strong>☆ itemprop</strong>
細かい項目を指定する。

とかあります。
タグの中にこのようなプロパティを記述して、情報をコンピュータに細かく伝えていきます。
リファレンスはこちら↓
<a href=\"http://schema.org/docs/full.html\" target=\"_blank\">http://schema.org/docs/full.html</a>


schema.orgで記述したコードは↓のGoogleDevelopersで検証できます。
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>","post_title": "schema.org について１","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "schema-org-%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:14","post_modified_gmt": "2016-09-29 10:03:14","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=187","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 188,"post_author": 1,"post_date": "2015-12-08 12:57:37","post_date_gmt": "2015-12-08 03:57:37","post_content": "","post_title": "schema.org について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 12:57:37","post_modified_gmt": "2015-12-08 03:57:37","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/2015/12/08/187-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 189,"post_author": 1,"post_date": "2015-12-08 13:15:31","post_date_gmt": "2015-12-08 04:15:31","post_content": "「schema.org」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来るみたいです。

metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。

schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。","post_title": "schema.org について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 13:15:31","post_modified_gmt": "2015-12-08 04:15:31","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/2015/12/08/187-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 190,"post_author": 1,"post_date": "2015-12-08 13:15:42","post_date_gmt": "2015-12-08 04:15:42","post_content": "「schema.org」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。

schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。","post_title": "schema.org について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 13:15:42","post_modified_gmt": "2015-12-08 04:15:42","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/2015/12/08/187-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 191,"post_author": 1,"post_date": "2015-12-08 13:27:45","post_date_gmt": "2015-12-08 04:27:45","post_content": "「schema.org(スキーマドットオルグ)」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

★<strong>リッチスニペット</strong>
☆ metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。
☆ schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。

★<strong>プロパティ</strong>
☆ itemscope
microdata(検索エンジンに送られる情報)を使う事を宣言する。
☆ itemtype
microdataの種類をURLで指定する。
☆ itemprop
細かい項目を指定する。

とかあります。
タグの中にこのようなプロパティを記述して、情報をコンピュータに細かく伝えていきます。

","post_title": "schema.org について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 13:27:45","post_modified_gmt": "2015-12-08 04:27:45","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/2015/12/08/187-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 192,"post_author": 1,"post_date": "2015-12-08 13:33:09","post_date_gmt": "2015-12-08 04:33:09","post_content": "「schema.org(スキーマドットオルグ)」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

★<strong>リッチスニペット</strong>
☆ metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。
☆ schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。

★<strong>プロパティ</strong>
☆ itemscope
microdata(検索エンジンに送られる情報)を使う事を宣言する。
☆ itemtype
microdataの種類をURLで指定する。
☆ itemprop
細かい項目を指定する。

とかあります。
タグの中にこのようなプロパティを記述して、情報をコンピュータに細かく伝えていきます。
リファレンスはこちら↓
<a href=\"http://schema.org/docs/full.html\" target=\"_blank\">http://schema.org/docs/full.html</a>


schema.orgで記述したコードは↓のGoogleDevelopersで、検証します。
https://developers.google.com/structured-data/testing-tool/","post_title": "schema.org について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 13:33:09","post_modified_gmt": "2015-12-08 04:33:09","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/2015/12/08/187-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 193,"post_author": 1,"post_date": "2015-12-08 13:34:34","post_date_gmt": "2015-12-08 04:34:34","post_content": "「schema.org(スキーマドットオルグ)」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

★<strong>リッチスニペット</strong>
metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。

schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。


★<strong>プロパティ</strong>
☆ itemscope
microdata(検索エンジンに送られる情報)を使う事を宣言する。

☆ itemtype
microdataの種類をURLで指定する。

☆ itemprop
細かい項目を指定する。

とかあります。
タグの中にこのようなプロパティを記述して、情報をコンピュータに細かく伝えていきます。
リファレンスはこちら↓
<a href=\"http://schema.org/docs/full.html\" target=\"_blank\">http://schema.org/docs/full.html</a>


schema.orgで記述したコードは↓のGoogleDevelopersで、検証します。
https://developers.google.com/structured-data/testing-tool/","post_title": "schema.org について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 13:34:34","post_modified_gmt": "2015-12-08 04:34:34","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/2015/12/08/187-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 194,"post_author": 1,"post_date": "2015-12-08 13:35:19","post_date_gmt": "2015-12-08 04:35:19","post_content": "「schema.org(スキーマドットオルグ)」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

★<strong>リッチスニペット</strong>
metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。
schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。


★<strong>プロパティ</strong>

☆ itemscope
microdata(検索エンジンに送られる情報)を使う事を宣言する。

☆ itemtype
microdataの種類をURLで指定する。

☆ itemprop
細かい項目を指定する。

とかあります。
タグの中にこのようなプロパティを記述して、情報をコンピュータに細かく伝えていきます。
リファレンスはこちら↓
<a href=\"http://schema.org/docs/full.html\" target=\"_blank\">http://schema.org/docs/full.html</a>


schema.orgで記述したコードは↓のGoogleDevelopersで、検証します。
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>","post_title": "schema.org について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 13:35:19","post_modified_gmt": "2015-12-08 04:35:19","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/2015/12/08/187-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 195,"post_author": 1,"post_date": "2015-12-08 13:36:40","post_date_gmt": "2015-12-08 04:36:40","post_content": "「schema.org(スキーマドットオルグ)」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

★<strong>リッチスニペット</strong>
metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。
schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。


★<strong>プロパティ</strong>

☆ itemscope
microdata(検索エンジンに送られる情報)を使う事を宣言する。

☆ itemtype
microdataの種類をURLで指定する。

☆ itemprop
細かい項目を指定する。

とかあります。
タグの中にこのようなプロパティを記述して、情報をコンピュータに細かく伝えていきます。
リファレンスはこちら↓
<a href=\"http://schema.org/docs/full.html\" target=\"_blank\">http://schema.org/docs/full.html</a>


schema.orgで記述したコードは↓のGoogleDevelopersで検証できます。
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>","post_title": "schema.org について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 13:36:40","post_modified_gmt": "2015-12-08 04:36:40","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/2015/12/08/187-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 196,"post_author": 1,"post_date": "2015-12-08 13:42:35","post_date_gmt": "2015-12-08 04:42:35","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script></p>

<div id=\"fb-root\"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = \"//connect.facebook.net/ja_JP/sdk.js#xfbml=1&version=v2.5\";
  fjs.parentNode.insertBefore(js, fjs);
}(document, \'script\', \'facebook-jssdk\'));</script>
<div class=\"fb-share-button\" data-href=\"http://kumao-no-mori.com/\" data-layout=\"button_count\"></div>","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-08 13:42:35","post_modified_gmt": "2015-12-08 04:42:35","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/12/08/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 197,"post_author": 1,"post_date": "2015-12-10 13:35:55","post_date_gmt": "2015-12-10 04:35:55","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script></p>

 [contact-form][contact-field label=\'名前\' type=\'name\' required=\'1\'/][contact-field label=\'メールアドレス\' type=\'email\' required=\'1\'/][contact-field label=\'ウェブサイト\' type=\'url\'/][contact-field label=\'コメント\' type=\'textarea\' required=\'1\'/][/contact-form] ","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-10 13:35:55","post_modified_gmt": "2015-12-10 04:35:55","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/12/10/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 198,"post_author": 1,"post_date": "2015-12-10 13:39:15","post_date_gmt": "2015-12-10 04:39:15","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script></p>

<strong>コンタクト</strong>
 [contact-form][contact-field label=\'名前\' type=\'name\' required=\'1\'/][contact-field label=\'メールアドレス\' type=\'email\' required=\'1\'/][contact-field label=\'ウェブサイト\' type=\'url\'/][contact-field label=\'コメント\' type=\'textarea\' required=\'1\'/][/contact-form] ","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-10 13:39:15","post_modified_gmt": "2015-12-10 04:39:15","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/12/10/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 199,"post_author": 1,"post_date": "2015-12-11 12:48:27","post_date_gmt": "2015-12-11 03:48:27","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★<br>
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script></p>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 12:48:27","post_modified_gmt": "2015-12-11 03:48:27","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/12/11/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 200,"post_author": 1,"post_date": "2015-12-11 12:49:06","post_date_gmt": "2015-12-11 03:49:06","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</br>
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script></p>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 12:49:06","post_modified_gmt": "2015-12-11 03:49:06","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2015/12/11/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 201,"post_author": 1,"post_date": "2015-12-11 13:48:46","post_date_gmt": "2015-12-11 04:48:46","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display: flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;&nbsp;並びの方向を設定できる。
<strong>☆ row</strong>
&nbsp;&nbsp;&nbsp;初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
&nbsp;&nbsp;&nbsp;右から左に並ぶ。
<strong>☆ column</strong>
&nbsp;&nbsp;&nbsp;上から下に並ぶ。
<strong>☆ column-reverse</strong>
&nbsp;&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
<strong>★ flex-wrap</strong>
&nbsp;&nbsp;&nbsp;折り返しの設定が出来る。
<strong>☆ nowrap</strong>
&nbsp;&nbsp;&nbsp;初期値。折り返し無し。
<strong>☆ wrap</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
<strong>★ flex-flow</strong>
&nbsp;&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて１","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "css-displayflex%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:54","post_modified_gmt": "2016-09-29 09:55:54","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=201","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 202,"post_author": 1,"post_date": "2015-12-11 13:26:03","post_date_gmt": "2015-12-11 04:26:03","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \" >.parent {
    display:flex;
}</pre> 
をセットで準備OK。


","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 13:26:03","post_modified_gmt": "2015-12-11 04:26:03","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 203,"post_author": 1,"post_date": "2015-12-11 13:36:24","post_date_gmt": "2015-12-11 04:36:24","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
プロパティ：★ <strong>flex-direction</strong>

並びの方向を設定できる。
値：☆ row

初期値、左から右に並ぶ。

☆ row-reverse

右から左に並ぶ。

☆ column

上から下に並ぶ。

☆ column-reverse

下から上に並ぶ。

&nbsp;

★ <strong>flex-wrap</strong>

&nbsp;

&nbsp;
<h4></h4>","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 13:36:24","post_modified_gmt": "2015-12-11 04:36:24","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 204,"post_author": 1,"post_date": "2015-12-11 13:38:38","post_date_gmt": "2015-12-11 04:38:38","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
<strong>プロパティ：★ flex-direction</strong>
並びの方向を設定できる。

値：☆ row
初期値、左から右に並ぶ。

☆ row-reverse
右から左に並ぶ。

☆ column
上から下に並ぶ。

☆ column-reverse
下から上に並ぶ。
<br>
★ <strong>flex-wrap</strong>

<h4></h4>","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 13:38:38","post_modified_gmt": "2015-12-11 04:38:38","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 205,"post_author": 1,"post_date": "2015-12-11 13:48:46","post_date_gmt": "2015-12-11 04:48:46","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★->プロパティ ☆->値)
<strong>★ flex-direction</strong>
並びの方向を設定ができる。

☆ row
初期値。左から右に並ぶ。

☆ row-reverse
右から左に並ぶ。

☆ column
上から下に並ぶ。

☆ column-reverse
下から上に並ぶ。


★ <strong>flex-wrap</strong>
折り返しの設定が出来る。

☆ nowrap
初期値。折り返し無し。

☆ wrap
はみ出た要素を折り返し。

☆ wrap-reverse
はみ出た要素を逆の順番で折り返し。



★ flex-flow
上の二つをまとめて指定できる。
flex-flow: [flex-directionの値] [flex-wrapの値];
の順番で書く。


とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 13:48:46","post_modified_gmt": "2015-12-11 04:48:46","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 207,"post_author": 1,"post_date": "2015-12-11 15:31:56","post_date_gmt": "2015-12-11 06:31:56","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;並びの方向を設定ができる。
☆ row
&nbsp;&nbsp;初期値。左から右に並ぶ。
☆ row-reverse
&nbsp;&nbsp;右から左に並ぶ。
☆ column
&nbsp;&nbsp;上から下に並ぶ。
☆ column-reverse
&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
★ <strong>flex-wrap</strong>
&nbsp;&nbsp;折り返しの設定が出来る。
☆ nowrap
&nbsp;&nbsp;初期値。折り返し無し。
☆ wrap
&nbsp;&nbsp;はみ出た要素を折り返し。
☆ wrap-reverse
&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
★ flex-flow
&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 15:31:56","post_modified_gmt": "2015-12-11 06:31:56","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 208,"post_author": 1,"post_date": "2015-12-11 15:51:30","post_date_gmt": "2015-12-11 06:51:30","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
並びの方向を設定ができる。
<strong>☆ row</strong>
初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
右から左に並ぶ。
<strong>☆ column</strong>
上から下に並ぶ。
<strong>☆ column-reverse</strong>
下から上に並ぶ。


★ <strong>flex-wrap</strong>
折り返しの設定が出来る。
<strong>☆ nowrap</strong>
初期値。折り返し無し。
<strong>☆ wrap</strong>
はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
はみ出た要素を逆の順番で折り返し。


<strong>★ flex-flow</strong>
上の二つをまとめて指定できる。
flex-flow: [flex-directionの値] [flex-wrapの値];
の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 15:51:30","post_modified_gmt": "2015-12-11 06:51:30","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 209,"post_author": 1,"post_date": "2015-12-11 16:32:14","post_date_gmt": "2015-12-11 07:32:14","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;並びの方向を設定ができる。
☆ row
&nbsp;&nbsp;初期値。左から右に並ぶ。
☆ row-reverse
&nbsp;&nbsp;右から左に並ぶ。
☆ column
&nbsp;&nbsp;上から下に並ぶ。
☆ column-reverse
&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
★ <strong>flex-wrap</strong>
&nbsp;&nbsp;折り返しの設定が出来る。
☆ nowrap
&nbsp;&nbsp;初期値。折り返し無し。
☆ wrap
&nbsp;&nbsp;はみ出た要素を折り返し。
☆ wrap-reverse
&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
★ flex-flow
&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 16:32:14","post_modified_gmt": "2015-12-11 07:32:14","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 210,"post_author": 1,"post_date": "2015-12-11 16:33:49","post_date_gmt": "2015-12-11 07:33:49","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;&nbsp;並びの方向を設定ができる。
<strong>☆ row</strong>
&nbsp;&nbsp;&nbsp;初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
&nbsp;&nbsp;&nbsp;右から左に並ぶ。
<strong>☆ column</strong>
&nbsp;&nbsp;&nbsp;上から下に並ぶ。
<strong>☆ column-reverse</strong>
&nbsp;&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
★ <strong>flex-wrap</strong>
&nbsp;&nbsp;&nbsp;折り返しの設定が出来る。
<strong>☆ nowrap</strong>
&nbsp;&nbsp;&nbsp;初期値。折り返し無し。
<strong>☆ wrap</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
<strong>★ flex-flow</strong>
&nbsp;&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 16:33:49","post_modified_gmt": "2015-12-11 07:33:49","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 211,"post_author": 1,"post_date": "2015-12-11 18:44:30","post_date_gmt": "2015-12-11 09:44:30","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
並びの方向を設定ができる。
<strong>☆ row</strong>
初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
右から左に並ぶ。
<strong>☆ column</strong>
上から下に並ぶ。
<strong>☆ column-reverse</strong>
下から上に並ぶ。


★ <strong>flex-wrap</strong>
折り返しの設定が出来る。
<strong>☆ nowrap</strong>
初期値。折り返し無し。
<strong>☆ wrap</strong>
はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
はみ出た要素を逆の順番で折り返し。


<strong>★ flex-flow</strong>
上の二つをまとめて指定できる。
flex-flow: [flex-directionの値] [flex-wrapの値];
の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 18:44:30","post_modified_gmt": "2015-12-11 09:44:30","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 212,"post_author": 1,"post_date": "2015-12-11 18:45:33","post_date_gmt": "2015-12-11 09:45:33","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;&nbsp;並びの方向を設定ができる。
<strong>☆ row</strong>
&nbsp;&nbsp;&nbsp;初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
&nbsp;&nbsp;&nbsp;右から左に並ぶ。
<strong>☆ column</strong>
&nbsp;&nbsp;&nbsp;上から下に並ぶ。
<strong>☆ column-reverse</strong>
&nbsp;&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
★ <strong>flex-wrap</strong>
&nbsp;&nbsp;&nbsp;折り返しの設定が出来る。
<strong>☆ nowrap</strong>
&nbsp;&nbsp;&nbsp;初期値。折り返し無し。
<strong>☆ wrap</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
<strong>★ flex-flow</strong>
&nbsp;&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 18:45:33","post_modified_gmt": "2015-12-11 09:45:33","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 213,"post_author": 1,"post_date": "2015-12-11 18:48:48","post_date_gmt": "2015-12-11 09:48:48","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
    /* 自分の環境で */
　  display: -webkit-flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;&nbsp;並びの方向を設定ができる。
<strong>☆ row</strong>
&nbsp;&nbsp;&nbsp;初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
&nbsp;&nbsp;&nbsp;右から左に並ぶ。
<strong>☆ column</strong>
&nbsp;&nbsp;&nbsp;上から下に並ぶ。
<strong>☆ column-reverse</strong>
&nbsp;&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
★ <strong>flex-wrap</strong>
&nbsp;&nbsp;&nbsp;折り返しの設定が出来る。
<strong>☆ nowrap</strong>
&nbsp;&nbsp;&nbsp;初期値。折り返し無し。
<strong>☆ wrap</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
<strong>★ flex-flow</strong>
&nbsp;&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-autosave-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 18:48:48","post_modified_gmt": "2015-12-11 09:48:48","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 214,"post_author": 1,"post_date": "2015-12-11 18:49:27","post_date_gmt": "2015-12-11 09:49:27","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;&nbsp;並びの方向を設定ができる。
<strong>☆ row</strong>
&nbsp;&nbsp;&nbsp;初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
&nbsp;&nbsp;&nbsp;右から左に並ぶ。
<strong>☆ column</strong>
&nbsp;&nbsp;&nbsp;上から下に並ぶ。
<strong>☆ column-reverse</strong>
&nbsp;&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
★ <strong>flex-wrap</strong>
&nbsp;&nbsp;&nbsp;折り返しの設定が出来る。
<strong>☆ nowrap</strong>
&nbsp;&nbsp;&nbsp;初期値。折り返し無し。
<strong>☆ wrap</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
<strong>★ flex-flow</strong>
&nbsp;&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 18:49:27","post_modified_gmt": "2015-12-11 09:49:27","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 215,"post_author": 1,"post_date": "2015-12-11 22:13:16","post_date_gmt": "2015-12-11 13:13:16","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;&nbsp;並びの方向を設定できる。
<strong>☆ row</strong>
&nbsp;&nbsp;&nbsp;初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
&nbsp;&nbsp;&nbsp;右から左に並ぶ。
<strong>☆ column</strong>
&nbsp;&nbsp;&nbsp;上から下に並ぶ。
<strong>☆ column-reverse</strong>
&nbsp;&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
★ <strong>flex-wrap</strong>
&nbsp;&nbsp;&nbsp;折り返しの設定が出来る。
<strong>☆ nowrap</strong>
&nbsp;&nbsp;&nbsp;初期値。折り返し無し。
<strong>☆ wrap</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
<strong>★ flex-flow</strong>
&nbsp;&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-11 22:13:16","post_modified_gmt": "2015-12-11 13:13:16","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/11/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 218,"post_author": 1,"post_date": "2015-12-14 13:32:36","post_date_gmt": "2015-12-14 04:32:36","post_content": "<a href=\"http://kumao-no-mori.com//2015/12/11/css-displayflexについて/\">css-displayflexについて１</a>に引き続き、こちらも知っておくとすーぱー便利です。
floatやめてflexboxに乗り換えちゃおう！

まずは親要素に
<pre class=\"lang:css decode:true \">.parent {
    display: flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
で準備。

(★：プロパティ   ☆：値)

<strong>★ justify-content</strong>
&nbsp;&nbsp;&nbsp;水平方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に詰めて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に詰めて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;水平中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける。（半分分の間隔が両端に付く）

<strong>★ align-items</strong>
&nbsp;&nbsp;&nbsp;垂直方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;上に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;下に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;上下中央に揃える。
<strong>☆ baseline</strong>
&nbsp;&nbsp;&nbsp;ベースラインを揃える。
<strong>☆ stretch</strong>
&nbsp;&nbsp;&nbsp;\"flexコンテナー\"いっぱいに\"Flexboxアイテム\"の上下が引き伸ばされる。(\"flexコンテナー\"の高さが指定されてない場合、\"Flexboxアイテム\"に一番多い高さに合わせて自動的に引き伸ばされる。)

<strong>★ align-content</strong>
&nbsp;&nbsp;&nbsp;\"flex-wrap:nowrap;\"以外に設定した場合のみ、複数行になったときの揃え方を指定できる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける。（半分分の間隔が両端に付く）","post_title": "CSS display:flexについて２","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "css-displayflex%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6%ef%bc%92","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=218","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 219,"post_author": 1,"post_date": "2015-12-14 12:58:18","post_date_gmt": "2015-12-14 03:58:18","post_content": "","post_title": "CSS display:flexについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "218-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-14 12:58:18","post_modified_gmt": "2015-12-14 03:58:18","post_content_filtered": "","post_parent": 218,"guid": "http://kumao-no-mori.com/2015/12/14/218-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 220,"post_author": 1,"post_date": "2015-12-14 13:23:30","post_date_gmt": "2015-12-14 04:23:30","post_content": "<a href=\"http://kumao-no-mori.com//2015/12/11/css-displayflexについて/\">css-displayflexについて１</a>に引き続き、こちらも知っておくとすーぱー便利です。
floatやめてflexboxに乗り換えちゃおう！

まずは親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
で準備。

(★：プロパティ   ☆：値)
<strong>★ justify-content</strong>
&nbsp;&nbsp;&nbsp;水平方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に詰めて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に詰めて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;水平中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける（半分分の間隔が両端に付く）。

<strong>★ align-items</strong>
&nbsp;&nbsp;&nbsp;垂直方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;上に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;下に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;上下中央に揃える。
<strong>☆ baseline</strong>
&nbsp;&nbsp;&nbsp;ベースラインを揃える。
<strong>☆ stretch</strong>
&nbsp;&nbsp;&nbsp;\"flexコンテナー\"いっぱいに\"Flexboxアイテム\"の上下が引き伸ばされる。
&nbsp;&nbsp;&nbsp;(\"flexコンテナー\"の高さが指定されてない場合、\"Flexboxアイテム\"に一番多い高さに合わせて自動的に引き伸ばされる。)","post_title": "CSS display:flexについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "218-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-14 13:23:30","post_modified_gmt": "2015-12-14 04:23:30","post_content_filtered": "","post_parent": 218,"guid": "http://kumao-no-mori.com/2015/12/14/218-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 221,"post_author": 1,"post_date": "2015-12-14 13:31:53","post_date_gmt": "2015-12-14 04:31:53","post_content": "<a href=\"http://kumao-no-mori.com//2015/12/11/css-displayflexについて/\">css-displayflexについて１</a>に引き続き、こちらも知っておくとすーぱー便利です。
floatやめてflexboxに乗り換えちゃおう！

まずは親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
で準備。

(★：プロパティ   ☆：値)

<strong>★ justify-content</strong>
&nbsp;&nbsp;&nbsp;水平方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に詰めて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に詰めて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;水平中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける。
&nbsp;&nbsp;&nbsp;（半分分の間隔が両端に付く）

<strong>★ align-items</strong>
&nbsp;&nbsp;&nbsp;垂直方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;上に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;下に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;上下中央に揃える。
<strong>☆ baseline</strong>
&nbsp;&nbsp;&nbsp;ベースラインを揃える。
<strong>☆ stretch</strong>
&nbsp;&nbsp;&nbsp;\"flexコンテナー\"いっぱいに\"Flexboxアイテム\"の上下が引き伸ばされる。
&nbsp;&nbsp;&nbsp;(\"flexコンテナー\"の高さが指定されてない場合、\"Flexboxアイテム\"に一番多い高さに合わせて自動的に引き伸ばされる。)

<strong>★ align-content</strong>
&nbsp;&nbsp;&nbsp;\"flex-wrap:nowrap;\"以外に設定した場合のみ、複数行になったときの揃え方を指定できる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける。
&nbsp;&nbsp;&nbsp;（半分分の間隔が両端に付く）","post_title": "CSS display:flexについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "218-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-14 13:31:53","post_modified_gmt": "2015-12-14 04:31:53","post_content_filtered": "","post_parent": 218,"guid": "http://kumao-no-mori.com/2015/12/14/218-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 222,"post_author": 1,"post_date": "2015-12-14 13:32:36","post_date_gmt": "2015-12-14 04:32:36","post_content": "<a href=\"http://kumao-no-mori.com//2015/12/11/css-displayflexについて/\">css-displayflexについて１</a>に引き続き、こちらも知っておくとすーぱー便利です。
floatやめてflexboxに乗り換えちゃおう！

まずは親要素に
<pre class=\"lang:css decode:true \">.parent {
    display:flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
で準備。

(★：プロパティ   ☆：値)

<strong>★ justify-content</strong>
&nbsp;&nbsp;&nbsp;水平方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に詰めて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に詰めて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;水平中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける。（半分分の間隔が両端に付く）

<strong>★ align-items</strong>
&nbsp;&nbsp;&nbsp;垂直方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;上に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;下に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;上下中央に揃える。
<strong>☆ baseline</strong>
&nbsp;&nbsp;&nbsp;ベースラインを揃える。
<strong>☆ stretch</strong>
&nbsp;&nbsp;&nbsp;\"flexコンテナー\"いっぱいに\"Flexboxアイテム\"の上下が引き伸ばされる。(\"flexコンテナー\"の高さが指定されてない場合、\"Flexboxアイテム\"に一番多い高さに合わせて自動的に引き伸ばされる。)

<strong>★ align-content</strong>
&nbsp;&nbsp;&nbsp;\"flex-wrap:nowrap;\"以外に設定した場合のみ、複数行になったときの揃え方を指定できる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける。（半分分の間隔が両端に付く）","post_title": "CSS display:flexについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "218-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-14 13:32:36","post_modified_gmt": "2015-12-14 04:32:36","post_content_filtered": "","post_parent": 218,"guid": "http://kumao-no-mori.com/2015/12/14/218-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 224,"post_author": 1,"post_date": "2015-12-15 13:23:19","post_date_gmt": "2015-12-15 04:23:19","post_content": "ブラウザのダイアログはいつも\"<strong>alert</strong>\"で出していましたが、今更ながら\"<strong>confirm</strong>\"を知りました...
どちらで書いてもダイアログは出せますが、大きな違いがあるので今から見ていきましょー。

まず\"<strong>alert</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert.png\" rel=\"attachment wp-att-226\"><img class=\"aligncenter size-medium_large wp-image-226\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert-768x388.png\" alt=\"alert\" width=\"660\" height=\"333\" /></a>
こうなります。

次に\"<strong>confirm</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm.png\" rel=\"attachment wp-att-227\"><img class=\"aligncenter size-medium_large wp-image-227\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm-768x377.png\" alt=\"confirm\" width=\"660\" height=\"324\" /></a>
こうなります。

今回chromeで見ていますが、\"confilm\"だと「キャンセル」の選択肢がでてきましたね。
\"alert\"では「OK」一択なので不親切ですね。

次にもう一つの違いを見ます。
このソースを見てみてください ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" rel=\"attachment wp-att-228\"><img class=\"aligncenter size-full wp-image-228\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" alt=\"console\" width=\"514\" height=\"274\" /></a>
一番上で実行したものが\"<strong>alert</strong>\"で、「OK」を押した場合\"undefined\"で返り値がありません。
真ん中で実行したものが\"<strong>confirm</strong>\"で、「キャンセル」を押した場合\"false\"の返り値があります。
一番下で実行したものが\"<strong>confirm</strong>\"で、「OK」を押した場合\"true\"の返り値があります。

ということは、
\"<strong>confirm</strong>\"だと、jsでいろんなことができそうですね...♪

例えば戻り値があるので結果を代入させたり、判定をさせたり。
こんなコードを書いてみました。
<pre class=\"lang:js decode:true \" >function kumao_link() { 
    kumao = confirm(\'この先くまおの森にリンクします。\');
    if(kumao == true) {
        location.href = \"http://kumao-no-mori.com/\";
    }
}</pre> 
とこんな風にする事もできますね。

ちなみに、ダイアログ内のテキストについて、
\"<strong>\\n</strong>\" で改行。
\"<strong>\\t</strong>\" で字下げ。
です。
（後に気づいたのですが、ひとつ上の画像間違って\"\\f\"って書いてありましたね...； なぜか改行してくれてますが、調べたところ \"\\f\" は \"改ページ\" の意味だそうです。）

macだとこのバックスラッシュを出すには[option(alt)] + [￥]ですね。(それが面倒な場合に、Mac OS XについているIME「ことえり」の設定を変える。やGoogleの場合Google日本語入力の設定を変える。ことで対応できるそうです。やった事無いし必要無いと自分は思ってるので詳しくは書きませんが...)

ではダイアログについてはこの辺で。","post_title": "JavaScript ダイアログについて","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "javascript-%e3%83%80%e3%82%a4%e3%82%a2%e3%83%ad%e3%82%b0%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:13","post_modified_gmt": "2016-09-29 10:03:13","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=224","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 226,"post_author": 1,"post_date": "2015-12-15 12:52:01","post_date_gmt": "2015-12-15 03:52:01","post_content": "","post_title": "alert","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "alert","to_ping": "","pinged": "","post_modified": "2015-12-15 12:52:01","post_modified_gmt": "2015-12-15 03:52:01","post_content_filtered": "","post_parent": 224,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/12/alert.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 227,"post_author": 1,"post_date": "2015-12-15 12:53:31","post_date_gmt": "2015-12-15 03:53:31","post_content": "","post_title": "confirm","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "confirm","to_ping": "","pinged": "","post_modified": "2015-12-15 12:53:31","post_modified_gmt": "2015-12-15 03:53:31","post_content_filtered": "","post_parent": 224,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 228,"post_author": 1,"post_date": "2015-12-15 12:57:53","post_date_gmt": "2015-12-15 03:57:53","post_content": "","post_title": "console","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "console","to_ping": "","pinged": "","post_modified": "2015-12-15 12:57:53","post_modified_gmt": "2015-12-15 03:57:53","post_content_filtered": "","post_parent": 224,"guid": "http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 229,"post_author": 1,"post_date": "2015-12-15 13:23:00","post_date_gmt": "2015-12-15 04:23:00","post_content": "ブラウザのダイアログはいつも\"<strong>alert</strong>\"で出していましたが、今更ながら\"<strong>confirm</strong>\"を知りました...
どちらで書いてもダイアログは出せますが、大きな違いがあるので今から見ていきましょー。

まず\"<strong>alert</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert.png\" rel=\"attachment wp-att-226\"><img class=\"aligncenter size-medium_large wp-image-226\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert-768x388.png\" alt=\"alert\" width=\"660\" height=\"333\" /></a>
こうなります。

次に\"<strong>confirm</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm.png\" rel=\"attachment wp-att-227\"><img class=\"aligncenter size-medium_large wp-image-227\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm-768x377.png\" alt=\"confirm\" width=\"660\" height=\"324\" /></a>
こうなります。

今回chromeで見ていますが、\"confilm\"だと「キャンセル」の選択肢がでてきましたね。
\"alert\"では「OK」一択なので不親切ですね。

次にもう一つの違いを見ます。
このソースを見てみてください ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" rel=\"attachment wp-att-228\"><img class=\"aligncenter size-full wp-image-228\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" alt=\"console\" width=\"514\" height=\"274\" /></a>
一番上で実行したものが\"<strong>alert</strong>\"で、「OK」を押した場合\"undefined\"で返り値がありません。
真ん中で実行したものが\"<strong>confirm</strong>\"で、「キャンセル」を押した場合\"false\"の返り値があります。
一番下で実行したものが\"<strong>confirm</strong>\"で、「OK」を押した場合\"true\"の返り値があります。

ということは、
\"<strong>confirm</strong>\"だと、jsでいろんなことができそうですね...♪

例えば戻り値があるので結果を代入させたり、判定をさせたり。
こんなコードを書いてみました。
<pre class=\"lang:js decode:true \" >function kumao_link() { 
    kumao = confirm(\'この先くまおの森にリンクします。\');
    if(kumao == true) {
        location.href = \"http://kumao-no-mori.com/\";
    }
}</pre> 
とこんな風にする事もできますね。

ちなみに、ダイアログ内のテキストについて、
\"<strong>\\n</strong>\" で改行。
\"<strong>\\t</strong>\" で字下げ。
です。
macだとこのバックスラッシュを出すには[option(alt)] + [¥]ですね。(それが面倒な場合に、Mac OS XについているIME「ことえり」の設定を変える。やGoogleの場合Google日本語入力の設定を変える。ことで対応できるそうです。やった事無いし必要無いと自分は思ってるので詳しくは書きませんが...)

ではダイアログについてはこの辺で。","post_title": "JavaScript ダイアログについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "224-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-15 13:23:00","post_modified_gmt": "2015-12-15 04:23:00","post_content_filtered": "","post_parent": 224,"guid": "http://kumao-no-mori.com/2015/12/15/224-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 230,"post_author": 1,"post_date": "2015-12-15 13:25:32","post_date_gmt": "2015-12-15 04:25:32","post_content": "ブラウザのダイアログはいつも\"<strong>alert</strong>\"で出していましたが、今更ながら\"<strong>confirm</strong>\"を知りました...
どちらで書いてもダイアログは出せますが、大きな違いがあるので今から見ていきましょー。

まず\"<strong>alert</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert.png\" rel=\"attachment wp-att-226\"><img class=\"aligncenter size-medium_large wp-image-226\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert-768x388.png\" alt=\"alert\" width=\"660\" height=\"333\" /></a>
こうなります。

次に\"<strong>confirm</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm.png\" rel=\"attachment wp-att-227\"><img class=\"aligncenter size-medium_large wp-image-227\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm-768x377.png\" alt=\"confirm\" width=\"660\" height=\"324\" /></a>
こうなります。

今回chromeで見ていますが、\"confilm\"だと「キャンセル」の選択肢がでてきましたね。
\"alert\"では「OK」一択なので不親切ですね。

次にもう一つの違いを見ます。
このソースを見てみてください ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" rel=\"attachment wp-att-228\"><img class=\"aligncenter size-full wp-image-228\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" alt=\"console\" width=\"514\" height=\"274\" /></a>
一番上で実行したものが\"<strong>alert</strong>\"で、「OK」を押した場合\"undefined\"で返り値がありません。
真ん中で実行したものが\"<strong>confirm</strong>\"で、「キャンセル」を押した場合\"false\"の返り値があります。
一番下で実行したものが\"<strong>confirm</strong>\"で、「OK」を押した場合\"true\"の返り値があります。

ということは、
\"<strong>confirm</strong>\"だと、jsでいろんなことができそうですね...♪

例えば戻り値があるので結果を代入させたり、判定をさせたり。
こんなコードを書いてみました。
<pre class=\"lang:js decode:true \" >function kumao_link() { 
    kumao = confirm(\'この先くまおの森にリンクします。\');
    if(kumao == true) {
        location.href = \"http://kumao-no-mori.com/\";
    }
}</pre> 
とこんな風にする事もできますね。

ちなみに、ダイアログ内のテキストについて、
\"<strong>\\n</strong>\" で改行。
\"<strong>\\t</strong>\" で字下げ。
です。
macだとこのバックスラッシュを出すには[option(alt)] + [￥]ですね。(それが面倒な場合に、Mac OS XについているIME「ことえり」の設定を変える。やGoogleの場合Google日本語入力の設定を変える。ことで対応できるそうです。やった事無いし必要無いと自分は思ってるので詳しくは書きませんが...)

ではダイアログについてはこの辺で。","post_title": "JavaScript ダイアログについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "224-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-15 13:25:32","post_modified_gmt": "2015-12-15 04:25:32","post_content_filtered": "","post_parent": 224,"guid": "http://kumao-no-mori.com/2015/12/15/224-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 231,"post_author": 1,"post_date": "2015-12-15 13:34:51","post_date_gmt": "2015-12-15 04:34:51","post_content": "ブラウザのダイアログはいつも\"<strong>alert</strong>\"で出していましたが、今更ながら\"<strong>confirm</strong>\"を知りました...
どちらで書いてもダイアログは出せますが、大きな違いがあるので今から見ていきましょー。

まず\"<strong>alert</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert.png\" rel=\"attachment wp-att-226\"><img class=\"aligncenter size-medium_large wp-image-226\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert-768x388.png\" alt=\"alert\" width=\"660\" height=\"333\" /></a>
こうなります。

次に\"<strong>confirm</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm.png\" rel=\"attachment wp-att-227\"><img class=\"aligncenter size-medium_large wp-image-227\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm-768x377.png\" alt=\"confirm\" width=\"660\" height=\"324\" /></a>
こうなります。

今回chromeで見ていますが、\"confilm\"だと「キャンセル」の選択肢がでてきましたね。
\"alert\"では「OK」一択なので不親切ですね。

次にもう一つの違いを見ます。
このソースを見てみてください ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" rel=\"attachment wp-att-228\"><img class=\"aligncenter size-full wp-image-228\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" alt=\"console\" width=\"514\" height=\"274\" /></a>
一番上で実行したものが\"<strong>alert</strong>\"で、「OK」を押した場合\"undefined\"で返り値がありません。
真ん中で実行したものが\"<strong>confirm</strong>\"で、「キャンセル」を押した場合\"false\"の返り値があります。
一番下で実行したものが\"<strong>confirm</strong>\"で、「OK」を押した場合\"true\"の返り値があります。

ということは、
\"<strong>confirm</strong>\"だと、jsでいろんなことができそうですね...♪

例えば戻り値があるので結果を代入させたり、判定をさせたり。
こんなコードを書いてみました。
<pre class=\"lang:js decode:true \" >function kumao_link() { 
    kumao = confirm(\'この先くまおの森にリンクします。\');
    if(kumao == true) {
        location.href = \"http://kumao-no-mori.com/\";
    }
}</pre> 
とこんな風にする事もできますね。

ちなみに、ダイアログ内のテキストについて、
\"<strong>\\n</strong>\" で改行。
\"<strong>\\t</strong>\" で字下げ。
です。
（後に気づいたのですが、上の画像間違って/fって書いてありましたね...；なぜか改行してくれてますが、\"\\f\"は\"改ページ\"の意味だそうです。）

macだとこのバックスラッシュを出すには[option(alt)] + [￥]ですね。(それが面倒な場合に、Mac OS XについているIME「ことえり」の設定を変える。やGoogleの場合Google日本語入力の設定を変える。ことで対応できるそうです。やった事無いし必要無いと自分は思ってるので詳しくは書きませんが...)

ではダイアログについてはこの辺で。","post_title": "JavaScript ダイアログについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "224-autosave-v1","to_ping": "","pinged": "","post_modified": "2015-12-15 13:34:51","post_modified_gmt": "2015-12-15 04:34:51","post_content_filtered": "","post_parent": 224,"guid": "http://kumao-no-mori.com/2015/12/15/224-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 232,"post_author": 1,"post_date": "2015-12-15 13:35:17","post_date_gmt": "2015-12-15 04:35:17","post_content": "ブラウザのダイアログはいつも\"<strong>alert</strong>\"で出していましたが、今更ながら\"<strong>confirm</strong>\"を知りました...
どちらで書いてもダイアログは出せますが、大きな違いがあるので今から見ていきましょー。

まず\"<strong>alert</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert.png\" rel=\"attachment wp-att-226\"><img class=\"aligncenter size-medium_large wp-image-226\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert-768x388.png\" alt=\"alert\" width=\"660\" height=\"333\" /></a>
こうなります。

次に\"<strong>confirm</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm.png\" rel=\"attachment wp-att-227\"><img class=\"aligncenter size-medium_large wp-image-227\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm-768x377.png\" alt=\"confirm\" width=\"660\" height=\"324\" /></a>
こうなります。

今回chromeで見ていますが、\"confilm\"だと「キャンセル」の選択肢がでてきましたね。
\"alert\"では「OK」一択なので不親切ですね。

次にもう一つの違いを見ます。
このソースを見てみてください ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" rel=\"attachment wp-att-228\"><img class=\"aligncenter size-full wp-image-228\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" alt=\"console\" width=\"514\" height=\"274\" /></a>
一番上で実行したものが\"<strong>alert</strong>\"で、「OK」を押した場合\"undefined\"で返り値がありません。
真ん中で実行したものが\"<strong>confirm</strong>\"で、「キャンセル」を押した場合\"false\"の返り値があります。
一番下で実行したものが\"<strong>confirm</strong>\"で、「OK」を押した場合\"true\"の返り値があります。

ということは、
\"<strong>confirm</strong>\"だと、jsでいろんなことができそうですね...♪

例えば戻り値があるので結果を代入させたり、判定をさせたり。
こんなコードを書いてみました。
<pre class=\"lang:js decode:true \" >function kumao_link() { 
    kumao = confirm(\'この先くまおの森にリンクします。\');
    if(kumao == true) {
        location.href = \"http://kumao-no-mori.com/\";
    }
}</pre> 
とこんな風にする事もできますね。

ちなみに、ダイアログ内のテキストについて、
\"<strong>\\n</strong>\" で改行。
\"<strong>\\t</strong>\" で字下げ。
です。
（後に気づいたのですが、上の画像間違って/fって書いてありましたね...； なぜか改行してくれてますが、調べたところ\"\\f\"は\"改ページ\"の意味だそうです。）

macだとこのバックスラッシュを出すには[option(alt)] + [￥]ですね。(それが面倒な場合に、Mac OS XについているIME「ことえり」の設定を変える。やGoogleの場合Google日本語入力の設定を変える。ことで対応できるそうです。やった事無いし必要無いと自分は思ってるので詳しくは書きませんが...)

ではダイアログについてはこの辺で。","post_title": "JavaScript ダイアログについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "224-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-15 13:35:17","post_modified_gmt": "2015-12-15 04:35:17","post_content_filtered": "","post_parent": 224,"guid": "http://kumao-no-mori.com/2015/12/15/224-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 233,"post_author": 1,"post_date": "2015-12-15 13:37:24","post_date_gmt": "2015-12-15 04:37:24","post_content": "ブラウザのダイアログはいつも\"<strong>alert</strong>\"で出していましたが、今更ながら\"<strong>confirm</strong>\"を知りました...
どちらで書いてもダイアログは出せますが、大きな違いがあるので今から見ていきましょー。

まず\"<strong>alert</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert.png\" rel=\"attachment wp-att-226\"><img class=\"aligncenter size-medium_large wp-image-226\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/alert-768x388.png\" alt=\"alert\" width=\"660\" height=\"333\" /></a>
こうなります。

次に\"<strong>confirm</strong>\"でダイアログを出した場合 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm.png\" rel=\"attachment wp-att-227\"><img class=\"aligncenter size-medium_large wp-image-227\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/confirm-768x377.png\" alt=\"confirm\" width=\"660\" height=\"324\" /></a>
こうなります。

今回chromeで見ていますが、\"confilm\"だと「キャンセル」の選択肢がでてきましたね。
\"alert\"では「OK」一択なので不親切ですね。

次にもう一つの違いを見ます。
このソースを見てみてください ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" rel=\"attachment wp-att-228\"><img class=\"aligncenter size-full wp-image-228\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/12/console.png\" alt=\"console\" width=\"514\" height=\"274\" /></a>
一番上で実行したものが\"<strong>alert</strong>\"で、「OK」を押した場合\"undefined\"で返り値がありません。
真ん中で実行したものが\"<strong>confirm</strong>\"で、「キャンセル」を押した場合\"false\"の返り値があります。
一番下で実行したものが\"<strong>confirm</strong>\"で、「OK」を押した場合\"true\"の返り値があります。

ということは、
\"<strong>confirm</strong>\"だと、jsでいろんなことができそうですね...♪

例えば戻り値があるので結果を代入させたり、判定をさせたり。
こんなコードを書いてみました。
<pre class=\"lang:js decode:true \" >function kumao_link() { 
    kumao = confirm(\'この先くまおの森にリンクします。\');
    if(kumao == true) {
        location.href = \"http://kumao-no-mori.com/\";
    }
}</pre> 
とこんな風にする事もできますね。

ちなみに、ダイアログ内のテキストについて、
\"<strong>\\n</strong>\" で改行。
\"<strong>\\t</strong>\" で字下げ。
です。
（後に気づいたのですが、ひとつ上の画像間違って\"\\f\"って書いてありましたね...； なぜか改行してくれてますが、調べたところ \"\\f\" は \"改ページ\" の意味だそうです。）

macだとこのバックスラッシュを出すには[option(alt)] + [￥]ですね。(それが面倒な場合に、Mac OS XについているIME「ことえり」の設定を変える。やGoogleの場合Google日本語入力の設定を変える。ことで対応できるそうです。やった事無いし必要無いと自分は思ってるので詳しくは書きませんが...)

ではダイアログについてはこの辺で。","post_title": "JavaScript ダイアログについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "224-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-15 13:37:24","post_modified_gmt": "2015-12-15 04:37:24","post_content_filtered": "","post_parent": 224,"guid": "http://kumao-no-mori.com/2015/12/15/224-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 234,"post_author": 1,"post_date": "2015-12-17 13:50:41","post_date_gmt": "2015-12-17 04:50:41","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
★ <a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイトの\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。


2016.4.28 追記
reactでマテリアルデザインをするなら
★ <a href=\"http://www.material-ui.com/\" target=\"_blank\">material-ui</a>
こちらのサイトが素敵ですね。
今これ使ってみてます。

&nbsp;","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "%e7%b0%a1%e5%8d%98%e3%81%ab%e3%83%9e%e3%83%86%e3%83%aa%e3%82%a2%e3%83%ab%e3%83%87%e3%82%b6%e3%82%a4%e3%83%b3%e3%81%8c%e3%81%a7%e3%81%8d%e3%82%8b%e3%82%b5%e3%82%a4%e3%83%88%e7%b4%b9%e4%bb%8b","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:13","post_modified_gmt": "2016-09-29 10:03:13","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=234","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 235,"post_author": 1,"post_date": "2015-12-17 13:22:05","post_date_gmt": "2015-12-17 04:22:05","post_content": "簡単にマテリアルデザインを取り入れられるテンプレートを配布しているサイトを教えてもらったので、紹介します。
<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。

http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</blockquote>","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-17 13:22:05","post_modified_gmt": "2015-12-17 04:22:05","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2015/12/17/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 236,"post_author": 1,"post_date": "2015-12-17 13:44:14","post_date_gmt": "2015-12-17 04:44:14","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
<a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイト様の\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-17 13:44:14","post_modified_gmt": "2015-12-17 04:44:14","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2015/12/17/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 237,"post_author": 1,"post_date": "2015-12-17 13:44:53","post_date_gmt": "2015-12-17 04:44:53","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
<a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイト様の\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-17 13:44:53","post_modified_gmt": "2015-12-17 04:44:53","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2015/12/17/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 238,"post_author": 1,"post_date": "2015-12-17 13:50:41","post_date_gmt": "2015-12-17 04:50:41","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
<a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイト様の\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-17 13:50:41","post_modified_gmt": "2015-12-17 04:50:41","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2015/12/17/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 240,"post_author": 1,"post_date": "2015-12-21 15:55:53","post_date_gmt": "2015-12-21 06:55:53","post_content": "<a href=\"http://kumao-no-mori.com//2015/12/11/css-displayflexについて/\">css-displayflexについて１</a>に引き続き、こちらも知っておくとすーぱー便利です。
floatやめてflexboxに乗り換えちゃおう！

まずは親要素に
<pre class=\"lang:css decode:true \">.parent {
    display: flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
で準備。

(★：プロパティ   ☆：値)

<strong>★ justify-content</strong>
&nbsp;&nbsp;&nbsp;水平方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に詰めて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に詰めて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;水平中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける。（半分分の間隔が両端に付く）

<strong>★ align-items</strong>
&nbsp;&nbsp;&nbsp;垂直方向を揃えられる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;上に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;下に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;上下中央に揃える。
<strong>☆ baseline</strong>
&nbsp;&nbsp;&nbsp;ベースラインを揃える。
<strong>☆ stretch</strong>
&nbsp;&nbsp;&nbsp;\"flexコンテナー\"いっぱいに\"Flexboxアイテム\"の上下が引き伸ばされる。(\"flexコンテナー\"の高さが指定されてない場合、\"Flexboxアイテム\"に一番多い高さに合わせて自動的に引き伸ばされる。)

<strong>★ align-content</strong>
&nbsp;&nbsp;&nbsp;\"flex-wrap:nowrap;\"以外に設定した場合のみ、複数行になったときの揃え方を指定できる。
<strong>☆ flex-start</strong>
&nbsp;&nbsp;&nbsp;先頭に合わせて揃える。
<strong>☆ flex-end</strong>
&nbsp;&nbsp;&nbsp;末尾に合わせて揃える。
<strong>☆ center</strong>
&nbsp;&nbsp;&nbsp;中央に揃える。
<strong>☆ space-between</strong>
&nbsp;&nbsp;&nbsp;ボックスいっぱいに均等に間隔を空ける。
<strong>☆ space-around</strong>
&nbsp;&nbsp;&nbsp;ボックス全体に均等に間隔を空ける。（半分分の間隔が両端に付く）","post_title": "CSS display:flexについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "218-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-21 15:55:53","post_modified_gmt": "2015-12-21 06:55:53","post_content_filtered": "","post_parent": 218,"guid": "http://kumao-no-mori.com/2015/12/21/218-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 241,"post_author": 1,"post_date": "2015-12-21 15:56:15","post_date_gmt": "2015-12-21 06:56:15","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display: flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;&nbsp;並びの方向を設定できる。
<strong>☆ row</strong>
&nbsp;&nbsp;&nbsp;初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
&nbsp;&nbsp;&nbsp;右から左に並ぶ。
<strong>☆ column</strong>
&nbsp;&nbsp;&nbsp;上から下に並ぶ。
<strong>☆ column-reverse</strong>
&nbsp;&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
★ <strong>flex-wrap</strong>
&nbsp;&nbsp;&nbsp;折り返しの設定が出来る。
<strong>☆ nowrap</strong>
&nbsp;&nbsp;&nbsp;初期値。折り返し無し。
<strong>☆ wrap</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
<strong>★ flex-flow</strong>
&nbsp;&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-21 15:56:15","post_modified_gmt": "2015-12-21 06:56:15","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/2015/12/21/201-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 243,"post_author": 1,"post_date": "2015-12-22 13:05:17","post_date_gmt": "2015-12-22 04:05:17","post_content": "CSSのみで三点リーダーを作成する方法

https://gist.github.com/naokidoguchi/bcdba9bdc389c8fdb3c4","post_title": "CSSでの三点リーダーの作成方法","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "css%e3%81%a7%e3%81%ae%e4%b8%89%e7%82%b9%e3%83%aa%e3%83%bc%e3%83%80%e3%83%bc%e3%81%ae%e4%bd%9c%e6%88%90%e6%96%b9%e6%b3%95","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=243","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 244,"post_author": 1,"post_date": "2015-12-22 13:05:17","post_date_gmt": "2015-12-22 04:05:17","post_content": "CSSのみで三点リーダーを作成する方法

https://gist.github.com/naokidoguchi/bcdba9bdc389c8fdb3c4","post_title": "CSSでの三点リーダーの作成方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "243-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-22 13:05:17","post_modified_gmt": "2015-12-22 04:05:17","post_content_filtered": "","post_parent": 243,"guid": "http://kumao-no-mori.com/archives/244","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 246,"post_author": 1,"post_date": "2015-12-28 13:40:15","post_date_gmt": "2015-12-28 04:40:15","post_content": "2015年最後の投稿になります。
Sassあんまり使わないからずっと初心者のままで嫌になります。(←勉強しろ)
ということで今日はSassについて覚えた事をメモメモ。

Sassの関数１
★ <strong>abs()について</strong>
この関数は、引数の絶対値を返してくれる関数です。
（絶対数とはその数が0からどれくらい離れているかを表す値。例えばその値が-15だった場合、0から15離れているので、15の正数が絶対値。）
 
<pre class=\"lang:sass decode:true \" >$hoge: -15px;

// このように同じ数値でプラスかマイナスかの違いの場合に便利。
section{
    margin-left: $hoge;
      .item {
          float: left;
          width: 100px;
          margin-left: abs($hoge);
      }
}</pre> 


Sassの関数２
★ <strong>round()について</strong>
この関数は、小数点以下の数値を四捨五入してくれる。
 
<pre class=\"lang:sass decode:true \" >$hoge: 7px;

.piyo {
    width: round($hoge / 3);
}

// 結果は2px</pre> 

☆ 四捨五入の設定 【ceil() , floor()】
round()では四捨五入しましたが、小数点以下を全て切り上げたいときはround()の代わりに\"ceil()\"を使用する。
逆に小数点以下を全て切り捨てたい場合は\"floor()\"を代わりに使用する。

Sassの関数３
★ <strong>lighten()について</strong>
この関数は、指定した色を明るくしてくれる。 
<pre class=\"lang:sass decode:true \" >// 黒(#000)を30%明るくする
body {
    background: lighten(#000, 30%);
}
// 結果は#4d4d4d(濃いグレー)になる</pre> 

☆ 暗くする関数 【darken()】
逆に暗くしたい場合はlightenの代わりにdarken()を使えば暗く出来ます。

&nbsp;","post_title": "Sass 関数について","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "sass-%e9%96%a2%e6%95%b0%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:13","post_modified_gmt": "2016-09-29 10:03:13","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=246","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 247,"post_author": 1,"post_date": "2015-12-28 13:40:15","post_date_gmt": "2015-12-28 04:40:15","post_content": "2015年最後の投稿になります。
Sassあんまり使わないからずっと初心者のままで嫌になります。(←勉強しろ)
ということで今日はSassについて覚えた事をメモメモ。

Sassの関数１
★ abs()について
この関数は、引数の絶対値を返してくれる関数です。
（絶対数とはその数が0からどれくらい離れているかを表す値。例えばその値が-15だった場合、0から15離れているので、15の正数が絶対値。）
<pre class=\"lang:sass decode:true \" data-url=\" \">// $hogeに-15を代入
$hoge: -15px;

// このように同じ数値でプラスかマイナスかの違いの場合に便利。
section{
    margin-left: $hoge;
      .item {
          float: left;
          width: 100px;
          margin-left: abs($hoge);
      }
}</pre>

Sassの関数２
★ round()について
この関数は、小数点以下の数値を四捨五入してくれる。
 
<pre class=\"lang:sass decode:true \" >$hoge: 7px;

.piyo {
    width: round($hoge / 3);
}

// 結果は2px</pre> 

☆ 四捨五入の設定 【ceil() , floor()】
round()では四捨五入しましたが、小数点以下を全て切り上げたいときはround()の代わりに\"ceil()\"を使用する。
逆に小数点以下を全て切り捨てたい場合は\"floor()\"を代わりに使用する。

Sassの関数３
★ lighten()について
この関数は、指定した色を明るくしてくれる。 
<pre class=\"lang:sass decode:true \" >// 黒(#000)を30%明るくする
body {
    background: lighten(#000, 30%);
}
// 結果は#4d4d4d(濃いグレー)になる</pre> 

☆ 暗くする関数 【darken()】
逆に暗くしたい場合はlightenの代わりにdarken()を使えば暗く出来ます。","post_title": "Sass 関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "246-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-28 13:40:15","post_modified_gmt": "2015-12-28 04:40:15","post_content_filtered": "","post_parent": 246,"guid": "http://kumao-no-mori.com/archives/247","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 248,"post_author": 1,"post_date": "2015-12-28 13:41:48","post_date_gmt": "2015-12-28 04:41:48","post_content": "2015年最後の投稿になります。
Sassあんまり使わないからずっと初心者のままで嫌になります。(←勉強しろ)
ということで今日はSassについて覚えた事をメモメモ。

Sassの関数１
★ abs()について
この関数は、引数の絶対値を返してくれる関数です。
（絶対数とはその数が0からどれくらい離れているかを表す値。例えばその値が-15だった場合、0から15離れているので、15の正数が絶対値。）
 
<pre class=\"lang:sass decode:true \" >$hoge: -15px;

// このように同じ数値でプラスかマイナスかの違いの場合に便利。
section{
    margin-left: $hoge;
      .item {
          float: left;
          width: 100px;
          margin-left: abs($hoge);
      }
}</pre> 


Sassの関数２
★ round()について
この関数は、小数点以下の数値を四捨五入してくれる。
 
<pre class=\"lang:sass decode:true \" >$hoge: 7px;

.piyo {
    width: round($hoge / 3);
}

// 結果は2px</pre> 

☆ 四捨五入の設定 【ceil() , floor()】
round()では四捨五入しましたが、小数点以下を全て切り上げたいときはround()の代わりに\"ceil()\"を使用する。
逆に小数点以下を全て切り捨てたい場合は\"floor()\"を代わりに使用する。

Sassの関数３
★ lighten()について
この関数は、指定した色を明るくしてくれる。 
<pre class=\"lang:sass decode:true \" >// 黒(#000)を30%明るくする
body {
    background: lighten(#000, 30%);
}
// 結果は#4d4d4d(濃いグレー)になる</pre> 

☆ 暗くする関数 【darken()】
逆に暗くしたい場合はlightenの代わりにdarken()を使えば暗く出来ます。","post_title": "Sass 関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "246-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-28 13:41:48","post_modified_gmt": "2015-12-28 04:41:48","post_content_filtered": "","post_parent": 246,"guid": "http://kumao-no-mori.com/archives/248","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 249,"post_author": 1,"post_date": "2015-12-28 13:43:37","post_date_gmt": "2015-12-28 04:43:37","post_content": "2015年最後の投稿になります。
Sassあんまり使わないからずっと初心者のままで嫌になります。(←勉強しろ)
ということで今日はSassについて覚えた事をメモメモ。

Sassの関数１
★ <strong>abs()について</strong>
この関数は、引数の絶対値を返してくれる関数です。
（絶対数とはその数が0からどれくらい離れているかを表す値。例えばその値が-15だった場合、0から15離れているので、15の正数が絶対値。）
 
<pre class=\"lang:sass decode:true \" >$hoge: -15px;

// このように同じ数値でプラスかマイナスかの違いの場合に便利。
section{
    margin-left: $hoge;
      .item {
          float: left;
          width: 100px;
          margin-left: abs($hoge);
      }
}</pre> 


Sassの関数２
★ <strong>round()について</strong>
この関数は、小数点以下の数値を四捨五入してくれる。
 
<pre class=\"lang:sass decode:true \" >$hoge: 7px;

.piyo {
    width: round($hoge / 3);
}

// 結果は2px</pre> 

☆ 四捨五入の設定 【ceil() , floor()】
round()では四捨五入しましたが、小数点以下を全て切り上げたいときはround()の代わりに\"ceil()\"を使用する。
逆に小数点以下を全て切り捨てたい場合は\"floor()\"を代わりに使用する。

Sassの関数３
★ <strong>lighten()について</strong>
この関数は、指定した色を明るくしてくれる。 
<pre class=\"lang:sass decode:true \" >// 黒(#000)を30%明るくする
body {
    background: lighten(#000, 30%);
}
// 結果は#4d4d4d(濃いグレー)になる</pre> 

☆ 暗くする関数 【darken()】
逆に暗くしたい場合はlightenの代わりにdarken()を使えば暗く出来ます。","post_title": "Sass 関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "246-revision-v1","to_ping": "","pinged": "","post_modified": "2015-12-28 13:43:37","post_modified_gmt": "2015-12-28 04:43:37","post_content_filtered": "","post_parent": 246,"guid": "http://kumao-no-mori.com/archives/249","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 251,"post_author": 1,"post_date": "2016-01-04 14:40:04","post_date_gmt": "2016-01-04 05:40:04","post_content": "FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。

<strong>☆コントローラー(Controller)</strong>
webブラウザからのリクエストを最初に受け取るのが、PHPファイルでドキュメントルート直下の\"index.php\"。これを「<strong>フロントコントローラー</strong>」と呼ぶ。
受け取ったリクエストを元に、どういった処理を行うかを決定し、必要に応じてモデルを呼び出しながら処理を行い、最終的に必要なビューを呼び出してブラウザに返す為のデータを生成するといったロジックは全てこのコントローラーに記述する。

＊コントローラーは大きく分けて4つある ↓

・Controllerクラスを拡張して作成する通常の<strong>「コントローラー」</strong>
・Controller_Templateを拡張して作成する<strong>「テンプレートコントローラー」</strong>
・Web APIとしてRESTフルなリクエストに対してXMLやJSON形式のデータ送信の為のController_Restを拡張する<strong>「Restコントローラー」</strong>
・テンプレートコントローラーとRestコントローラーの両方の機能をもつ<strong>「Hybridコントローラー」</strong>

(RESTフルってんだよ!って思って調べてみたらWebAPIの実装方式でRESTというものとSOAPというものがあるみたいです。それでRESTの原則に従って実装されているシステムのことを、\"RESTful\"と呼ぶらしいです。これは後日WebAPIについて勉強しないと...)

<strong>☆ビュー(View)</strong>
HTMLを記述したPHPファイル。あのテンプレートファイル(.tpl)のことですね。私はフロントエンドエンジニアなのでその私がいつも触ってるやつです。

<strong>☆モデル(Model)</strong>
データを取得し、操作し、あるいはそれを消去したい場合、その処理は常にモデルによって行われるべきです。
コントローラにはSQLクエリを一切記述せず、モデル側にそれを記述し、コントローラではモデルが実行したクエリを呼び出す、というような処理が出来ます。
この方法によって、データベースを変更した時もコントローラを書き換える必要はなく、データベースに影響を及ぼすモデルのみを書き換えるだけですむのです。

Fuel において、<strong>モデルの本質は単なるクラス</strong>です。つまり<strong>ライブラリ以外のなにものでもありません</strong>。 ただし Model_ 接頭辞が付いているので、他のクラスと見分けを付けることが容易になります。モデルを有効に使うためには、他のクラスを必要とするでしょう。

↑とってもわかりやすいのでFuelPHPの公式サイトからそのまま抜粋してしまいました。
モデルはコントローラーで呼び出して使うんですね。

＊そしてモデルを実装するには
<strong>
・Modelクラスを継承する。</strong>
FuelPHPで提供されているModelクラスは実際にはプロパティやメソッドが全く定義されていないクラスなので、データベースへの問い合わせ等はDBクラスを呼び出すなどして、クエリを生成するコードをモデル内に直接記述する形になる。

<strong>・Model_Crudクラスを継承する。</strong>
あらかじめCRUD(データの作成、取得、更新、削除)用のメソッドが用意されたクラス。このクラスを継承してモデルを実装すれば、単純なクエリであれば定義済みのメソッドを呼び出すだけで実装が済んだりする。

<strong>・\\Orm\\Modelクラスを継承する。</strong>
FuelPHPに同梱されるORM(Object Relation Mapping)パッケージで提供されているクラス。
これはデータベースのテーブル間のリレーション(関係、関連という意味)をあらかじめクラス内に設定する事で、関連テーブルのデータを同時に取得・変更する事が出来る。

という方法があります。


そして、これらの☆の三つがMVCというものです。
model-view-controllerでMVC。

【ざっくり言うと】
処理の中核を担うのが「Model」
表示、出力を司るのが「View」
入力を受け取ってその内容に応じてModelとViewを制御するのが「controller」


&nbsp;

","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "fuelphp%e3%81%aemvc%e3%83%a2%e3%83%87%e3%83%ab","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=251","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 252,"post_author": 1,"post_date": "2016-01-04 12:41:51","post_date_gmt": "2016-01-04 03:41:51","post_content": "あけましておめでとうございます。
今年は誰でも利用できるサイトを一人で作り上げることをここに誓います。

FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "251-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-04 12:41:51","post_modified_gmt": "2016-01-04 03:41:51","post_content_filtered": "","post_parent": 251,"guid": "http://kumao-no-mori.com/archives/252","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 253,"post_author": 1,"post_date": "2016-01-04 12:53:30","post_date_gmt": "2016-01-04 03:53:30","post_content": "あけましておめでとうございます。
今年は誰でも利用できるサイトを一人で作り上げることをここに誓います。
あとくまおの森って記事が読みにくいので、どうにかしようと思います。

FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。

<strong>☆コントローラー(Controller)</strong>
webブラウザからのリクエストを最初に受け取るのが、PHPファイルでドキュメントルート直下の\"index.php\"。
","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "251-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-04 12:53:30","post_modified_gmt": "2016-01-04 03:53:30","post_content_filtered": "","post_parent": 251,"guid": "http://kumao-no-mori.com/archives/253","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 254,"post_author": 1,"post_date": "2016-01-04 14:40:04","post_date_gmt": "2016-01-04 05:40:04","post_content": "あけましておめでとうございます。
今年は誰でも利用できるサイトを一人で作り上げることをここに誓います。
あとくまおの森って記事が読みにくいので、どうにかしようと思います。

FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。

<strong>☆コントローラー(Controller)</strong>
webブラウザからのリクエストを最初に受け取るのが、PHPファイルでドキュメントルート直下の\"index.php\"。これを「<strong>フロントコントローラー</strong>」と呼ぶ。
受け取ったリクエストを元に、どういった処理を行うかを決定し、必要に応じてモデルを呼び出しながら処理を行い、最終的に必要なビューを呼び出してブラウザに返す為のデータを生成するといったロジックは全てこのコントローラーに記述する。

＊コントローラーは大きく分けて4つある ↓

・Controllerクラスを拡張して作成する通常の<strong>「コントローラー」</strong>
・Controller_Templateを拡張して作成する<strong>「テンプレートコントローラー」</strong>
・Web APIとしてRESTフルなリクエストに対してXMLやJSON形式のデータ送信の為のController_Restを拡張する<strong>「Restコントローラー」</strong>
・テンプレートコントローラーとRestコントローラーの両方の機能をもつ<strong>「Hybridコントローラー」</strong>

(RESTフルってんだよ!って思って調べてみたらWebAPIの実装方式でRESTというものとSOAPというものがあるみたいです。それでRESTの原則に従って実装されているシステムのことを、\"RESTful\"と呼ぶらしいです。これは後日WebAPIについて勉強しないと...)

<strong>☆ビュー(View)</strong>
HTMLを記述したPHPファイル。あのテンプレートファイル(.tpl)のことですね。私はフロントエンドエンジニアなのでその私がいつも触ってるやつです。

<strong>☆モデル(Model)</strong>
データを取得し、操作し、あるいはそれを消去したい場合、その処理は常にモデルによって行われるべきです。
コントローラにはSQLクエリを一切記述せず、モデル側にそれを記述し、コントローラではモデルが実行したクエリを呼び出す、というような処理が出来ます。
この方法によって、データベースを変更した時もコントローラを書き換える必要はなく、データベースに影響を及ぼすモデルのみを書き換えるだけですむのです。

Fuel において、<strong>モデルの本質は単なるクラス</strong>です。つまり<strong>ライブラリ以外のなにものでもありません</strong>。 ただし Model_ 接頭辞が付いているので、他のクラスと見分けを付けることが容易になります。モデルを有効に使うためには、他のクラスを必要とするでしょう。

↑とってもわかりやすいのでFuelPHPの公式サイトからそのまま抜粋してしまいました。
モデルはコントローラーで呼び出して使うんですね。

＊そしてモデルを実装するには
<strong>
・Modelクラスを継承する。</strong>
FuelPHPで提供されているModelクラスは実際にはプロパティやメソッドが全く定義されていないクラスなので、データベースへの問い合わせ等はDBクラスを呼び出すなどして、クエリを生成するコードをモデル内に直接記述する形になる。
<strong>・Model_Crudクラスを継承する。</strong>
あらかじめCRUD(データの作成、取得、更新、削除)用のメソッドが用意されたクラス。このクラスを継承してモデルを実装すれば、単純なクエリであれば定義済みのメソッドを呼び出すだけで実装が済んだりする。
<strong>・\\Orm\\Modelクラスを継承する。
</strong>
FuelPHPに同梱されるORM(Object Relation Mapping)パッケージで提供されているクラス。
これはデータベースのテーブル間のリレーション(関係、関連という意味)をあらかじめクラス内に設定する事で、関連テーブルのデータを同時に取得・変更する事が出来る。

という方法があります。


そして、これらの☆の三つがMVCというものです。
model-view-controllerでMVC。

【ざっくり言うと】
処理の中核を担うのが「Model」
表示、出力を司るのが「View」
入力を受け取ってその内容に応じてModelとViewを制御するのが「controller」","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "251-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-04 14:40:04","post_modified_gmt": "2016-01-04 05:40:04","post_content_filtered": "","post_parent": 251,"guid": "http://kumao-no-mori.com/archives/254","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 255,"post_author": 1,"post_date": "2016-01-04 14:41:12","post_date_gmt": "2016-01-04 05:41:12","post_content": "あけましておめでとうございます。
今年は誰でも利用できるサイトを一人で作り上げることをここに誓います。
あとこのブログって記事が読みにくいので、どうにかしようと思います。

FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。

<strong>☆コントローラー(Controller)</strong>
webブラウザからのリクエストを最初に受け取るのが、PHPファイルでドキュメントルート直下の\"index.php\"。これを「<strong>フロントコントローラー</strong>」と呼ぶ。
受け取ったリクエストを元に、どういった処理を行うかを決定し、必要に応じてモデルを呼び出しながら処理を行い、最終的に必要なビューを呼び出してブラウザに返す為のデータを生成するといったロジックは全てこのコントローラーに記述する。

＊コントローラーは大きく分けて4つある ↓

・Controllerクラスを拡張して作成する通常の<strong>「コントローラー」</strong>
・Controller_Templateを拡張して作成する<strong>「テンプレートコントローラー」</strong>
・Web APIとしてRESTフルなリクエストに対してXMLやJSON形式のデータ送信の為のController_Restを拡張する<strong>「Restコントローラー」</strong>
・テンプレートコントローラーとRestコントローラーの両方の機能をもつ<strong>「Hybridコントローラー」</strong>

(RESTフルってんだよ!って思って調べてみたらWebAPIの実装方式でRESTというものとSOAPというものがあるみたいです。それでRESTの原則に従って実装されているシステムのことを、\"RESTful\"と呼ぶらしいです。これは後日WebAPIについて勉強しないと...)

<strong>☆ビュー(View)</strong>
HTMLを記述したPHPファイル。あのテンプレートファイル(.tpl)のことですね。私はフロントエンドエンジニアなのでその私がいつも触ってるやつです。

<strong>☆モデル(Model)</strong>
データを取得し、操作し、あるいはそれを消去したい場合、その処理は常にモデルによって行われるべきです。
コントローラにはSQLクエリを一切記述せず、モデル側にそれを記述し、コントローラではモデルが実行したクエリを呼び出す、というような処理が出来ます。
この方法によって、データベースを変更した時もコントローラを書き換える必要はなく、データベースに影響を及ぼすモデルのみを書き換えるだけですむのです。

Fuel において、<strong>モデルの本質は単なるクラス</strong>です。つまり<strong>ライブラリ以外のなにものでもありません</strong>。 ただし Model_ 接頭辞が付いているので、他のクラスと見分けを付けることが容易になります。モデルを有効に使うためには、他のクラスを必要とするでしょう。

↑とってもわかりやすいのでFuelPHPの公式サイトからそのまま抜粋してしまいました。
モデルはコントローラーで呼び出して使うんですね。

＊そしてモデルを実装するには
<strong>
・Modelクラスを継承する。</strong>
FuelPHPで提供されているModelクラスは実際にはプロパティやメソッドが全く定義されていないクラスなので、データベースへの問い合わせ等はDBクラスを呼び出すなどして、クエリを生成するコードをモデル内に直接記述する形になる。
<strong>・Model_Crudクラスを継承する。</strong>
あらかじめCRUD(データの作成、取得、更新、削除)用のメソッドが用意されたクラス。このクラスを継承してモデルを実装すれば、単純なクエリであれば定義済みのメソッドを呼び出すだけで実装が済んだりする。
<strong>・\\Orm\\Modelクラスを継承する。
</strong>
FuelPHPに同梱されるORM(Object Relation Mapping)パッケージで提供されているクラス。
これはデータベースのテーブル間のリレーション(関係、関連という意味)をあらかじめクラス内に設定する事で、関連テーブルのデータを同時に取得・変更する事が出来る。

という方法があります。


そして、これらの☆の三つがMVCというものです。
model-view-controllerでMVC。

【ざっくり言うと】
処理の中核を担うのが「Model」
表示、出力を司るのが「View」
入力を受け取ってその内容に応じてModelとViewを制御するのが「controller」","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "251-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-04 14:41:12","post_modified_gmt": "2016-01-04 05:41:12","post_content_filtered": "","post_parent": 251,"guid": "http://kumao-no-mori.com/archives/255","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 256,"post_author": 1,"post_date": "2016-01-04 14:43:26","post_date_gmt": "2016-01-04 05:43:26","post_content": "あけましておめでとうございます。
今年は誰でも利用できるサイトを一人で作り上げることをここに誓います。
あとこのブログって記事が読みにくいので、どうにかしようと思います。

FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。

<strong>☆コントローラー(Controller)</strong>
webブラウザからのリクエストを最初に受け取るのが、PHPファイルでドキュメントルート直下の\"index.php\"。これを「<strong>フロントコントローラー</strong>」と呼ぶ。
受け取ったリクエストを元に、どういった処理を行うかを決定し、必要に応じてモデルを呼び出しながら処理を行い、最終的に必要なビューを呼び出してブラウザに返す為のデータを生成するといったロジックは全てこのコントローラーに記述する。

＊コントローラーは大きく分けて4つある ↓

・Controllerクラスを拡張して作成する通常の<strong>「コントローラー」</strong>
・Controller_Templateを拡張して作成する<strong>「テンプレートコントローラー」</strong>
・Web APIとしてRESTフルなリクエストに対してXMLやJSON形式のデータ送信の為のController_Restを拡張する<strong>「Restコントローラー」</strong>
・テンプレートコントローラーとRestコントローラーの両方の機能をもつ<strong>「Hybridコントローラー」</strong>

(RESTフルってんだよ!って思って調べてみたらWebAPIの実装方式でRESTというものとSOAPというものがあるみたいです。それでRESTの原則に従って実装されているシステムのことを、\"RESTful\"と呼ぶらしいです。これは後日WebAPIについて勉強しないと...)

<strong>☆ビュー(View)</strong>
HTMLを記述したPHPファイル。あのテンプレートファイル(.tpl)のことですね。私はフロントエンドエンジニアなのでその私がいつも触ってるやつです。

<strong>☆モデル(Model)</strong>
データを取得し、操作し、あるいはそれを消去したい場合、その処理は常にモデルによって行われるべきです。
コントローラにはSQLクエリを一切記述せず、モデル側にそれを記述し、コントローラではモデルが実行したクエリを呼び出す、というような処理が出来ます。
この方法によって、データベースを変更した時もコントローラを書き換える必要はなく、データベースに影響を及ぼすモデルのみを書き換えるだけですむのです。

Fuel において、<strong>モデルの本質は単なるクラス</strong>です。つまり<strong>ライブラリ以外のなにものでもありません</strong>。 ただし Model_ 接頭辞が付いているので、他のクラスと見分けを付けることが容易になります。モデルを有効に使うためには、他のクラスを必要とするでしょう。

↑とってもわかりやすいのでFuelPHPの公式サイトからそのまま抜粋してしまいました。
モデルはコントローラーで呼び出して使うんですね。

＊そしてモデルを実装するには
<strong>
・Modelクラスを継承する。</strong>
FuelPHPで提供されているModelクラスは実際にはプロパティやメソッドが全く定義されていないクラスなので、データベースへの問い合わせ等はDBクラスを呼び出すなどして、クエリを生成するコードをモデル内に直接記述する形になる。

<strong>・Model_Crudクラスを継承する。</strong>
あらかじめCRUD(データの作成、取得、更新、削除)用のメソッドが用意されたクラス。このクラスを継承してモデルを実装すれば、単純なクエリであれば定義済みのメソッドを呼び出すだけで実装が済んだりする。

<strong>・\\Orm\\Modelクラスを継承する。</strong>
FuelPHPに同梱されるORM(Object Relation Mapping)パッケージで提供されているクラス。
これはデータベースのテーブル間のリレーション(関係、関連という意味)をあらかじめクラス内に設定する事で、関連テーブルのデータを同時に取得・変更する事が出来る。

という方法があります。


そして、これらの☆の三つがMVCというものです。
model-view-controllerでMVC。

【ざっくり言うと】
処理の中核を担うのが「Model」
表示、出力を司るのが「View」
入力を受け取ってその内容に応じてModelとViewを制御するのが「controller」","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "251-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-04 14:43:26","post_modified_gmt": "2016-01-04 05:43:26","post_content_filtered": "","post_parent": 251,"guid": "http://kumao-no-mori.com/archives/256","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 257,"post_author": 1,"post_date": "2016-01-07 14:07:10","post_date_gmt": "2016-01-07 05:07:10","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong style=\"text-align: center;\">☆cookieの作成☆</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。

<strong>★expires</strong>
保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
デフォルトはfalse。

<strong>☆cookieの取得☆</strong>
<pre class=\"lang:js decode:true\">$.cookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除☆</strong>
<pre class=\"lang:js decode:true \">$.removeCookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。

&nbsp;


テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>

これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。

&nbsp;","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "jquery-cookie-js-%e3%81%a7%e3%81%aecookie%e3%81%ae%e6%93%8d%e4%bd%9c","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:13","post_modified_gmt": "2016-09-29 10:03:13","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=257","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 258,"post_author": 1,"post_date": "2016-01-06 13:54:39","post_date_gmt": "2016-01-06 04:54:39","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時はIE11の対応のみ考えれば良い事になります。
IEとの戦いに","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-06 13:54:39","post_modified_gmt": "2016-01-06 04:54:39","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/258","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 259,"post_author": 1,"post_date": "2016-01-06 14:07:16","post_date_gmt": "2016-01-06 05:07:16","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
少しflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

それでは、jsでのcookieの操作について覚えた事をメモしていきます。

cookieを操作することによってどんなことができるのかというと、ブラウザを通じて訪問者のコンピューターに一時的にデータを書き込んで保存したものを操作することによりページをリンクして開いたときの一回だけ表示させるとか、
","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-06 14:07:16","post_modified_gmt": "2016-01-06 05:07:16","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/259","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 260,"post_author": 1,"post_date": "2016-01-06 14:09:29","post_date_gmt": "2016-01-06 05:09:29","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
少しflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

それでは、jsでのcookieの操作について覚えた事をメモしていきます。

ブラウザを通じて訪問者のコンピューターに一時的にデータを書き込んで保存したものを操作することによりページをリンクして開いたときの一回だけ表示させるとか、一度操作した後リロードさせても操作が残るようにさせるとか、そんなことができます。
","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-06 14:09:29","post_modified_gmt": "2016-01-06 05:09:29","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/260","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 261,"post_author": 1,"post_date": "2016-01-06 14:09:53","post_date_gmt": "2016-01-06 05:09:53","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

それでは、jsでのcookieの操作について覚えた事をメモしていきます。

ブラウザを通じて訪問者のコンピューターに一時的にデータを書き込んで保存したものを操作することによりページをリンクして開いたときの一回だけ表示させるとか、一度操作した後リロードさせても操作が残るようにさせるとか、そんなことができます。
","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-06 14:09:53","post_modified_gmt": "2016-01-06 05:09:53","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/261","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 262,"post_author": 1,"post_date": "2016-01-07 13:30:17","post_date_gmt": "2016-01-07 04:30:17","post_content": "","post_title": "-shared-img-thumb-C785_coffeekukki-milk_TP_V","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "shared-img-thumb-c785_coffeekukki-milk_tp_v","to_ping": "","pinged": "","post_modified": "2016-01-07 13:30:17","post_modified_gmt": "2016-01-07 04:30:17","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V.jpg","menu_order": 0,"post_type": "attachment","post_mime_type": "image/jpeg","comment_count": 0}, {"ID": 263,"post_author": 1,"post_date": "2016-01-07 13:42:51","post_date_gmt": "2016-01-07 04:42:51","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong>☆cookieの保存</strong>
cookieを保存する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。
<pre>
<strong>★expires</strong>
　保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
  設定しない場合はブラウザを閉じた際に削除される。

</pre>","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 13:42:51","post_modified_gmt": "2016-01-07 04:42:51","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/263","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 264,"post_author": 1,"post_date": "2016-01-07 13:46:35","post_date_gmt": "2016-01-07 04:46:35","post_content": "","post_title": "スクリーンショット 2016-01-07 1.46.07 PM","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2016-01-07-1-46-07-pm","to_ping": "","pinged": "","post_modified": "2016-01-07 13:46:35","post_modified_gmt": "2016-01-07 04:46:35","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 265,"post_author": 1,"post_date": "2016-01-07 13:47:28","post_date_gmt": "2016-01-07 04:47:28","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong>☆cookieの保存</strong>
cookieを保存する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。
<pre><strong>★expires</strong>
　保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
  設定しない場合はブラウザを閉じた際に削除される。


</pre>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>
テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 13:47:28","post_modified_gmt": "2016-01-07 04:47:28","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/265","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 266,"post_author": 1,"post_date": "2016-01-07 14:07:10","post_date_gmt": "2016-01-07 05:07:10","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong>☆cookieの作成</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。
<pre><strong>★expires</strong>
　保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
  設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
  保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
  有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
  セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
  デフォルトはfalse。
</pre>

<strong>☆cookieの取得</strong>
<pre class=\"lang:js decode:true \" >$.cookie(\"cookieの名前\");</pre> 
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除</strong>
 
<pre class=\"lang:js decode:true \" >$.removeCookie(\"cookieの名前\");</pre> 
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。


<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>
テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 14:07:10","post_modified_gmt": "2016-01-07 05:07:10","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/266","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 267,"post_author": 1,"post_date": "2016-01-07 14:12:41","post_date_gmt": "2016-01-07 05:12:41","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong>☆cookieの作成</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。
<pre><strong>★expires</strong>
　保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
  設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
  保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
  有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
  セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
  デフォルトはfalse。
</pre>

<strong>☆cookieの取得</strong>
<pre class=\"lang:js decode:true \" >$.cookie(\"cookieの名前\");</pre> 
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除</strong>
 
<pre class=\"lang:js decode:true \" >$.removeCookie(\"cookieの名前\");</pre> 
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。

<br>
<br>
<br>
<br>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>
テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 14:12:41","post_modified_gmt": "2016-01-07 05:12:41","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/267","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 268,"post_author": 1,"post_date": "2016-01-07 14:14:43","post_date_gmt": "2016-01-07 05:14:43","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。



まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong>☆cookieの作成</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。
<pre><strong>★expires</strong>
　保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
  設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
  保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
  有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
  セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
  デフォルトはfalse。
</pre>

<strong>☆cookieの取得</strong>
<pre class=\"lang:js decode:true \" >$.cookie(\"cookieの名前\");</pre> 
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除</strong>
 
<pre class=\"lang:js decode:true \" >$.removeCookie(\"cookieの名前\");</pre> 
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。




テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>

これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 14:14:43","post_modified_gmt": "2016-01-07 05:14:43","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/268","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 269,"post_author": 1,"post_date": "2016-01-07 14:23:37","post_date_gmt": "2016-01-07 05:23:37","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong style=\"text-align: center;\">☆cookieの作成</strong>
cookieを作成する時は、このように記述します。
<pre>$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。
<strong>★expires</strong>
保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
デフォルトはfalse。

<strong>☆cookieの取得</strong>
<pre>$.cookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除</strong>
<pre>$.removeCookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。

&nbsp;

&nbsp;

テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>

これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 14:23:37","post_modified_gmt": "2016-01-07 05:23:37","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/269","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 270,"post_author": 1,"post_date": "2016-01-07 14:20:58","post_date_gmt": "2016-01-07 05:20:58","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong style=\"text-align:center;\">☆cookieの作成</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。
<strong>★expires</strong>
&nbsp;&nbsp;保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
&nbsp;&nbsp;設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
&nbsp;&nbsp;保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
&nbsp;&nbsp;有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
&nbsp;&nbsp;セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
&nbsp;&nbsp;デフォルトはfalse。


<strong>☆cookieの取得</strong>
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。


<strong>☆cookieの削除</strong>
<pre class=\"lang:js decode:true \">$.removeCookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。

&nbsp;

&nbsp;

テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>

これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 14:20:58","post_modified_gmt": "2016-01-07 05:20:58","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/270","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 271,"post_author": 1,"post_date": "2016-01-07 14:24:54","post_date_gmt": "2016-01-07 05:24:54","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong style=\"text-align: center;\">☆cookieの作成☆</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。
<strong>★expires</strong>
保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
デフォルトはfalse。

<strong>☆cookieの取得☆</strong>
<pre class=\"lang:js decode:true\">$.cookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除☆</strong>
<pre class=\"lang:js decode:true \">$.removeCookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。

&nbsp;

&nbsp;

テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>

これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 14:24:54","post_modified_gmt": "2016-01-07 05:24:54","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/271","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 272,"post_author": 1,"post_date": "2016-01-07 14:27:27","post_date_gmt": "2016-01-07 05:27:27","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong style=\"text-align: center;\">☆cookieの作成☆</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。

<strong>★expires</strong>
保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
デフォルトはfalse。

<strong>☆cookieの取得☆</strong>
<pre class=\"lang:js decode:true\">$.cookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除☆</strong>
<pre class=\"lang:js decode:true \">$.removeCookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。

&nbsp;


テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>

これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-07 14:27:27","post_modified_gmt": "2016-01-07 05:27:27","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/archives/272","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 273,"post_author": 1,"post_date": "2016-01-08 19:12:42","post_date_gmt": "2016-01-08 10:12:42","post_content": " <pre class=\"lang:sh decode:true \" >git branch --contains</pre> 
このコマンドで現在のブランチを表示出来る。

&nbsp;
","post_title": "Git 現在のブランチ名を表示","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-%e7%8f%be%e5%9c%a8%e3%81%ae%e3%83%96%e3%83%a9%e3%83%b3%e3%83%81%e5%90%8d%e3%82%92%e8%a1%a8%e7%a4%ba","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:13","post_modified_gmt": "2016-09-29 10:03:13","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=273","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 274,"post_author": 1,"post_date": "2016-01-08 19:12:42","post_date_gmt": "2016-01-08 10:12:42","post_content": " <pre class=\"lang:sh decode:true \" >git branch --contains</pre> 
このコマンドで現在のブランチを表示出来る。","post_title": "Git 現在のブランチ名を表示","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "273-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-08 19:12:42","post_modified_gmt": "2016-01-08 10:12:42","post_content_filtered": "","post_parent": 273,"guid": "http://kumao-no-mori.com/archives/274","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 275,"post_author": 1,"post_date": "2016-01-08 19:32:47","post_date_gmt": "2016-01-08 10:32:47","post_content": "いつもgitはGUIを使ってcommitとかpushとかしてたのですが、pcのバージョン関係で突然使えなくなり、久々にコマンドラインでpushしたときにはまった事をメモメモ。

まず、私は間違えて
<pre class=\"lang:sh decode:true \" >git push [リモート先ブランチ]</pre> 
と記述してしまいました。

すると
<em>fatal: You didn\'t specify any refspecs to push, and push.default is \"nothing\".</em>
というエラーがでました。

それで エラー内のrefspecsてなんだと調べたら、[リモート先ブランチ]の部分のことで、そこが間違ってますよということみたいでした。

でもそこはあっているのでなんでかなとおもったら
<strong>origin</strong>
これ入れ忘れてました。

originとは、調べたところ起源、根源とかいう意味みたいですね。

そして正しくは
<pre class=\"lang:sh decode:true \" >git push origin [リモート先ブランチ]</pre>

これで無事pushできました。

ちなみに、refspecsは複数でも大丈夫です。

&nbsp;","post_title": "Git push時のエラー","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-push%e6%99%82%e3%81%ae%e3%82%a8%e3%83%a9%e3%83%bc","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=275","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 276,"post_author": 1,"post_date": "2016-01-08 19:32:47","post_date_gmt": "2016-01-08 10:32:47","post_content": "いつもgitはGUIを使ってcommitとかpushとかしてたのですが、pcのバージョン関係で突然使えなくなり、久々にコマンドラインでpushしたときにはまった事をメモメモ。

まず、私は間違えて
<pre class=\"lang:sh decode:true \" >git push [リモート先カレントブランチ]</pre> 
と記述してしまいました。

すると
<em>fatal: You didn\'t specify any refspecs to push, and push.default is \"nothing\".</em>
というエラーがでました。

それで エラー内のrefspecsてなんだと調べたら、[リモート先カレントブランチ]の部分のことで、そこが間違ってますよということみたいでした。

でもそこはあっているのでなんでかなとおもったら
<strong>origin</strong>
これ入れ忘れてました。

originとは、調べたところ起源、根源とかいう意味みたいですね。

そして正しくは
<pre class=\"lang:sh decode:true \" >git push origin [リモート先カレントブランチ]</pre>

これで無事pushできました。

ちなみに、refspecsは複数でも大丈夫らしいです。","post_title": "Git push時のエラー","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "275-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-08 19:32:47","post_modified_gmt": "2016-01-08 10:32:47","post_content_filtered": "","post_parent": 275,"guid": "http://kumao-no-mori.com/archives/276","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 277,"post_author": 1,"post_date": "2016-01-10 19:00:15","post_date_gmt": "2016-01-10 10:00:15","post_content": "css3を使ってるからには、display:flexを使えないともったいないです。
まずいくつかの子要素を持つ親要素に
<pre class=\"lang:css decode:true \">.parent {
    display: flex;
    /* ベンダープレフィックスは付けといた方が良いです！ */
　  display: -webkit-flex;
}</pre>
をセットで準備OK。これで子要素たちは\"Flexboxコンテナー\"として定義されました。

この.parentに以下プロパティを指定していくことで自由にフレキシブルに子要素を配置できます。
(★：プロパティ   ☆：値)

<strong>★ flex-direction</strong>
&nbsp;&nbsp;&nbsp;並びの方向を設定できる。
<strong>☆ row</strong>
&nbsp;&nbsp;&nbsp;初期値。左から右に並ぶ。
<strong>☆ row-reverse</strong>
&nbsp;&nbsp;&nbsp;右から左に並ぶ。
<strong>☆ column</strong>
&nbsp;&nbsp;&nbsp;上から下に並ぶ。
<strong>☆ column-reverse</strong>
&nbsp;&nbsp;&nbsp;下から上に並ぶ。
<br>
<br>
<strong>★ flex-wrap</strong>
&nbsp;&nbsp;&nbsp;折り返しの設定が出来る。
<strong>☆ nowrap</strong>
&nbsp;&nbsp;&nbsp;初期値。折り返し無し。
<strong>☆ wrap</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を折り返し。
<strong>☆ wrap-reverse</strong>
&nbsp;&nbsp;&nbsp;はみ出た要素を逆の順番で折り返し。
<br>
<br>
<strong>★ flex-flow</strong>
&nbsp;&nbsp;&nbsp;上の二つをまとめて指定できる。
&nbsp;&nbsp;&nbsp;flex-flow: [flex-directionの値] [flex-wrapの値];
&nbsp;&nbsp;&nbsp;の順番で書く。

とりあえず今回はここまで。
display:flexはまだまだ奥が深いので、もっと使いこなせるようになったらまた記事書きたいです。","post_title": "CSS display:flexについて１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "201-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-10 19:00:15","post_modified_gmt": "2016-01-10 10:00:15","post_content_filtered": "","post_parent": 201,"guid": "http://kumao-no-mori.com/archives/277","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 280,"post_author": 1,"post_date": "2016-01-12 11:35:48","post_date_gmt": "2016-01-12 02:35:48","post_content": "border-radiusをボーダーではなく要素にかけるとき、効かないなってなったら
<pre>overflow: hidden;</pre>
を足せば良い。

&nbsp;

","post_title": "CSS border-radiusについて","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "css-border-radius%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:54","post_modified_gmt": "2016-09-29 09:55:54","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=280","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 281,"post_author": 1,"post_date": "2016-01-12 11:31:13","post_date_gmt": "2016-01-12 02:31:13","post_content": "","post_title": "CSS border-radius","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "280-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-12 11:31:13","post_modified_gmt": "2016-01-12 02:31:13","post_content_filtered": "","post_parent": 280,"guid": "http://kumao-no-mori.com/archives/281","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 282,"post_author": 1,"post_date": "2016-01-12 11:35:48","post_date_gmt": "2016-01-12 02:35:48","post_content": "border-radiusをボーダーではなく要素にかけるとき、効かないなってなったら
<pre>overflow: hidden;</pre>
を足せば良い。","post_title": "CSS border-radiusについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "280-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-12 11:35:48","post_modified_gmt": "2016-01-12 02:35:48","post_content_filtered": "","post_parent": 280,"guid": "http://kumao-no-mori.com/archives/282","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 283,"post_author": 1,"post_date": "2016-01-12 11:38:03","post_date_gmt": "2016-01-12 02:38:03","post_content": "border-radiusをボーダーではなく要素にかけるとき、効かないなってなったら
<pre style=\"margin-bottom:0;\">overflow: hidden;</pre>
を足せば良い。","post_title": "CSS border-radiusについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "280-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-01-12 11:38:03","post_modified_gmt": "2016-01-12 02:38:03","post_content_filtered": "","post_parent": 280,"guid": "http://kumao-no-mori.com/archives/283","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 285,"post_author": 1,"post_date": "2016-01-13 13:35:43","post_date_gmt": "2016-01-13 04:35:43","post_content": "「schema.org(スキーマドットオルグ)」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

★<strong>リッチスニペット</strong>
metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。
schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。


★<strong>プロパティ</strong>
☆ itemscope
microdata(検索エンジンに送られる情報)を使う事を宣言する。

☆ itemtype
microdataの種類をURLで指定する。

☆ itemprop
細かい項目を指定する。

とかあります。
タグの中にこのようなプロパティを記述して、情報をコンピュータに細かく伝えていきます。
リファレンスはこちら↓
<a href=\"http://schema.org/docs/full.html\" target=\"_blank\">http://schema.org/docs/full.html</a>


schema.orgで記述したコードは↓のGoogleDevelopersで検証できます。
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>","post_title": "schema.org について１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 13:35:43","post_modified_gmt": "2016-01-13 04:35:43","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/archives/285","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 286,"post_author": 1,"post_date": "2016-01-13 16:10:12","post_date_gmt": "2016-01-13 07:10:12","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用していくにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452666164415.jpg\" rel=\"attachment wp-att-298\"><img class=\"aligncenter size-medium_large wp-image-298\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom: 0;\">
	<li style=\"list-style-position: inside;\">Microdata</li>
	<li style=\"list-style-position: inside;\">RDFa</li>
	<li style=\"list-style-position: inside;\">JSON-LD</li>
	<li style=\"list-style: none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>
そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

https://gist.github.com/naokidoguchi/6be5c6c35f5a251e425c

こんな感じに書いてみたのですが、ぱっと見で読めると思います。
パンくずリストはこういうことです。
<strong> カテゴリー > プロダクト > 商品1 </strong>


コードを上から見ていきます↓

★ JSONオブジェクト
<strong>\"@context\": \"http://schema.org\"</strong>
schema.orgについてこれから記述していく事を宣言。

<strong>\"@type\": \"BreadcrumbList\"</strong>
schema.orgで定義されている「型」を記述。
今回はパンくずなので、パンくずを扱うBreadcrumbListを使用。
他の型については、schema.org公式サイトで確認してください。
<a href=\"http://schema.org/docs/schemas.html\" target=\"_blank\">http://schema.org/docs/schemas.html</a>

★ プロパティ
<strong>\"position\": 1</strong>
パンくずリストの順番。

<strong>\"@id\": \"https://example.com/categories\"</strong>
そのパンくずで示されるページのURL。

<strong>\"name\": \"プロダクト\"</strong>
そのパンくずリストのラベル。


これで以上の情報を検索エンジンに伝えられます。

JSON-LDを記述し終わったら必ずこちらでチェック↓
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1.png\" rel=\"attachment wp-att-305\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1-768x377.png\" alt=\"image_schema\" width=\"660\" height=\"324\" class=\"aligncenter size-medium_large wp-image-305\" /></a>

このように問題が出なければ大丈夫です。

&nbsp;","post_title": "schema.orgについて２","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "schema-org%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6%ef%bc%92","to_ping": "","pinged": "
http://kumao-no-mori.com/archives/187","post_modified": "2016-09-29 19:03:13","post_modified_gmt": "2016-09-29 10:03:13","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=286","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 287,"post_author": 1,"post_date": "2016-01-13 13:40:19","post_date_gmt": "2016-01-13 04:40:19","post_content": "「schema.org(スキーマドットオルグ)」って今日初めて知ったのでメモメモ。
schema.orgは検索エンジンにより詳しく情報を伝えて、SEOの効果を上げることが出来ます。

<strong>★リッチスニペット</strong>
metaタグでdescriptionを設定すると、検索結果で表示されたwebページのタイトルの下にdescriptionで設定した文言が表示されますが、それを「スニペット」と呼びます。
schema.orgを使用して、検索エンジンにより詳しく正確に情報を伝える事でスニペットに画像や★のレビュー評価を表示させる事が出来ます。そのデコレーションされたスニペットの事を「リッチスニペット」と呼びます。


<strong>★プロパティ</strong>

<strong>☆ itemscope</strong>
microdata(検索エンジンに送られる情報)を使う事を宣言する。

<strong>☆ itemtype</strong>
microdataの種類をURLで指定する。

<strong>☆ itemprop</strong>
細かい項目を指定する。

とかあります。
タグの中にこのようなプロパティを記述して、情報をコンピュータに細かく伝えていきます。
リファレンスはこちら↓
<a href=\"http://schema.org/docs/full.html\" target=\"_blank\">http://schema.org/docs/full.html</a>


schema.orgで記述したコードは↓のGoogleDevelopersで検証できます。
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>","post_title": "schema.org について１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "187-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 13:40:19","post_modified_gmt": "2016-01-13 04:40:19","post_content_filtered": "","post_parent": 187,"guid": "http://kumao-no-mori.com/archives/287","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 288,"post_author": 1,"post_date": "2016-01-13 13:47:29","post_date_gmt": "2016-01-13 04:47:29","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
・ Microdata
・ RDFa
・ JSON-LD

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 13:47:29","post_modified_gmt": "2016-01-13 04:47:29","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/288","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 289,"post_author": 1,"post_date": "2016-01-13 14:59:33","post_date_gmt": "2016-01-13 05:59:33","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul>
	<li style=\"\">Microdata</li>
	<li style=\"\">RDFa</li>
	<li style=\"\">JSON-LD</li>
</ul>
Microdataと併せてRDFaとJSON-LDを

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 14:59:33","post_modified_gmt": "2016-01-13 05:59:33","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/289","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 290,"post_author": 1,"post_date": "2016-01-13 15:01:36","post_date_gmt": "2016-01-13 06:01:36","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul>
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
</ul>
Microdataと併せてRDFaとJSON-LDを記述したりもできます。

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:01:36","post_modified_gmt": "2016-01-13 06:01:36","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/290","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 291,"post_author": 1,"post_date": "2016-01-13 15:02:33","post_date_gmt": "2016-01-13 06:02:33","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
</ul>
Microdataと併せてRDFaとJSON-LDを記述したりもできます。

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:02:33","post_modified_gmt": "2016-01-13 06:02:33","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/291","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 292,"post_author": 1,"post_date": "2016-01-13 15:03:23","post_date_gmt": "2016-01-13 06:03:23","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
</ul>
<span style=\"margin-top:0;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</span>

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:03:23","post_modified_gmt": "2016-01-13 06:03:23","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/292","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 293,"post_author": 1,"post_date": "2016-01-13 15:04:45","post_date_gmt": "2016-01-13 06:04:45","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
        <li style=\"list-style:none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>


そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:04:45","post_modified_gmt": "2016-01-13 06:04:45","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/293","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 294,"post_author": 1,"post_date": "2016-01-13 15:05:40","post_date_gmt": "2016-01-13 06:05:40","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\"><strong>Microdata</strong></li>
	<li style=\"list-style-position:inside;\"><strong>RDFa</strong></li>
	<li style=\"list-style-position:inside;\"><strong>JSON-LD</strong></li>
        <li style=\"list-style:none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>


そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:05:40","post_modified_gmt": "2016-01-13 06:05:40","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/294","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 295,"post_author": 1,"post_date": "2016-01-13 15:06:15","post_date_gmt": "2016-01-13 06:06:15","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
        <li style=\"list-style:none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>


そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:06:15","post_modified_gmt": "2016-01-13 06:06:15","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/295","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 296,"post_author": 1,"post_date": "2016-01-13 15:15:43","post_date_gmt": "2016-01-13 06:15:43","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これから使って行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
        <li style=\"list-style:none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:15:43","post_modified_gmt": "2016-01-13 06:15:43","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/296","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 297,"post_author": 1,"post_date": "2016-01-13 15:17:46","post_date_gmt": "2016-01-13 06:17:46","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用して行くにあたってもう少し詳しく知った事をメモ。

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
        <li style=\"list-style:none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:17:46","post_modified_gmt": "2016-01-13 06:17:46","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/297","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 298,"post_author": 1,"post_date": "2016-01-13 15:18:34","post_date_gmt": "2016-01-13 06:18:34","post_content": "","post_title": "-shared-img-thumb-150819082118_TP_V","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "shared-img-thumb-150819082118_tp_v","to_ping": "","pinged": "","post_modified": "2016-01-13 15:19:05","post_modified_gmt": "2016-01-13 06:19:05","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V.jpg","menu_order": 0,"post_type": "attachment","post_mime_type": "image/jpeg","comment_count": 0}, {"ID": 299,"post_author": 1,"post_date": "2016-01-13 15:19:50","post_date_gmt": "2016-01-13 06:19:50","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用して行くにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452665961892.jpg\" rel=\"attachment wp-att-298\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" class=\"aligncenter size-medium_large wp-image-298\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
        <li style=\"list-style:none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:19:50","post_modified_gmt": "2016-01-13 06:19:50","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/299","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 300,"post_author": 1,"post_date": "2016-01-13 15:22:51","post_date_gmt": "2016-01-13 06:22:51","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用して行くにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452666164415.jpg\" rel=\"attachment wp-att-298\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" class=\"aligncenter size-medium_large wp-image-298\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom:0;\">
	<li style=\"list-style-position:inside;\">Microdata</li>
	<li style=\"list-style-position:inside;\">RDFa</li>
	<li style=\"list-style-position:inside;\">JSON-LD</li>
        <li style=\"list-style:none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>

そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 15:22:51","post_modified_gmt": "2016-01-13 06:22:51","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/300","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 301,"post_author": 1,"post_date": "2016-01-13 16:01:58","post_date_gmt": "2016-01-13 07:01:58","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用して行くにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452666164415.jpg\" rel=\"attachment wp-att-298\"><img class=\"aligncenter size-medium_large wp-image-298\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom: 0;\">
	<li style=\"list-style-position: inside;\">Microdata</li>
	<li style=\"list-style-position: inside;\">RDFa</li>
	<li style=\"list-style-position: inside;\">JSON-LD</li>
	<li style=\"list-style: none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>
そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

https://gist.github.com/naokidoguchi/6be5c6c35f5a251e425c

こんな感じに書いてみたのですが、ぱっと見で読めると思います。
パンくずリストはこういうことです。
<strong> カテゴリー > プロダクト > 商品1 </strong>


コードを上から見ていきます↓

★ JSONオブジェクト
<strong>\"@context\": \"http://schema.org\"</strong>
schema.orgについてこれから記述していく事を宣言。

<strong>\"@type\": \"BreadcrumbList\"</strong>
schema.orgで定義されている「型」を記述。
今回はパンくずなので、パンくずを扱うBreadcrumbListを使用。
他の型については、schema.org公式サイトで確認してください。
<a href=\"http://schema.org/docs/schemas.html\" target=\"_blank\">http://schema.org/docs/schemas.html</a>

★ プロパティ
<strong>\"position\": 1</strong>
パンくずリストの順番。

<strong>\"@id\": \"https://example.com/categories\"</strong>","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 16:01:58","post_modified_gmt": "2016-01-13 07:01:58","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/301","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 303,"post_author": 1,"post_date": "2016-01-13 16:08:19","post_date_gmt": "2016-01-13 07:08:19","post_content": "","post_title": "image_schema","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "image_schema","to_ping": "","pinged": "","post_modified": "2016-01-13 16:08:33","post_modified_gmt": "2016-01-13 07:08:33","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 304,"post_author": 1,"post_date": "2016-01-13 16:10:12","post_date_gmt": "2016-01-13 07:10:12","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用していくにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452666164415.jpg\" rel=\"attachment wp-att-298\"><img class=\"aligncenter size-medium_large wp-image-298\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom: 0;\">
	<li style=\"list-style-position: inside;\">Microdata</li>
	<li style=\"list-style-position: inside;\">RDFa</li>
	<li style=\"list-style-position: inside;\">JSON-LD</li>
	<li style=\"list-style: none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>
そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

https://gist.github.com/naokidoguchi/6be5c6c35f5a251e425c

こんな感じに書いてみたのですが、ぱっと見で読めると思います。
パンくずリストはこういうことです。
<strong> カテゴリー > プロダクト > 商品1 </strong>


コードを上から見ていきます↓

★ JSONオブジェクト
<strong>\"@context\": \"http://schema.org\"</strong>
schema.orgについてこれから記述していく事を宣言。

<strong>\"@type\": \"BreadcrumbList\"</strong>
schema.orgで定義されている「型」を記述。
今回はパンくずなので、パンくずを扱うBreadcrumbListを使用。
他の型については、schema.org公式サイトで確認してください。
<a href=\"http://schema.org/docs/schemas.html\" target=\"_blank\">http://schema.org/docs/schemas.html</a>

★ プロパティ
<strong>\"position\": 1</strong>
パンくずリストの順番。

<strong>\"@id\": \"https://example.com/categories\"</strong>
そのパンくずで示されるページのURL。

<strong>\"name\": \"プロダクト\"</strong>
そのパンくずリストのラベル。


これで以上の情報を検索エンジンに伝えられます。

JSON-LDを記述し終わったら必ずこちらでチェック↓
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-e1452668919696.png\" rel=\"attachment wp-att-303\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-768x377.png\" alt=\"JSON-LD検証\" width=\"660\" height=\"324\" class=\"aligncenter size-medium_large wp-image-303\" /></a>

これで問題が出なければ大丈夫です。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 16:10:12","post_modified_gmt": "2016-01-13 07:10:12","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/304","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 305,"post_author": 1,"post_date": "2016-01-13 16:13:46","post_date_gmt": "2016-01-13 07:13:46","post_content": "","post_title": "image_schema","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "image_schema-2","to_ping": "","pinged": "","post_modified": "2016-01-13 16:13:46","post_modified_gmt": "2016-01-13 07:13:46","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 306,"post_author": 1,"post_date": "2016-01-13 16:14:06","post_date_gmt": "2016-01-13 07:14:06","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用していくにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452666164415.jpg\" rel=\"attachment wp-att-298\"><img class=\"aligncenter size-medium_large wp-image-298\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom: 0;\">
	<li style=\"list-style-position: inside;\">Microdata</li>
	<li style=\"list-style-position: inside;\">RDFa</li>
	<li style=\"list-style-position: inside;\">JSON-LD</li>
	<li style=\"list-style: none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>
そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

https://gist.github.com/naokidoguchi/6be5c6c35f5a251e425c

こんな感じに書いてみたのですが、ぱっと見で読めると思います。
パンくずリストはこういうことです。
<strong> カテゴリー > プロダクト > 商品1 </strong>


コードを上から見ていきます↓

★ JSONオブジェクト
<strong>\"@context\": \"http://schema.org\"</strong>
schema.orgについてこれから記述していく事を宣言。

<strong>\"@type\": \"BreadcrumbList\"</strong>
schema.orgで定義されている「型」を記述。
今回はパンくずなので、パンくずを扱うBreadcrumbListを使用。
他の型については、schema.org公式サイトで確認してください。
<a href=\"http://schema.org/docs/schemas.html\" target=\"_blank\">http://schema.org/docs/schemas.html</a>

★ プロパティ
<strong>\"position\": 1</strong>
パンくずリストの順番。

<strong>\"@id\": \"https://example.com/categories\"</strong>
そのパンくずで示されるページのURL。

<strong>\"name\": \"プロダクト\"</strong>
そのパンくずリストのラベル。


これで以上の情報を検索エンジンに伝えられます。

JSON-LDを記述し終わったら必ずこちらでチェック↓
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1.png\" rel=\"attachment wp-att-305\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1-768x377.png\" alt=\"image_schema\" width=\"660\" height=\"324\" class=\"aligncenter size-medium_large wp-image-305\" /></a>

このように問題が出なければ大丈夫です。","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-13 16:14:06","post_modified_gmt": "2016-01-13 07:14:06","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/archives/306","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 307,"post_author": 1,"post_date": "2016-01-15 12:56:22","post_date_gmt": "2016-01-15 03:56:22","post_content": "vimの起動時に実行しておきたいコマンドは.vimrcに記述する。
ずらずらとコマンドを一行ずつ書いて行けば良い。

初心者の私は取りあえず
<strong>syntax on</strong> コードカラーを付ける
<strong>set number</strong> コード行番号を表示
の２つで満足してますが、その他に設定しておくと便利そうなのをメモしてみます↓
<strong>set tabstop=4</strong> インデントをスペース4つ分
<strong>set smartindent</strong> 自動インデント
<strong>set title</strong> 編集中のタイトルをセット


.vimrcでは<strong> \" </strong>(ダブルクオテーション)でコメントアウト。

<strong>[v]</strong> ビジュアルモード
<strong>[i]</strong> 挿入モード
<strong>[ESC]</strong> コマンドモード
<strong>[u]</strong> 前の状態に戻したい場合
<strong>[Ctrl]+[r]</strong> やり直したい場合
<strong>[dd]</strong> 一行削除
<strong>[番号]</strong> 行きたい行番号入力で飛べる
<strong>[gg]</strong> 最初の行へ 
<strong>[G]</strong> 画面上最後の行へ
<strong>[H]</strong> 画面上最初の行へ
<strong>[M]</strong> 画面上真ん中の行へ
<strong>[L]</strong> 画面上最後の行へ
<strong>[*]</strong> カーソル下の単語検索
<strong>[yy]</strong> 今いる行をコピー
<strong>[p]</strong> カーソルの箇所にペースト

&nbsp;

","post_title": "vim のカスタマイズとか","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "vim-%e3%81%ae%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%9e%e3%82%a4%e3%82%ba%e3%81%a8%e3%81%8b","to_ping": "","pinged": "","post_modified": "2016-09-29 19:03:13","post_modified_gmt": "2016-09-29 10:03:13","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=307","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 308,"post_author": 1,"post_date": "2016-01-15 12:56:22","post_date_gmt": "2016-01-15 03:56:22","post_content": "vimの起動時に実行しておきたいコマンドは.vimrcに記述する。
ずらずらとコマンドを一行ずつ書いて行けば良い。

初心者の私は取りあえず
<strong>syntax on</strong> コードカラーを付ける
<strong>set number</strong> コード行番号を表示
の２つで満足してますが、その他に設定しておくと便利そうなのをメモしてみます↓
<strong>set tabstop=4</strong> インデントをスペース4つ分
<strong>set smartindent</strong> 自動インデント
<strong>set title</strong> 編集中のタイトルをセット


.vimrcでは<strong> \" </strong>(ダブルクオテーション)でコメントアウト。

[v] ビジュアルモード
[i] 挿入モード
[ESC] コマンドモード
[u] 前の状態に戻したい場合
[Ctrl]+[r] やり直したい場合
[dd] 一行削除
[番号] 行きたい行番号入力で飛べる
[gg] 最初の行へ 
[G] 画面上最後の行へ
[H] 画面上最初の行へ
[M] 画面上真ん中の行へ
[L] 画面上最後の行へ
[*] カーソル下の単語検索
[yy] 今いる行をコピー
[p] カーソルの箇所にペースト
","post_title": "vim のカスタマイズとか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "307-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-15 12:56:22","post_modified_gmt": "2016-01-15 03:56:22","post_content_filtered": "","post_parent": 307,"guid": "http://kumao-no-mori.com/archives/308","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 309,"post_author": 1,"post_date": "2016-01-15 12:57:46","post_date_gmt": "2016-01-15 03:57:46","post_content": "vimの起動時に実行しておきたいコマンドは.vimrcに記述する。
ずらずらとコマンドを一行ずつ書いて行けば良い。

初心者の私は取りあえず
<strong>syntax on</strong> コードカラーを付ける
<strong>set number</strong> コード行番号を表示
の２つで満足してますが、その他に設定しておくと便利そうなのをメモしてみます↓
<strong>set tabstop=4</strong> インデントをスペース4つ分
<strong>set smartindent</strong> 自動インデント
<strong>set title</strong> 編集中のタイトルをセット


.vimrcでは<strong> \" </strong>(ダブルクオテーション)でコメントアウト。

<strong>[v]</strong> ビジュアルモード
<strong>[i]</strong> 挿入モード
<strong>[ESC]</strong> コマンドモード
<strong>[u]</strong> 前の状態に戻したい場合
<strong>[Ctrl]+[r]</strong> やり直したい場合
<strong>[dd]</strong> 一行削除
<strong>[番号]</strong> 行きたい行番号入力で飛べる
<strong>[gg]</strong> 最初の行へ 
<strong>[G]</strong> 画面上最後の行へ
<strong>[H]</strong> 画面上最初の行へ
<strong>[M]</strong> 画面上真ん中の行へ
<strong>[L]</strong> 画面上最後の行へ
<strong>[*]</strong> カーソル下の単語検索
<strong>[yy]</strong> 今いる行をコピー
<strong>[p]</strong> カーソルの箇所にペースト","post_title": "vim のカスタマイズとか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "307-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-15 12:57:46","post_modified_gmt": "2016-01-15 03:57:46","post_content_filtered": "","post_parent": 307,"guid": "http://kumao-no-mori.com/archives/309","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 310,"post_author": 1,"post_date": "2016-01-16 15:35:20","post_date_gmt": "2016-01-16 06:35:20","post_content": "いつもgitはGUIを使ってcommitとかpushとかしてたのですが、pcのバージョン関係で突然使えなくなり、久々にコマンドラインでpushしたときにはまった事をメモメモ。

まず、私は間違えて
<pre class=\"lang:sh decode:true \" >git push [リモート先ブランチ]</pre> 
と記述してしまいました。

すると
<em>fatal: You didn\'t specify any refspecs to push, and push.default is \"nothing\".</em>
というエラーがでました。

それで エラー内のrefspecsてなんだと調べたら、[リモート先ブランチ]の部分のことで、そこが間違ってますよということみたいでした。

でもそこはあっているのでなんでかなとおもったら
<strong>origin</strong>
これ入れ忘れてました。

originとは、調べたところ起源、根源とかいう意味みたいですね。

そして正しくは
<pre class=\"lang:sh decode:true \" >git push origin [リモート先ブランチ]</pre>

これで無事pushできました。

ちなみに、refspecsは複数でも大丈夫らしいです。","post_title": "Git push時のエラー","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "275-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-16 15:35:20","post_modified_gmt": "2016-01-16 06:35:20","post_content_filtered": "","post_parent": 275,"guid": "http://kumao-no-mori.com/archives/310","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 311,"post_author": 1,"post_date": "2016-01-20 13:18:26","post_date_gmt": "2016-01-20 04:18:26","post_content": "変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
あとAパターン、Bパターンと作成しておくのにも便利ですよね。
そのスタッシュについて一通りをメモ。

★ stashする
<pre>git stash</pre>

★ コメントを付けてstashする
<pre>git stash save \"自由にコメント\"</pre>

★ stashリストを確認
<pre>git stash list</pre>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<pre>git stash show \"stash名\"</pre>


★ stashしたものを取り出す
<pre>git stash apply stash@{0}</pre>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<pre>git stash drop stash@{0}</pre>

★ stashしたものを取り出した際に削除も同時に行う
<pre>git stash pop stash@{0}</pre>

&nbsp;
","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-%e4%b8%80%e6%99%82%e9%80%80%e9%81%bf%e3%81%aestash%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:18","post_modified_gmt": "2016-09-29 09:57:18","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=311","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 312,"post_author": 1,"post_date": "2016-01-18 14:44:44","post_date_gmt": "2016-01-18 05:44:44","post_content": "いろんなプロジェクトを同時進行している私は、とにかくブランチを切り替えまくります。
変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
一時退避しといて、またブランチ戻ってきたらスタッシュしたものを戻し、スタッシュリストを整理する一通りをメモしていきます。

★ stashする
<strong>$ git stash</strong>

★ コメントを付けてstashする
<strong>$ git stash save \"自由にコメント\"</strong>

★ stashリストを確認
<strong>$ git stash list</strong>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<strong>$ git stash show \"見たいstash名\"</strong>


★ stashしたものを取り出す
","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-18 14:44:44","post_modified_gmt": "2016-01-18 05:44:44","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/archives/312","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 313,"post_author": 1,"post_date": "2016-01-20 13:18:26","post_date_gmt": "2016-01-20 04:18:26","post_content": "いろんなプロジェクトを同時進行している私は、とにかくブランチを切り替えまくります。
変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
スタッシュについて一通りをメモ。

★ stashする
<strong>$ git stash</strong>

★ コメントを付けてstashする
<strong>$ git stash save \"自由にコメント\"</strong>

★ stashリストを確認
<strong>$ git stash list</strong>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<strong>$ git stash show \"stash名\"</strong>


★ stashしたものを取り出す
<strong>$ git stash apply stash@{0}</strong>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<strong>$ git stash drop <消したいstash名></strong>

★ stashしたものを取り出した際に削除も同時に行う
<strong>$ git stash pop stash@{0}</strong>","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-20 13:18:26","post_modified_gmt": "2016-01-20 04:18:26","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/archives/313","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 314,"post_author": 1,"post_date": "2016-01-20 13:19:42","post_date_gmt": "2016-01-20 04:19:42","post_content": "いろんなプロジェクトを同時進行している私は、とにかくブランチを切り替えまくります。
変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
あとAパターン、Bパターンと作成しておくのにも便利ですよね。
そのスタッシュについて一通りをメモ。

★ stashする
<strong>$ git stash</strong>

★ コメントを付けてstashする
<strong>$ git stash save \"自由にコメント\"</strong>

★ stashリストを確認
<strong>$ git stash list</strong>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<strong>$ git stash show \"stash名\"</strong>


★ stashしたものを取り出す
<strong>$ git stash apply stash@{0}</strong>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<strong>$ git stash drop <消したいstash名></strong>

★ stashしたものを取り出した際に削除も同時に行う
<strong>$ git stash pop stash@{0}</strong>","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-20 13:19:42","post_modified_gmt": "2016-01-20 04:19:42","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/archives/314","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 316,"post_author": 1,"post_date": "2016-01-21 15:47:14","post_date_gmt": "2016-01-21 06:47:14","post_content": "<pre class=\"lang:css decode:true \" >-webkit-tap-highlight-color:rgba(0,0,0,0);</pre> 
これを入れればデフォルトでなるタップ時の黒い影を消せる。
毎回わすれてしまうので。。

逆にオリジナルに色付けたいときは、rgbaの値を変えれば良い。

&nbsp;
","post_title": "CSS スマホでタップすると出来る黒い影を消す","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "css-%e3%82%b9%e3%83%9e%e3%83%9b%e3%81%a7%e3%82%bf%e3%83%83%e3%83%97%e3%81%99%e3%82%8b%e3%81%a8%e5%87%ba%e6%9d%a5%e3%82%8b%e9%bb%92%e3%81%84%e5%bd%b1%e3%82%92%e6%b6%88%e3%81%99","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=316","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 317,"post_author": 1,"post_date": "2016-01-21 15:47:14","post_date_gmt": "2016-01-21 06:47:14","post_content": "https://gist.github.com/naokidoguchi/b8c40e4ceb2e114ddbbb

これを入れればデフォルトでなるタップ時の黒い影を消せる。
毎回わすれてしまうので。","post_title": "CSS スマホでタップすると出来る黒い影を消す","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "316-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-21 15:47:14","post_modified_gmt": "2016-01-21 06:47:14","post_content_filtered": "","post_parent": 316,"guid": "http://kumao-no-mori.com/archives/317","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 318,"post_author": 1,"post_date": "2016-01-21 15:48:34","post_date_gmt": "2016-01-21 06:48:34","post_content": "<pre class=\"lang:css decode:true \" >-webkit-tap-highlight-color:rgba(0,0,0,0);</pre> 
これを入れればデフォルトでなるタップ時の黒い影を消せる。
毎回わすれてしまうので。","post_title": "CSS スマホでタップすると出来る黒い影を消す","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "316-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-21 15:48:34","post_modified_gmt": "2016-01-21 06:48:34","post_content_filtered": "","post_parent": 316,"guid": "http://kumao-no-mori.com/archives/318","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 319,"post_author": 1,"post_date": "2016-01-21 16:04:26","post_date_gmt": "2016-01-21 07:04:26","post_content": "<pre class=\"lang:css decode:true \" >-webkit-tap-highlight-color:rgba(0,0,0,0);</pre> 
これを入れればデフォルトでなるタップ時の黒い影を消せる。
毎回わすれてしまうので。。

逆にオリジナルに色付けたいときは、rgbaの値を変えれば良い。","post_title": "CSS スマホでタップすると出来る黒い影を消す","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "316-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-21 16:04:26","post_modified_gmt": "2016-01-21 07:04:26","post_content_filtered": "","post_parent": 316,"guid": "http://kumao-no-mori.com/archives/319","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 320,"post_author": 1,"post_date": "2016-01-25 19:23:45","post_date_gmt": "2016-01-25 10:23:45","post_content": "いろんなプロジェクトを同時進行している私は、とにかくブランチを切り替えまくります。
変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
あとAパターン、Bパターンと作成しておくのにも便利ですよね。
そのスタッシュについて一通りをメモ。

★ stashする
<strong>$ git stash</strong>

★ コメントを付けてstashする
<strong>$ git stash save \"自由にコメント\"</strong>

★ stashリストを確認
<strong>$ git stash list</strong>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<strong>$ git stash show \"stash名\"</strong>


★ stashしたものを取り出す
<strong>$ git stash apply stash@{0}</strong>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<strong>$ git stash drop stash@{0}</strong>

★ stashしたものを取り出した際に削除も同時に行う
<strong>$ git stash pop stash@{0}</strong>","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-25 19:23:45","post_modified_gmt": "2016-01-25 10:23:45","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/archives/320","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 322,"post_author": 1,"post_date": "2016-01-26 19:47:03","post_date_gmt": "2016-01-26 10:47:03","post_content": "下にスクロールすると表示、上にスクロールすると非表示になるヘッダーを作ったので、ここに置いときます。
https://gist.github.com/naokidoguchi/88ec4e94da97770aee2b

CSS3のtransitionでスムーズに
https://gist.github.com/naokidoguchi/64788b39ff2b18af4e80

&nbsp;","post_title": "jQuery スクロールすると表示非表示するヘッダー","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "jquery-%e3%82%b9%e3%82%af%e3%83%ad%e3%83%bc%e3%83%ab%e3%81%99%e3%82%8b%e3%81%a8%e8%a1%a8%e7%a4%ba%e9%9d%9e%e8%a1%a8%e7%a4%ba%e3%81%99%e3%82%8b%e3%83%98%e3%83%83%e3%83%80%e3%83%bc","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:18","post_modified_gmt": "2016-09-29 09:57:18","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=322","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 323,"post_author": 1,"post_date": "2016-01-26 19:47:03","post_date_gmt": "2016-01-26 10:47:03","post_content": "下にスクロールすると表示、上にスクロールすると非表示になるヘッダーを作ったので、ここに置いときます。
https://gist.github.com/naokidoguchi/88ec4e94da97770aee2b

CSS3のtransitionでスムーズに
https://gist.github.com/naokidoguchi/64788b39ff2b18af4e80","post_title": "jQuery スクロールすると表示非表示するヘッダー","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "322-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-26 19:47:03","post_modified_gmt": "2016-01-26 10:47:03","post_content_filtered": "","post_parent": 322,"guid": "http://kumao-no-mori.com/archives/323","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 325,"post_author": 1,"post_date": "2016-01-28 13:13:27","post_date_gmt": "2016-01-28 04:13:27","post_content": "push, pull時に毎回ユーザー名とパスワードきかれるので、GitHubにSSH接続して無駄な作業をなくす。

まず公開鍵と秘密鍵を作成します。
★ 秘密鍵 <strong>id_rsa</strong>
★ 公開鍵 <strong>id_rsa.pub</strong>

☆ 鍵を入れるフォルダに移動
<pre>cd ~/.ssh</pre>

☆ 鍵の生成
<pre>ssh-keygen -t rsa</pre>

これで２つの鍵が作成される。


公開鍵をGitHubに登録する。
<a href=\"https://github.com/settings/ssh\" target=\"_blank\">GitHubのssh設定画面</a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" rel=\"attachment wp-att-327\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" alt=\"githubの画面画像\" width=\"998\" height=\"489\" class=\"aligncenter size-full wp-image-327\" /></a>
titleは適当に、
<pre>pbcopy < ~/.ssh/id_rsa.pub</pre>
で公開鍵をクリップボードにコピー。
それをそのままkeyの入力欄にペーストして、AddKeyボタンで登録完了。

公開鍵と同時に作成した秘密鍵、これを持っているデバイスのみSSH接続が出来ます。

&nbsp;

","post_title": "GitHub SSHキー作成メモ","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "github-ssh%e3%82%ad%e3%83%bc%e4%bd%9c%e6%88%90%e3%83%a1%e3%83%a2","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:18","post_modified_gmt": "2016-09-29 09:57:18","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=325","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 327,"post_author": 1,"post_date": "2016-01-28 13:03:30","post_date_gmt": "2016-01-28 04:03:30","post_content": "","post_title": "gitsshkey","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "gitsshkey","to_ping": "","pinged": "","post_modified": "2016-01-28 13:03:57","post_modified_gmt": "2016-01-28 04:03:57","post_content_filtered": "","post_parent": 325,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 328,"post_author": 1,"post_date": "2016-01-28 13:13:27","post_date_gmt": "2016-01-28 04:13:27","post_content": "push, pull時に毎回ユーザー名とパスワードきかれるので、GitHubにSSH接続して無駄な作業をなくす。

まず公開鍵と秘密鍵を作成します。
★ 秘密鍵<strong>id_rsa</strong>
★ 公開鍵<strong>id_rsa.pub</strong>

☆ 鍵を入れるフォルダに移動
<pre>$ cd ~/.ssh<pre>

☆ 鍵の生成
<pre>$ ssh-keygen -t rsa</pre>

これで２つの鍵が作成される。


公開鍵をGitHubに登録する。
<a href=\"https://github.com/settings/ssh\" target=\"_blank\">GitHubのssh設定画面</a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" rel=\"attachment wp-att-327\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey-300x147.png\" alt=\"githubの画面画像\" width=\"300\" height=\"147\" class=\"aligncenter size-medium wp-image-327\" /></a>
titleは適当に、
<pre>$ pbcopy < ~/.ssh/id_rsa.pub</pre>
で公開鍵をクリップボードにコピー。
それをそのままkeyの入力欄にペーストして、AddKeyボタンで登録完了。

公開鍵と同時に作成した秘密鍵、これを持っているデバイスのみSSH接続が出来まっす。","post_title": "GitHub SSHキー作成メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "325-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-28 13:13:27","post_modified_gmt": "2016-01-28 04:13:27","post_content_filtered": "","post_parent": 325,"guid": "http://kumao-no-mori.com/archives/328","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 329,"post_author": 1,"post_date": "2016-01-28 13:14:24","post_date_gmt": "2016-01-28 04:14:24","post_content": "push, pull時に毎回ユーザー名とパスワードきかれるので、GitHubにSSH接続して無駄な作業をなくす。

まず公開鍵と秘密鍵を作成します。
★ 秘密鍵 <strong>id_rsa</strong>
★ 公開鍵 <strong>id_rsa.pub</strong>

☆ 鍵を入れるフォルダに移動
<pre>$ cd ~/.ssh</pre>

☆ 鍵の生成
<pre>$ ssh-keygen -t rsa</pre>

これで２つの鍵が作成される。


公開鍵をGitHubに登録する。
<a href=\"https://github.com/settings/ssh\" target=\"_blank\">GitHubのssh設定画面</a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" rel=\"attachment wp-att-327\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey-300x147.png\" alt=\"githubの画面画像\" width=\"300\" height=\"147\" class=\"aligncenter size-medium wp-image-327\" /></a>
titleは適当に、
<pre>$ pbcopy < ~/.ssh/id_rsa.pub</pre>
で公開鍵をクリップボードにコピー。
それをそのままkeyの入力欄にペーストして、AddKeyボタンで登録完了。

公開鍵と同時に作成した秘密鍵、これを持っているデバイスのみSSH接続が出来まっす。","post_title": "GitHub SSHキー作成メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "325-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-28 13:14:24","post_modified_gmt": "2016-01-28 04:14:24","post_content_filtered": "","post_parent": 325,"guid": "http://kumao-no-mori.com/archives/329","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 330,"post_author": 1,"post_date": "2016-01-28 13:17:37","post_date_gmt": "2016-01-28 04:17:37","post_content": "push, pull時に毎回ユーザー名とパスワードきかれるので、GitHubにSSH接続して無駄な作業をなくす。

まず公開鍵と秘密鍵を作成します。
★ 秘密鍵 <strong>id_rsa</strong>
★ 公開鍵 <strong>id_rsa.pub</strong>

☆ 鍵を入れるフォルダに移動
<pre>$ cd ~/.ssh</pre>

☆ 鍵の生成
<pre>$ ssh-keygen -t rsa</pre>

これで２つの鍵が作成される。


公開鍵をGitHubに登録する。
<a href=\"https://github.com/settings/ssh\" target=\"_blank\">GitHubのssh設定画面</a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" rel=\"attachment wp-att-327\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" alt=\"githubの画面画像\" width=\"998\" height=\"489\" class=\"aligncenter size-full wp-image-327\" /></a>
titleは適当に、
<pre>$ pbcopy < ~/.ssh/id_rsa.pub</pre>
で公開鍵をクリップボードにコピー。
それをそのままkeyの入力欄にペーストして、AddKeyボタンで登録完了。

公開鍵と同時に作成した秘密鍵、これを持っているデバイスのみSSH接続が出来まっす。","post_title": "GitHub SSHキー作成メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "325-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-28 13:17:37","post_modified_gmt": "2016-01-28 04:17:37","post_content_filtered": "","post_parent": 325,"guid": "http://kumao-no-mori.com/archives/330","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 333,"post_author": 1,"post_date": "2016-01-29 14:17:54","post_date_gmt": "2016-01-29 05:17:54","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちらのものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>★ コードカラーの例</strong>
$ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
$ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
$ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>★ エイリアスの例</strong>
$ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
$ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
$ git checkoutコマンドの省略。
<pre>$ git config --global alias.co checkout</pre>
$ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。

上記のコードカラーとエイリアス一気に流す用に ▽
<pre>
git config --global color.diff auto
git config --global color.branch auto
git config --global color.status auto
git config --global color.interactive auto
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout
git config --global alias.ci commit
</pre>

&nbsp;","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-%e3%81%ae%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%9e%e3%82%a4%e3%82%ba","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=333","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 334,"post_author": 1,"post_date": "2016-01-29 13:48:14","post_date_gmt": "2016-01-29 04:48:14","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。

☆ <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行！
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、見やすくなります！

☆ <strong>$ git config --global</strong>
","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-29 13:48:14","post_modified_gmt": "2016-01-29 04:48:14","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/01/29/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 335,"post_author": 1,"post_date": "2016-01-29 13:48:49","post_date_gmt": "2016-01-29 04:48:49","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。
<strong>
☆ <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a></strong>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行！
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、見やすくなります！

<strong>☆ $ git config</strong>
","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-29 13:48:49","post_modified_gmt": "2016-01-29 04:48:49","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/01/29/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 336,"post_author": 1,"post_date": "2016-01-29 14:16:55","post_date_gmt": "2016-01-29 05:16:55","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>コードカラーの例</strong>
★ $ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
★ $ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
★ $ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
★ interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>エイリアスの例</strong>
★ $ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
★ $ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
★ $ git checkoutコマンドの省略。
<pre>$ $ git config --global alias.co checkout</pre>
★ $ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-29 14:16:55","post_modified_gmt": "2016-01-29 05:16:55","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/01/29/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 337,"post_author": 1,"post_date": "2016-01-29 14:17:54","post_date_gmt": "2016-01-29 05:17:54","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>★ コードカラーの例</strong>
$ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
$ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
$ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>★ エイリアスの例</strong>
$ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
$ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
$ git checkoutコマンドの省略。
<pre>$ $ git config --global alias.co checkout</pre>
$ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-29 14:17:54","post_modified_gmt": "2016-01-29 05:17:54","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/01/29/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 340,"post_author": 1,"post_date": "2016-01-29 20:21:53","post_date_gmt": "2016-01-29 11:21:53","post_content": "間違えてpushしてしまった場合は
<pre>git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（指定したコミットより後のコミットを指定すると、指定したコミットからの一覧が表示されます。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
<del datetime=\"2016-06-20T06:47:03+00:00\">削除したいコミットの一行を削除し保存する。</del>
(2016/6/20修正)
以下のような修正コマンドがあります。
コミット番号の前のpickになっている箇所を修正したいコマンドに書き換えます。
<pre>#  Commands:
#　　p, pick = 内容を変更しない
#　　r, reword = コミットメッセージを変更する
#　　e, edit = コミットを編集する
#　　s, squash = ひとつ前のコミットにまとめ、コミットメッセージを書き直す
#  　f, fixup = ひとつ前のコミットにまとめ、コミットメッセージをそのまま使う
#  　x, exec = shell でコマンドを実行する
#  　d, drop = コミットを削除する
</pre> 

変更しvimで保存した後、

<pre>git add .
git commit --amend
</pre>
で変更をコミット。

これだけではrebaseの処理は終わっておらず、
<pre>git rebase --continue</pre>
で終了させます。

これで完了です。

&nbsp;","post_title": "Git 間違えてpushしてしまった時のrebase","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-%e9%96%93%e9%81%95%e3%81%88%e3%81%a6push%e3%81%97%e3%81%a6%e3%81%97%e3%81%be%e3%81%a3%e3%81%9f%e6%99%82%e3%81%aerebase","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:18","post_modified_gmt": "2016-09-29 09:57:18","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=340","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 341,"post_author": 1,"post_date": "2016-01-29 20:10:20","post_date_gmt": "2016-01-29 11:10:20","post_content": "","post_title": "Git git push no","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-29 20:10:20","post_modified_gmt": "2016-01-29 11:10:20","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/01/29/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 342,"post_author": 1,"post_date": "2016-01-29 20:21:53","post_date_gmt": "2016-01-29 11:21:53","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（<strong>HEAD~3</strong>だと直前の3つのコミットという感じ。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
削除したいコミットの一行を削除し保存する。

そして
<pre>$ git push -f origin [ブランチ]</pre>
でpushする。

これでgit logとかで確認すると綺麗になくなっています。","post_title": "Git 間違えてpushしてしまった時に、pushを取り消す方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-01-29 20:21:53","post_modified_gmt": "2016-01-29 11:21:53","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/01/29/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 344,"post_author": 1,"post_date": "2016-02-01 10:53:00","post_date_gmt": "2016-02-01 01:53:00","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（<strong>HEAD~3</strong>だと直前の3つのコミットという感じ。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
削除したいコミットの一行を削除し保存する。

そして
<pre>$ git push -f origin [ブランチ]</pre>
でpushする。

これでgit logとかで確認すると綺麗になくなっています。

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=FFF3FE&IS2=1&npa=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=qf_sp_asin_til&asins=4798143669\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "Git 間違えてpushしてしまった時に、pushを取り消す方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 10:53:00","post_modified_gmt": "2016-02-01 01:53:00","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/02/01/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 345,"post_author": 1,"post_date": "2016-07-22 12:46:03","post_date_gmt": "2016-07-22 03:46:03","post_content": "間違えてpushしてしまった場合は
<pre>git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（指定したコミットより後のコミットを指定すると、指定したコミットからの一覧が表示されます。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
<del datetime=\"2016-06-20T06:47:03+00:00\">削除したいコミットの一行を削除し保存する。</del>
(2016/6/20修正)
以下のような修正コマンドがあります。
コミット番号の前のpickになっている箇所を修正したいコマンドに書き換えます。
<pre>#  Commands:
#　　p, pick = 内容を変更しない
#　　r, reword = コミットメッセージを変更する
#　　e, edit = コミットを編集する
#　　s, squash = ひとつ前のコミットにまとめ、コミットメッセージを書き直す
#  　f, fixup = ひとつ前のコミットにまとめ、コミットメッセージをそのまま使う
#  　x, exec = shell でコマンドを実行する
#  　d, drop = コミットを削除する
</pre> 

変更しvimで保存した後、

<pre>git add .
git commit --amend
</pre>
で変更をコミット。

これだけではrebaseの処理は終わっておらず、
<pre>git rebase --continue</pre>
で終了させます。

これで完了です。

&nbsp;","post_title": "Git 間違えてpushしてしまった時のrebase","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:46:03","post_modified_gmt": "2016-07-22 03:46:03","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/02/01/340-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 346,"post_author": 1,"post_date": "2016-02-01 12:05:27","post_date_gmt": "2016-02-01 03:05:27","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（<strong>HEAD~3</strong>だと直前の3つのコミットという感じ。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
削除したいコミットの一行を削除し保存する。

そして
<pre>$ git push -f origin [ブランチ]</pre>
でpushする。

これでgit logとかで確認すると綺麗になくなっています。

[iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=FFF3FE&IS2=1&npa=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=qf_sp_asin_til&asins=4798143669\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"][/iframe]
","post_title": "Git 間違えてpushしてしまった時に、pushを取り消す方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:05:27","post_modified_gmt": "2016-02-01 03:05:27","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/02/01/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 347,"post_author": 1,"post_date": "2016-02-01 12:24:13","post_date_gmt": "2016-02-01 03:24:13","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（<strong>HEAD~3</strong>だと直前の3つのコミットという感じ。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
削除したいコミットの一行を削除し保存する。

そして
<pre>$ git push -f origin [ブランチ]</pre>
でpushする。

これでgit logとかで確認すると綺麗になくなっています。

<script type=\"text/javascript\"><!--
amazon_ad_tag = \"kumapoyo-22\"; amazon_ad_width = \"120\"; amazon_ad_height = \"600\"; amazon_ad_link_target = \"new\"; amazon_ad_border = \"hide\"; amazon_color_background = \"FFE7FB\"; amazon_ad_categories = \"ae\";//--></script>
<script type=\"text/javascript\" src=\"http://ir-jp.amazon-adsystem.com/s/ads.js\"></script>","post_title": "Git 間違えてpushしてしまった時に、pushを取り消す方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:24:13","post_modified_gmt": "2016-02-01 03:24:13","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/02/01/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 348,"post_author": 1,"post_date": "2016-02-01 12:26:51","post_date_gmt": "2016-02-01 03:26:51","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（<strong>HEAD~3</strong>だと直前の3つのコミットという感じ。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
削除したいコミットの一行を削除し保存する。

そして
<pre>$ git push -f origin [ブランチ]</pre>
でpushする。

これでgit logとかで確認すると綺麗になくなっています。
","post_title": "Git 間違えてpushしてしまった時に、pushを取り消す方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:26:51","post_modified_gmt": "2016-02-01 03:26:51","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/02/01/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 349,"post_author": 1,"post_date": "2016-02-01 12:32:45","post_date_gmt": "2016-02-01 03:32:45","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（<strong>HEAD~3</strong>だと直前の3つのコミットという感じ。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
削除したいコミットの一行を削除し保存する。

そして
<pre>$ git push -f origin [ブランチ]</pre>
でpushする。

これでgit logとかで確認すると綺麗になくなっています。


<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>
","post_title": "Git 間違えてpushしてしまった時に、pushを取り消す方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:32:45","post_modified_gmt": "2016-02-01 03:32:45","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/02/01/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 350,"post_author": 1,"post_date": "2016-03-02 22:10:01","post_date_gmt": "2016-03-02 13:10:01","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>★ コードカラーの例</strong>
$ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
$ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
$ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>★ エイリアスの例</strong>
$ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
$ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
$ git checkoutコマンドの省略。
<pre>$ git config --global alias.co checkout</pre>
$ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。

<pre></pre>



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-03-02 22:10:01","post_modified_gmt": "2016-03-02 13:10:01","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/02/01/333-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 351,"post_author": 1,"post_date": "2016-02-01 12:34:21","post_date_gmt": "2016-02-01 03:34:21","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>★ コードカラーの例</strong>
$ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
$ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
$ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>★ エイリアスの例</strong>
$ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
$ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
$ git checkoutコマンドの省略。
<pre>$ $ git config --global alias.co checkout</pre>
$ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:34:21","post_modified_gmt": "2016-02-01 03:34:21","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/02/01/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 352,"post_author": 1,"post_date": "2016-02-01 12:34:49","post_date_gmt": "2016-02-01 03:34:49","post_content": "push, pull時に毎回ユーザー名とパスワードきかれるので、GitHubにSSH接続して無駄な作業をなくす。

まず公開鍵と秘密鍵を作成します。
★ 秘密鍵 <strong>id_rsa</strong>
★ 公開鍵 <strong>id_rsa.pub</strong>

☆ 鍵を入れるフォルダに移動
<pre>$ cd ~/.ssh</pre>

☆ 鍵の生成
<pre>$ ssh-keygen -t rsa</pre>

これで２つの鍵が作成される。


公開鍵をGitHubに登録する。
<a href=\"https://github.com/settings/ssh\" target=\"_blank\">GitHubのssh設定画面</a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" rel=\"attachment wp-att-327\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" alt=\"githubの画面画像\" width=\"998\" height=\"489\" class=\"aligncenter size-full wp-image-327\" /></a>
titleは適当に、
<pre>$ pbcopy < ~/.ssh/id_rsa.pub</pre>
で公開鍵をクリップボードにコピー。
それをそのままkeyの入力欄にペーストして、AddKeyボタンで登録完了。

公開鍵と同時に作成した秘密鍵、これを持っているデバイスのみSSH接続が出来まっす。


<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "GitHub SSHキー作成メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "325-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:34:49","post_modified_gmt": "2016-02-01 03:34:49","post_content_filtered": "","post_parent": 325,"guid": "http://kumao-no-mori.com/2016/02/01/325-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 353,"post_author": 1,"post_date": "2016-02-01 12:35:21","post_date_gmt": "2016-02-01 03:35:21","post_content": "下にスクロールすると表示、上にスクロールすると非表示になるヘッダーを作ったので、ここに置いときます。
https://gist.github.com/naokidoguchi/88ec4e94da97770aee2b

CSS3のtransitionでスムーズに
https://gist.github.com/naokidoguchi/64788b39ff2b18af4e80



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "jQuery スクロールすると表示非表示するヘッダー","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "322-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:35:21","post_modified_gmt": "2016-02-01 03:35:21","post_content_filtered": "","post_parent": 322,"guid": "http://kumao-no-mori.com/2016/02/01/322-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 354,"post_author": 1,"post_date": "2016-02-01 12:35:45","post_date_gmt": "2016-02-01 03:35:45","post_content": "<pre class=\"lang:css decode:true \" >-webkit-tap-highlight-color:rgba(0,0,0,0);</pre> 
これを入れればデフォルトでなるタップ時の黒い影を消せる。
毎回わすれてしまうので。。

逆にオリジナルに色付けたいときは、rgbaの値を変えれば良い。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "CSS スマホでタップすると出来る黒い影を消す","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "316-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:35:45","post_modified_gmt": "2016-02-01 03:35:45","post_content_filtered": "","post_parent": 316,"guid": "http://kumao-no-mori.com/2016/02/01/316-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 355,"post_author": 1,"post_date": "2016-02-01 12:36:41","post_date_gmt": "2016-02-01 03:36:41","post_content": "いろんなプロジェクトを同時進行している私は、とにかくブランチを切り替えまくります。
変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
あとAパターン、Bパターンと作成しておくのにも便利ですよね。
そのスタッシュについて一通りをメモ。

★ stashする
<strong>$ git stash</strong>

★ コメントを付けてstashする
<strong>$ git stash save \"自由にコメント\"</strong>

★ stashリストを確認
<strong>$ git stash list</strong>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<strong>$ git stash show \"stash名\"</strong>


★ stashしたものを取り出す
<strong>$ git stash apply stash@{0}</strong>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<strong>$ git stash drop stash@{0}</strong>

★ stashしたものを取り出した際に削除も同時に行う
<strong>$ git stash pop stash@{0}</strong>



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:36:41","post_modified_gmt": "2016-02-01 03:36:41","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/2016/02/01/311-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 356,"post_author": 1,"post_date": "2016-02-01 12:37:16","post_date_gmt": "2016-02-01 03:37:16","post_content": "vimの起動時に実行しておきたいコマンドは.vimrcに記述する。
ずらずらとコマンドを一行ずつ書いて行けば良い。

初心者の私は取りあえず
<strong>syntax on</strong> コードカラーを付ける
<strong>set number</strong> コード行番号を表示
の２つで満足してますが、その他に設定しておくと便利そうなのをメモしてみます↓
<strong>set tabstop=4</strong> インデントをスペース4つ分
<strong>set smartindent</strong> 自動インデント
<strong>set title</strong> 編集中のタイトルをセット


.vimrcでは<strong> \" </strong>(ダブルクオテーション)でコメントアウト。

<strong>[v]</strong> ビジュアルモード
<strong>[i]</strong> 挿入モード
<strong>[ESC]</strong> コマンドモード
<strong>[u]</strong> 前の状態に戻したい場合
<strong>[Ctrl]+[r]</strong> やり直したい場合
<strong>[dd]</strong> 一行削除
<strong>[番号]</strong> 行きたい行番号入力で飛べる
<strong>[gg]</strong> 最初の行へ 
<strong>[G]</strong> 画面上最後の行へ
<strong>[H]</strong> 画面上最初の行へ
<strong>[M]</strong> 画面上真ん中の行へ
<strong>[L]</strong> 画面上最後の行へ
<strong>[*]</strong> カーソル下の単語検索
<strong>[yy]</strong> 今いる行をコピー
<strong>[p]</strong> カーソルの箇所にペースト



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "vim のカスタマイズとか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "307-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:37:16","post_modified_gmt": "2016-02-01 03:37:16","post_content_filtered": "","post_parent": 307,"guid": "http://kumao-no-mori.com/2016/02/01/307-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 357,"post_author": 1,"post_date": "2016-02-01 12:37:45","post_date_gmt": "2016-02-01 03:37:45","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用していくにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452666164415.jpg\" rel=\"attachment wp-att-298\"><img class=\"aligncenter size-medium_large wp-image-298\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom: 0;\">
	<li style=\"list-style-position: inside;\">Microdata</li>
	<li style=\"list-style-position: inside;\">RDFa</li>
	<li style=\"list-style-position: inside;\">JSON-LD</li>
	<li style=\"list-style: none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>
そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

https://gist.github.com/naokidoguchi/6be5c6c35f5a251e425c

こんな感じに書いてみたのですが、ぱっと見で読めると思います。
パンくずリストはこういうことです。
<strong> カテゴリー > プロダクト > 商品1 </strong>


コードを上から見ていきます↓

★ JSONオブジェクト
<strong>\"@context\": \"http://schema.org\"</strong>
schema.orgについてこれから記述していく事を宣言。

<strong>\"@type\": \"BreadcrumbList\"</strong>
schema.orgで定義されている「型」を記述。
今回はパンくずなので、パンくずを扱うBreadcrumbListを使用。
他の型については、schema.org公式サイトで確認してください。
<a href=\"http://schema.org/docs/schemas.html\" target=\"_blank\">http://schema.org/docs/schemas.html</a>

★ プロパティ
<strong>\"position\": 1</strong>
パンくずリストの順番。

<strong>\"@id\": \"https://example.com/categories\"</strong>
そのパンくずで示されるページのURL。

<strong>\"name\": \"プロダクト\"</strong>
そのパンくずリストのラベル。


これで以上の情報を検索エンジンに伝えられます。

JSON-LDを記述し終わったら必ずこちらでチェック↓
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1.png\" rel=\"attachment wp-att-305\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1-768x377.png\" alt=\"image_schema\" width=\"660\" height=\"324\" class=\"aligncenter size-medium_large wp-image-305\" /></a>

このように問題が出なければ大丈夫です。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:37:45","post_modified_gmt": "2016-02-01 03:37:45","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/2016/02/01/286-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 358,"post_author": 1,"post_date": "2016-02-01 12:38:14","post_date_gmt": "2016-02-01 03:38:14","post_content": "border-radiusをボーダーではなく要素にかけるとき、効かないなってなったら
<pre>overflow: hidden;</pre>
を足せば良い。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "CSS border-radiusについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "280-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:38:14","post_modified_gmt": "2016-02-01 03:38:14","post_content_filtered": "","post_parent": 280,"guid": "http://kumao-no-mori.com/2016/02/01/280-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 359,"post_author": 1,"post_date": "2016-02-01 12:39:13","post_date_gmt": "2016-02-01 03:39:13","post_content": "いつもgitはGUIを使ってcommitとかpushとかしてたのですが、pcのバージョン関係で突然使えなくなり、久々にコマンドラインでpushしたときにはまった事をメモメモ。

まず、私は間違えて
<pre class=\"lang:sh decode:true \" >git push [リモート先ブランチ]</pre> 
と記述してしまいました。

すると
<em>fatal: You didn\'t specify any refspecs to push, and push.default is \"nothing\".</em>
というエラーがでました。

それで エラー内のrefspecsてなんだと調べたら、[リモート先ブランチ]の部分のことで、そこが間違ってますよということみたいでした。

でもそこはあっているのでなんでかなとおもったら
<strong>origin</strong>
これ入れ忘れてました。

originとは、調べたところ起源、根源とかいう意味みたいですね。

そして正しくは
<pre class=\"lang:sh decode:true \" >git push origin [リモート先ブランチ]</pre>

これで無事pushできました。

ちなみに、refspecsは複数でも大丈夫らしいです。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git push時のエラー","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "275-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:39:13","post_modified_gmt": "2016-02-01 03:39:13","post_content_filtered": "","post_parent": 275,"guid": "http://kumao-no-mori.com/2016/02/01/275-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 360,"post_author": 1,"post_date": "2016-02-01 12:39:37","post_date_gmt": "2016-02-01 03:39:37","post_content": " <pre class=\"lang:sh decode:true \" >git branch --contains</pre> 
このコマンドで現在のブランチを表示出来る。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git 現在のブランチ名を表示","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "273-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:39:37","post_modified_gmt": "2016-02-01 03:39:37","post_content_filtered": "","post_parent": 273,"guid": "http://kumao-no-mori.com/2016/02/01/273-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 361,"post_author": 1,"post_date": "2016-02-01 12:40:06","post_date_gmt": "2016-02-01 03:40:06","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong style=\"text-align: center;\">☆cookieの作成☆</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。

<strong>★expires</strong>
保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
デフォルトはfalse。

<strong>☆cookieの取得☆</strong>
<pre class=\"lang:js decode:true\">$.cookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除☆</strong>
<pre class=\"lang:js decode:true \">$.removeCookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。

&nbsp;


テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>

これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:40:06","post_modified_gmt": "2016-02-01 03:40:06","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/2016/02/01/257-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 362,"post_author": 1,"post_date": "2016-02-01 12:40:41","post_date_gmt": "2016-02-01 03:40:41","post_content": "あけましておめでとうございます。
今年は誰でも利用できるサイトを一人で作り上げることをここに誓います。
あとこのブログって記事が読みにくいので、どうにかしようと思います。

FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。

<strong>☆コントローラー(Controller)</strong>
webブラウザからのリクエストを最初に受け取るのが、PHPファイルでドキュメントルート直下の\"index.php\"。これを「<strong>フロントコントローラー</strong>」と呼ぶ。
受け取ったリクエストを元に、どういった処理を行うかを決定し、必要に応じてモデルを呼び出しながら処理を行い、最終的に必要なビューを呼び出してブラウザに返す為のデータを生成するといったロジックは全てこのコントローラーに記述する。

＊コントローラーは大きく分けて4つある ↓

・Controllerクラスを拡張して作成する通常の<strong>「コントローラー」</strong>
・Controller_Templateを拡張して作成する<strong>「テンプレートコントローラー」</strong>
・Web APIとしてRESTフルなリクエストに対してXMLやJSON形式のデータ送信の為のController_Restを拡張する<strong>「Restコントローラー」</strong>
・テンプレートコントローラーとRestコントローラーの両方の機能をもつ<strong>「Hybridコントローラー」</strong>

(RESTフルってんだよ!って思って調べてみたらWebAPIの実装方式でRESTというものとSOAPというものがあるみたいです。それでRESTの原則に従って実装されているシステムのことを、\"RESTful\"と呼ぶらしいです。これは後日WebAPIについて勉強しないと...)

<strong>☆ビュー(View)</strong>
HTMLを記述したPHPファイル。あのテンプレートファイル(.tpl)のことですね。私はフロントエンドエンジニアなのでその私がいつも触ってるやつです。

<strong>☆モデル(Model)</strong>
データを取得し、操作し、あるいはそれを消去したい場合、その処理は常にモデルによって行われるべきです。
コントローラにはSQLクエリを一切記述せず、モデル側にそれを記述し、コントローラではモデルが実行したクエリを呼び出す、というような処理が出来ます。
この方法によって、データベースを変更した時もコントローラを書き換える必要はなく、データベースに影響を及ぼすモデルのみを書き換えるだけですむのです。

Fuel において、<strong>モデルの本質は単なるクラス</strong>です。つまり<strong>ライブラリ以外のなにものでもありません</strong>。 ただし Model_ 接頭辞が付いているので、他のクラスと見分けを付けることが容易になります。モデルを有効に使うためには、他のクラスを必要とするでしょう。

↑とってもわかりやすいのでFuelPHPの公式サイトからそのまま抜粋してしまいました。
モデルはコントローラーで呼び出して使うんですね。

＊そしてモデルを実装するには
<strong>
・Modelクラスを継承する。</strong>
FuelPHPで提供されているModelクラスは実際にはプロパティやメソッドが全く定義されていないクラスなので、データベースへの問い合わせ等はDBクラスを呼び出すなどして、クエリを生成するコードをモデル内に直接記述する形になる。

<strong>・Model_Crudクラスを継承する。</strong>
あらかじめCRUD(データの作成、取得、更新、削除)用のメソッドが用意されたクラス。このクラスを継承してモデルを実装すれば、単純なクエリであれば定義済みのメソッドを呼び出すだけで実装が済んだりする。

<strong>・\\Orm\\Modelクラスを継承する。</strong>
FuelPHPに同梱されるORM(Object Relation Mapping)パッケージで提供されているクラス。
これはデータベースのテーブル間のリレーション(関係、関連という意味)をあらかじめクラス内に設定する事で、関連テーブルのデータを同時に取得・変更する事が出来る。

という方法があります。


そして、これらの☆の三つがMVCというものです。
model-view-controllerでMVC。

【ざっくり言うと】
処理の中核を担うのが「Model」
表示、出力を司るのが「View」
入力を受け取ってその内容に応じてModelとViewを制御するのが「controller」



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "251-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 12:40:41","post_modified_gmt": "2016-02-01 03:40:41","post_content_filtered": "","post_parent": 251,"guid": "http://kumao-no-mori.com/2016/02/01/251-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 363,"post_author": 1,"post_date": "2016-02-01 13:40:00","post_date_gmt": "2016-02-01 04:40:00","post_content": "2015年最後の投稿になります。
Sassあんまり使わないからずっと初心者のままで嫌になります。(←勉強しろ)
ということで今日はSassについて覚えた事をメモメモ。

Sassの関数１
★ <strong>abs()について</strong>
この関数は、引数の絶対値を返してくれる関数です。
（絶対数とはその数が0からどれくらい離れているかを表す値。例えばその値が-15だった場合、0から15離れているので、15の正数が絶対値。）
 
<pre class=\"lang:sass decode:true \" >$hoge: -15px;

// このように同じ数値でプラスかマイナスかの違いの場合に便利。
section{
    margin-left: $hoge;
      .item {
          float: left;
          width: 100px;
          margin-left: abs($hoge);
      }
}</pre> 


Sassの関数２
★ <strong>round()について</strong>
この関数は、小数点以下の数値を四捨五入してくれる。
 
<pre class=\"lang:sass decode:true \" >$hoge: 7px;

.piyo {
    width: round($hoge / 3);
}

// 結果は2px</pre> 

☆ 四捨五入の設定 【ceil() , floor()】
round()では四捨五入しましたが、小数点以下を全て切り上げたいときはround()の代わりに\"ceil()\"を使用する。
逆に小数点以下を全て切り捨てたい場合は\"floor()\"を代わりに使用する。

Sassの関数３
★ <strong>lighten()について</strong>
この関数は、指定した色を明るくしてくれる。 
<pre class=\"lang:sass decode:true \" >// 黒(#000)を30%明るくする
body {
    background: lighten(#000, 30%);
}
// 結果は#4d4d4d(濃いグレー)になる</pre> 

☆ 暗くする関数 【darken()】
逆に暗くしたい場合はlightenの代わりにdarken()を使えば暗く出来ます。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Sass 関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "246-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 13:40:00","post_modified_gmt": "2016-02-01 04:40:00","post_content_filtered": "","post_parent": 246,"guid": "http://kumao-no-mori.com/2016/02/01/246-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 364,"post_author": 1,"post_date": "2016-02-01 21:25:46","post_date_gmt": "2016-02-01 12:25:46","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>★ コードカラーの例</strong>
$ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
$ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
$ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>★ エイリアスの例</strong>
$ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
$ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
$ git checkoutコマンドの省略。
<pre>$ git config --global alias.co checkout</pre>
$ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-01 21:25:46","post_modified_gmt": "2016-02-01 12:25:46","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/02/01/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 365,"post_author": 1,"post_date": "2016-02-02 15:57:39","post_date_gmt": "2016-02-02 06:57:39","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもこれは使えます。

&nbsp;
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>

私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;
&nbsp;


<strong>2. npmを使ってESLintをインストール</strong>

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;
&nbsp;


<strong>3. ESLintのファイル作成</strong>

<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。
&nbsp;

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;font-size: 12px;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;font-size: 12px;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;font-size: 12px;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。
&nbsp;
&nbsp;


★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

&nbsp;","post_title": "ESLint について","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "eslint-%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=365","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 366,"post_author": 1,"post_date": "2016-02-02 14:38:20","post_date_gmt": "2016-02-02 05:38:20","post_content": "JavaScriptの構文チェックツール<strong>ESLint</strong>についてメモメモ。
<strong>vim</strong>や<strong>SublimeText</strong>や<strong>Atom</strong>などのテキストエディタでもプラグインをいれればエラー表示ができるので、フロントもバックもみんな使うときっと幸せ。(SublimeTextのプラグインについては後述)

<strong>1. まずESLintを扱う為にnpm、node.jsをインストール</strong>
Node.jsのパッケージ管理ツールnpmのインストール
<pre>$ npm install -g eslint</pre>
私はバージョンが古くて手こずったので、最新にする方法も一応
<pre>$ npm update -g npm</pre>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 14:38:20","post_modified_gmt": "2016-02-02 05:38:20","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 367,"post_author": 1,"post_date": "2016-02-02 14:54:57","post_date_gmt": "2016-02-02 05:54:57","post_content": "JavaScriptの構文チェックツール<strong>ESLint</strong>についてメモメモ。
<strong>vim</strong>や<strong>SublimeText</strong>や<strong>Atom</strong>などのテキストエディタでもプラグインをいれればエラー表示ができるので、フロントもバックもみんな使うときっと幸せ。(SublimeTextのプラグインについては後述)

<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。
★node.jsはnを使ってバージョンアップ
nをインストール。
<pre>$ npm install -g n</pre>
最新版をインストール。
<pre>$ n latest</pre>

<strong>2. npmを使ってESLintをインストール</strong>
<pre>$ npm install -g eslint</pre>
インストールされているか確認。
<pre>$ eslint -v</pre>

<strong>3. ESLintのファイル作成</strong>
<pre>$ eslint --init</pre>
これをやるとどういうルールを作るか質問してくる。
","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 14:54:57","post_modified_gmt": "2016-02-02 05:54:57","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 368,"post_author": 1,"post_date": "2016-02-02 15:32:55","post_date_gmt": "2016-02-02 06:32:55","post_content": "JavaScriptの構文チェックツール<strong>ESLint</strong>についてメモメモ。
<strong>vim</strong>や<strong>SublimeText</strong>や<strong>Atom</strong>などのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。


<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre>$ npm install -g n</pre>

最新版をインストール。
<pre>$ n latest</pre>


<strong>2. npmを使ってESLintをインストール</strong>

<pre>$ npm install -g eslint</pre>


インストールされているか確認。
<pre>$ eslint -v</pre>


<strong>3. ESLintのファイル作成</strong>

<pre>$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre>
{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
\"semi\" -> 半角
\"quotes\" -> 引用符

0 - オフ
1 - 警告
2 - エラー

\"always\" -> すべてに対して
\"double\" -> ダブルクオート

ってことだと思われます。(汗)
あと、
<pre>
{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:32:55","post_modified_gmt": "2016-02-02 06:32:55","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 369,"post_author": 1,"post_date": "2016-02-02 15:34:07","post_date_gmt": "2016-02-02 06:34:07","post_content": "JavaScriptの構文チェックツール<strong>ESLint</strong>についてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。


<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre>$ npm install -g n</pre>


最新版をインストール。
<pre>$ n latest</pre>


<strong>2. npmを使ってESLintをインストール</strong>

<pre>$ npm install -g eslint</pre>


インストールされているか確認。
<pre>$ eslint -v</pre>


<strong>3. ESLintのファイル作成</strong>

<pre>$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre>
{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
\"semi\" -> 半角
\"quotes\" -> 引用符

0 - オフ
1 - 警告
2 - エラー

\"always\" -> すべてに対して
\"double\" -> ダブルクオート

ってことだと思われます。(汗)
あと、
<pre>
{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:34:07","post_modified_gmt": "2016-02-02 06:34:07","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 370,"post_author": 1,"post_date": "2016-02-02 15:36:02","post_date_gmt": "2016-02-02 06:36:02","post_content": "JavaScriptの構文チェックツール<strong>ESLint</strong>についてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。

&nbsp;

&nbsp;

<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
最新版をインストール。
<pre class=\"\">$ n latest</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>
<pre class=\"\">$ npm install -g eslint</pre>
インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符

0 - オフ
1 - 警告
2 - エラー

\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート

ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:36:02","post_modified_gmt": "2016-02-02 06:36:02","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 371,"post_author": 1,"post_date": "2016-02-02 15:36:29","post_date_gmt": "2016-02-02 06:36:29","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。

&nbsp;

&nbsp;

<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
最新版をインストール。
<pre class=\"\">$ n latest</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>
<pre class=\"\">$ npm install -g eslint</pre>
インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符

0 - オフ
1 - 警告
2 - エラー

\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート

ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:36:29","post_modified_gmt": "2016-02-02 06:36:29","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 372,"post_author": 1,"post_date": "2016-02-02 15:38:16","post_date_gmt": "2016-02-02 06:38:16","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（<strong>HEAD~3</strong>だと直前の3つのコミットという感じ。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
削除したいコミットの一行を削除し保存する。

そして
<pre>$ git push -f origin [ブランチ]</pre>
でpushする。

これでgit logとかで確認すると綺麗になくなっています。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git 間違えてpushしてしまった時に、pushを取り消す方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:38:16","post_modified_gmt": "2016-02-02 06:38:16","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/02/02/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 375,"post_author": 1,"post_date": "2016-02-02 15:40:05","post_date_gmt": "2016-02-02 06:40:05","post_content": "","post_title": "eslint2","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "eslint2-2","to_ping": "","pinged": "","post_modified": "2016-02-02 15:40:05","post_modified_gmt": "2016-02-02 06:40:05","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 376,"post_author": 1,"post_date": "2016-02-02 15:40:09","post_date_gmt": "2016-02-02 06:40:09","post_content": "","post_title": "eslint1","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "eslint1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:40:09","post_modified_gmt": "2016-02-02 06:40:09","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 377,"post_author": 1,"post_date": "2016-02-02 15:41:43","post_date_gmt": "2016-02-02 06:41:43","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。


&nbsp;

&nbsp;

<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
最新版をインストール。
<pre class=\"\">$ n latest</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>
<pre class=\"\">$ npm install -g eslint</pre>
インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符

0 - オフ
1 - 警告
2 - エラー

\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート

ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。



★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" class=\"aligncenter size-full wp-image-376\" /></a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" class=\"aligncenter size-full wp-image-375\" /></a>


<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:41:43","post_modified_gmt": "2016-02-02 06:41:43","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 378,"post_author": 1,"post_date": "2016-02-02 15:42:05","post_date_gmt": "2016-02-02 06:42:05","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。
&nbsp;

<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
最新版をインストール。
<pre class=\"\">$ n latest</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>
<pre class=\"\">$ npm install -g eslint</pre>
インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符

0 - オフ
1 - 警告
2 - エラー

\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート

ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。



★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" class=\"aligncenter size-full wp-image-376\" /></a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" class=\"aligncenter size-full wp-image-375\" /></a>


<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:42:05","post_modified_gmt": "2016-02-02 06:42:05","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 379,"post_author": 1,"post_date": "2016-02-02 15:44:51","post_date_gmt": "2016-02-02 06:44:51","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストール。
<pre class=\"\">$ n latest</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>

&nbsp;
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<strong>\"semi\" -&gt; 半角</strong>
<strong> \"quotes\" -&gt; 引用符</strong>

<strong>0 - オフ</strong>
<strong> 1 - 警告</strong>
<strong> 2 - エラー</strong>

<strong>\"always\" -&gt; すべてに対して</strong>
<strong> \"double\" -&gt; ダブルクオート</strong>

ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。

★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:44:51","post_modified_gmt": "2016-02-02 06:44:51","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 380,"post_author": 1,"post_date": "2016-02-02 15:46:10","post_date_gmt": "2016-02-02 06:46:10","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。
&nbsp;

<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストール。
<pre class=\"\">$ n latest</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>

&nbsp;
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>

&nbsp;
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。

&nbsp;

&nbsp;

★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:46:10","post_modified_gmt": "2016-02-02 06:46:10","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 381,"post_author": 1,"post_date": "2016-02-02 15:48:40","post_date_gmt": "2016-02-02 06:48:40","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。
&nbsp;

<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストール。
<pre class=\"\">$ n latest</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>

&nbsp;

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>

&nbsp;
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。

&nbsp;

&nbsp;

★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:48:40","post_modified_gmt": "2016-02-02 06:48:40","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 382,"post_author": 1,"post_date": "2016-02-02 15:51:00","post_date_gmt": "2016-02-02 06:51:00","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

&nbsp;

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>

&nbsp;

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>

&nbsp;
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。

&nbsp;

&nbsp;

★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:51:00","post_modified_gmt": "2016-02-02 06:51:00","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 383,"post_author": 1,"post_date": "2016-02-02 15:51:20","post_date_gmt": "2016-02-02 06:51:20","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。

&nbsp;
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>
私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

&nbsp;

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;

&nbsp;

<strong>2. npmを使ってESLintをインストール</strong>

&nbsp;

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

&nbsp;

<strong>3. ESLintのファイル作成</strong>

&nbsp;
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。

&nbsp;

&nbsp;

★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:51:20","post_modified_gmt": "2016-02-02 06:51:20","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 384,"post_author": 1,"post_date": "2016-02-02 15:53:14","post_date_gmt": "2016-02-02 06:53:14","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。

&nbsp;
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>

私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;


<strong>2. npmを使ってESLintをインストール</strong>

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;

<strong>3. ESLintのファイル作成</strong>

&nbsp;
<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。

&nbsp;

&nbsp;

★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:53:14","post_modified_gmt": "2016-02-02 06:53:14","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 385,"post_author": 1,"post_date": "2016-02-02 15:53:58","post_date_gmt": "2016-02-02 06:53:58","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。

&nbsp;
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>

私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;



<strong>2. npmを使ってESLintをインストール</strong>

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;



<strong>3. ESLintのファイル作成</strong>

<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。

&nbsp;

&nbsp;

★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:53:58","post_modified_gmt": "2016-02-02 06:53:58","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 386,"post_author": 1,"post_date": "2016-02-02 15:55:15","post_date_gmt": "2016-02-02 06:55:15","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。

&nbsp;
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>

私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;
&nbsp;


<strong>2. npmを使ってESLintをインストール</strong>

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;
&nbsp;


<strong>3. ESLintのファイル作成</strong>

<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。
&nbsp;

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。
&nbsp;
&nbsp;


★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:55:15","post_modified_gmt": "2016-02-02 06:55:15","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 387,"post_author": 1,"post_date": "2016-02-02 15:56:45","post_date_gmt": "2016-02-02 06:56:45","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使うときっと幸せ。

&nbsp;
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>

私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;
&nbsp;


<strong>2. npmを使ってESLintをインストール</strong>

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;
&nbsp;


<strong>3. ESLintのファイル作成</strong>

<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。
&nbsp;

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;font-size: 12px;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;font-size: 12px;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;font-size: 12px;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。
&nbsp;
&nbsp;


★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-02 15:56:45","post_modified_gmt": "2016-02-02 06:56:45","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/02/02/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 388,"post_author": 1,"post_date": "2016-02-03 11:03:25","post_date_gmt": "2016-02-03 02:03:25","post_content": "フェッチでリポジトリのものを取り出す。
<pre>git fetch
</pre>
&nbsp;&nbsp;
リモートブランチ一覧表示。
<pre>git branch -a
</pre>
&nbsp;&nbsp;
リモートブランチからローカルブランチ名を指定してローカルに持ってくる&amp;チェックアウトする。
引数は[ローカル][リモート]の順。
<pre>git checkout -b feature/branch_1 origin/branch_1
</pre>

&nbsp;","post_title": "Git リモートブランチからローカルブランチを作成","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-%e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%83%96%e3%83%a9%e3%83%b3%e3%83%81%e3%81%8b%e3%82%89%e3%83%ad%e3%83%bc%e3%82%ab%e3%83%ab%e3%83%96%e3%83%a9%e3%83%b3%e3%83%81%e3%82%92%e4%bd%9c%e6%88%90","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:18","post_modified_gmt": "2016-09-29 09:57:18","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=388","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 389,"post_author": 1,"post_date": "2016-02-03 10:51:02","post_date_gmt": "2016-02-03 01:51:02","post_content": "フェッチでリポジトリのものを取り出す。
<pre>
$ git fetch
</pre>


リモートブランチ一覧表示。
<pre>
$ git branch -a
</pre>


リモートブランチからローカルブランチ名を指定してローカルに持ってくる&チェックアウトする。
引数は[ローカル][リモート]の順。
<pre>
$ git checkout -b feature/branch_1 origin/branch_1
</pre>","post_title": "Git リモートブランチからローカルブランチを作成","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "388-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-03 10:51:02","post_modified_gmt": "2016-02-03 01:51:02","post_content_filtered": "","post_parent": 388,"guid": "http://kumao-no-mori.com/2016/02/03/388-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 390,"post_author": 1,"post_date": "2016-02-03 11:03:25","post_date_gmt": "2016-02-03 02:03:25","post_content": "フェッチでリポジトリのものを取り出す。
<pre>
$ git fetch
</pre>


リモートブランチ一覧表示。
<pre>
$ git branch -a
</pre>


リモートブランチからローカルブランチ名を指定してローカルに持ってくる&チェックアウトする。
引数は[ローカル][リモート]の順。
<pre>
$ git checkout -b feature/branch_1 origin/branch_1
</pre>



<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "Git リモートブランチからローカルブランチを作成","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "388-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-03 11:03:25","post_modified_gmt": "2016-02-03 02:03:25","post_content_filtered": "","post_parent": 388,"guid": "http://kumao-no-mori.com/2016/02/03/388-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 391,"post_author": 1,"post_date": "2016-02-03 11:04:04","post_date_gmt": "2016-02-03 02:04:04","post_content": "フェッチでリポジトリのものを取り出す。
<pre>
$ git fetch
</pre>
<br>
<br>
リモートブランチ一覧表示。
<pre>
$ git branch -a
</pre>
<br>
<br>
リモートブランチからローカルブランチ名を指定してローカルに持ってくる&チェックアウトする。
引数は[ローカル][リモート]の順。
<pre>
$ git checkout -b feature/branch_1 origin/branch_1
</pre>
<br>
<br>

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "Git リモートブランチからローカルブランチを作成","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "388-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-03 11:04:04","post_modified_gmt": "2016-02-03 02:04:04","post_content_filtered": "","post_parent": 388,"guid": "http://kumao-no-mori.com/2016/02/03/388-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 392,"post_author": 1,"post_date": "2016-02-03 11:05:30","post_date_gmt": "2016-02-03 02:05:30","post_content": "フェッチでリポジトリのものを取り出す。
<pre>$ git fetch
</pre>
&nbsp;&nbsp;
リモートブランチ一覧表示。
<pre>$ git branch -a
</pre>
&nbsp;&nbsp;
リモートブランチからローカルブランチ名を指定してローカルに持ってくる&amp;チェックアウトする。
引数は[ローカル][リモート]の順。
<pre>$ git checkout -b feature/branch_1 origin/branch_1
</pre>
&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "Git リモートブランチからローカルブランチを作成","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "388-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-03 11:05:30","post_modified_gmt": "2016-02-03 02:05:30","post_content_filtered": "","post_parent": 388,"guid": "http://kumao-no-mori.com/2016/02/03/388-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 393,"post_author": 1,"post_date": "2016-07-22 12:55:22","post_date_gmt": "2016-07-22 03:55:22","post_content": "変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
あとAパターン、Bパターンと作成しておくのにも便利ですよね。
そのスタッシュについて一通りをメモ。

★ stashする
<pre>git stash</pre>

★ コメントを付けてstashする
<pre>git stash save \"自由にコメント\"</pre>

★ stashリストを確認
<pre>git stash list</pre>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<pre>git stash show \"stash名\"</pre>


★ stashしたものを取り出す
<pre>git stash apply stash@{0}</pre>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<pre>git stash drop stash@{0}</pre>

★ stashしたものを取り出した際に削除も同時に行う
<pre>git stash pop stash@{0}</pre>

&nbsp;
","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:55:22","post_modified_gmt": "2016-07-22 03:55:22","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/2016/02/03/311-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 394,"post_author": 1,"post_date": "2016-02-03 11:15:30","post_date_gmt": "2016-02-03 02:15:30","post_content": "いろんなプロジェクトを同時進行している私は、とにかくブランチを切り替えまくります。
変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
あとAパターン、Bパターンと作成しておくのにも便利ですよね。
そのスタッシュについて一通りをメモ。

★ stashする
<pre>$ git stash</pre>

★ コメントを付けてstashする
<pre>$ git stash save \"自由にコメント\"</pre>

★ stashリストを確認
<pre>$ git stash list</pre>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<pre>$ git stash show \"stash名\"</pre>


★ stashしたものを取り出す
<pre>$ git stash apply stash@{0}</pre>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<pre>$ git stash drop stash@{0}</pre>

★ stashしたものを取り出した際に削除も同時に行う
<pre>$ git stash pop stash@{0}</pre>



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-03 11:15:30","post_modified_gmt": "2016-02-03 02:15:30","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/2016/02/03/311-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 397,"post_author": 1,"post_date": "2016-02-04 10:50:27","post_date_gmt": "2016-02-04 01:50:27","post_content": "親要素にcolumn-count: カラム数;を付けるだけで、小要素のカラム数を変更できます。

10個ある要素を2カラムと5カラムに切り替えられるテスト作りました。

&nbsp;
<p data-height=\"500\" data-theme-id=\"22047\" data-slug-hash=\"bExGWa\" data-default-tab=\"result\" data-user=\"kumapoyo\" class=\'codepen\'>See the Pen <a href=\'http://codepen.io/kumapoyo/pen/bExGWa/\'>bExGWa</a> by NaoKidoguchi (<a href=\'http://codepen.io/kumapoyo\'>@kumapoyo</a>) on <a href=\'http://codepen.io\'>CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

","post_title": "CSS3 column-countでカラム数を指定","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "css3-column-count%e3%81%a7%e3%82%ab%e3%83%a9%e3%83%a0%e6%95%b0%e3%82%92%e6%8c%87%e5%ae%9a","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=397","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 398,"post_author": 1,"post_date": "2016-02-03 19:32:59","post_date_gmt": "2016-02-03 10:32:59","post_content": "[[[pen slug-hash=\'BjOaoR\' height=\'300\' ]]]
","post_title": "CSS3","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "397-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-03 19:32:59","post_modified_gmt": "2016-02-03 10:32:59","post_content_filtered": "","post_parent": 397,"guid": "http://kumao-no-mori.com/2016/02/03/397-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 399,"post_author": 1,"post_date": "2016-02-03 19:43:11","post_date_gmt": "2016-02-03 10:43:11","post_content": "http://codepen.io/kumapoyo/post/columncounttest","post_title": "CSS3","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "397-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-03 19:43:11","post_modified_gmt": "2016-02-03 10:43:11","post_content_filtered": "","post_parent": 397,"guid": "http://kumao-no-mori.com/2016/02/03/397-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 402,"post_author": 1,"post_date": "2016-02-04 10:50:27","post_date_gmt": "2016-02-04 01:50:27","post_content": "親要素にcolumn-countを付けるだけで、小要素のカラム数を変更できます。

10個ある要素を2カラムと5カラムに切り替えられるテスト作りました。
<p data-height=\"268\" data-theme-id=\"22047\" data-slug-hash=\"bExGWa\" data-default-tab=\"result\" data-user=\"kumapoyo\" class=\'codepen\'>See the Pen <a href=\'http://codepen.io/kumapoyo/pen/bExGWa/\'>bExGWa</a> by NaoKidoguchi (<a href=\'http://codepen.io/kumapoyo\'>@kumapoyo</a>) on <a href=\'http://codepen.io\'>CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>




<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "CSS3 column-countでカラム数を指定","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "397-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-04 10:50:27","post_modified_gmt": "2016-02-04 01:50:27","post_content_filtered": "","post_parent": 397,"guid": "http://kumao-no-mori.com/2016/02/04/397-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 403,"post_author": 1,"post_date": "2016-02-04 10:50:53","post_date_gmt": "2016-02-04 01:50:53","post_content": "親要素にcolumn-count: カラム数;を付けるだけで、小要素のカラム数を変更できます。

10個ある要素を2カラムと5カラムに切り替えられるテスト作りました。
<p data-height=\"268\" data-theme-id=\"22047\" data-slug-hash=\"bExGWa\" data-default-tab=\"result\" data-user=\"kumapoyo\" class=\'codepen\'>See the Pen <a href=\'http://codepen.io/kumapoyo/pen/bExGWa/\'>bExGWa</a> by NaoKidoguchi (<a href=\'http://codepen.io/kumapoyo\'>@kumapoyo</a>) on <a href=\'http://codepen.io\'>CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>




<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript>&amp;lt;A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;amp;MarketPlace=JP&amp;amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;amp;Operation=NoScript\"&amp;gt;Amazon.co.jp ウィジェット&amp;lt;/A&amp;gt;</noscript>","post_title": "CSS3 column-countでカラム数を指定","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "397-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-04 10:50:53","post_modified_gmt": "2016-02-04 01:50:53","post_content_filtered": "","post_parent": 397,"guid": "http://kumao-no-mori.com/2016/02/04/397-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 405,"post_author": 1,"post_date": "2016-02-04 10:52:37","post_date_gmt": "2016-02-04 01:52:37","post_content": "親要素にcolumn-count: カラム数;を付けるだけで、小要素のカラム数を変更できます。

10個ある要素を2カラムと5カラムに切り替えられるテスト作りました。

&nbsp;
<p data-height=\"500\" data-theme-id=\"22047\" data-slug-hash=\"bExGWa\" data-default-tab=\"result\" data-user=\"kumapoyo\" class=\'codepen\'>See the Pen <a href=\'http://codepen.io/kumapoyo/pen/bExGWa/\'>bExGWa</a> by NaoKidoguchi (<a href=\'http://codepen.io/kumapoyo\'>@kumapoyo</a>) on <a href=\'http://codepen.io\'>CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","post_title": "CSS3 column-countでカラム数を指定","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "397-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-04 10:52:37","post_modified_gmt": "2016-02-04 01:52:37","post_content_filtered": "","post_parent": 397,"guid": "http://kumao-no-mori.com/2016/02/04/397-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 407,"post_author": 1,"post_date": "2016-02-09 14:56:08","post_date_gmt": "2016-02-09 05:56:08","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。</em>
<em>Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsedに代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが返すように指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回<a href=\"http://kumao-no-mori.com/2016/02/12/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b%ef%bc%92/\">「React サンプルを解読してみる２」</a>に書く予定。

&nbsp;","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:18","post_modified_gmt": "2016-09-29 09:57:18","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=407","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 408,"post_author": 1,"post_date": "2016-02-05 13:15:06","post_date_gmt": "2016-02-05 04:15:06","post_content": "","post_title": "react1","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "react1","to_ping": "","pinged": "","post_modified": "2016-02-05 13:15:06","post_modified_gmt": "2016-02-05 04:15:06","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 409,"post_author": 1,"post_date": "2016-02-05 13:23:37","post_date_gmt": "2016-02-05 04:23:37","post_content": "React勉強始めたばかりで初歩の初歩からですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
そのなかの一つ目のbasicからコードを見てみます。

","post_title": "React サンプルを解読してみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-05 13:23:37","post_modified_gmt": "2016-02-05 04:23:37","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/05/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 410,"post_author": 1,"post_date": "2016-02-05 13:31:13","post_date_gmt": "2016-02-05 04:31:13","post_content": "","post_title": "react_basic","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "react_basic","to_ping": "","pinged": "","post_modified": "2016-02-05 13:31:33","post_modified_gmt": "2016-02-05 04:31:33","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 411,"post_author": 1,"post_date": "2016-02-05 13:32:14","post_date_gmt": "2016-02-05 04:32:14","post_content": "React勉強始めたばかりで初歩の初歩からですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
そのなかの一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-05 13:32:14","post_modified_gmt": "2016-02-05 04:32:14","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/05/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 412,"post_author": 1,"post_date": "2016-02-05 13:48:34","post_date_gmt": "2016-02-05 04:48:34","post_content": "React勉強始めたばかりで初歩の初歩からですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
コンポーネントは後述の<strong>Prop</strong>がI/Fとなり、外部のものとやり取りができる。
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-05 13:48:34","post_modified_gmt": "2016-02-05 04:48:34","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/05/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 414,"post_author": 1,"post_date": "2016-02-08 12:28:12","post_date_gmt": "2016-02-08 03:28:12","post_content": "stashを取り込んだらごちゃごちゃしてしまったとか、強制的にリモートに作業内容を合わせてしまいたいという時は、
<pre class=\"\">git reset --hard origin/[リモートブランチ]
</pre>

&nbsp;","post_title": "Git 強制的にリモートと一致させる","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-%e5%bc%b7%e5%88%b6%e7%9a%84%e3%81%ab%e3%83%aa%e3%83%a2%e3%83%bc%e3%83%88%e3%81%ab%e5%90%88%e3%82%8f%e3%81%9b%e3%82%8b","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:18","post_modified_gmt": "2016-09-29 09:57:18","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=414","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 415,"post_author": 1,"post_date": "2016-02-08 12:28:12","post_date_gmt": "2016-02-08 03:28:12","post_content": "stashを取り込んだらごちゃごちゃしてしまったとか、強制的にリモートに作業内容を合わせてしまいたいという時は、
<pre>
git reset --hard origin/[リモートブランチ]
</pre>","post_title": "Git 強制的にリモートと一致させる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "414-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 12:28:12","post_modified_gmt": "2016-02-08 03:28:12","post_content_filtered": "","post_parent": 414,"guid": "http://kumao-no-mori.com/2016/02/08/414-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 417,"post_author": 1,"post_date": "2016-02-08 12:29:39","post_date_gmt": "2016-02-08 03:29:39","post_content": "stashを取り込んだらごちゃごちゃしてしまったとか、強制的にリモートに作業内容を合わせてしまいたいという時は、
<pre>
git reset --hard origin/[リモートブランチ]
</pre>


","post_title": "Git 強制的にリモートと一致させる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "414-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 12:29:39","post_modified_gmt": "2016-02-08 03:29:39","post_content_filtered": "","post_parent": 414,"guid": "http://kumao-no-mori.com/2016/02/08/414-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 418,"post_author": 1,"post_date": "2016-02-08 12:30:09","post_date_gmt": "2016-02-08 03:30:09","post_content": "stashを取り込んだらごちゃごちゃしてしまったとか、強制的にリモートに作業内容を合わせてしまいたいという時は、
<pre>
git reset --hard origin/[リモートブランチ]
</pre>





<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git 強制的にリモートと一致させる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "414-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 12:30:09","post_modified_gmt": "2016-02-08 03:30:09","post_content_filtered": "","post_parent": 414,"guid": "http://kumao-no-mori.com/2016/02/08/414-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 419,"post_author": 1,"post_date": "2016-02-08 12:30:51","post_date_gmt": "2016-02-08 03:30:51","post_content": "親要素にcolumn-count: カラム数;を付けるだけで、小要素のカラム数を変更できます。

10個ある要素を2カラムと5カラムに切り替えられるテスト作りました。

&nbsp;
<p data-height=\"500\" data-theme-id=\"22047\" data-slug-hash=\"bExGWa\" data-default-tab=\"result\" data-user=\"kumapoyo\" class=\'codepen\'>See the Pen <a href=\'http://codepen.io/kumapoyo/pen/bExGWa/\'>bExGWa</a> by NaoKidoguchi (<a href=\'http://codepen.io/kumapoyo\'>@kumapoyo</a>) on <a href=\'http://codepen.io\'>CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>





<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "CSS3 column-countでカラム数を指定","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "397-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 12:30:51","post_modified_gmt": "2016-02-08 03:30:51","post_content_filtered": "","post_parent": 397,"guid": "http://kumao-no-mori.com/2016/02/08/397-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 420,"post_author": 1,"post_date": "2016-02-08 12:51:09","post_date_gmt": "2016-02-08 03:51:09","post_content": "stashを取り込んだらごちゃごちゃしてしまったとか、強制的にリモートに作業内容を合わせてしまいたいという時は、
<pre class=\"\">git reset --hard origin/[リモートブランチ]
</pre>




&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[

// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git 強制的にリモートと一致させる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "414-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 12:51:09","post_modified_gmt": "2016-02-08 03:51:09","post_content_filtered": "","post_parent": 414,"guid": "http://kumao-no-mori.com/2016/02/08/414-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 421,"post_author": 1,"post_date": "2016-02-08 13:11:14","post_date_gmt": "2016-02-08 04:11:14","post_content": "React勉強始めたばかりで初歩の初歩からですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
コンポーネントは後述の<strong>Prop</strong>がI/Fとなり、外部のものとやり取りができる。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 13:11:14","post_modified_gmt": "2016-02-08 04:11:14","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/08/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 422,"post_author": 1,"post_date": "2016-02-08 13:13:41","post_date_gmt": "2016-02-08 04:13:41","post_content": "React勉強始めたばかりで初歩の初歩からですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
コンポーネントは後述の<strong>Prop</strong>がI/Fとなり、外部のものとやり取りができる。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.round","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 13:13:41","post_modified_gmt": "2016-02-08 04:13:41","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/08/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 423,"post_author": 1,"post_date": "2016-02-08 13:17:24","post_date_gmt": "2016-02-08 04:17:24","post_content": "React勉強始めたばかりで初歩の初歩からですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
コンポーネントは後述の<strong>Prop</strong>がI/Fとなり、外部のものとやり取りができる。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
★ this.props.○○○ について","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 13:17:24","post_modified_gmt": "2016-02-08 04:17:24","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/08/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 424,"post_author": 1,"post_date": "2016-02-08 13:32:36","post_date_gmt": "2016-02-08 04:32:36","post_content": "React勉強始めたばかりで初歩の初歩からですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
コンポーネントは後述の<strong>Prop</strong>がI/Fとなり、外部のものとやり取りができる。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ this.props.○○○ について</strong>
Propはコンポーネントの属性として定義し、それをthis.props.○○○というように参照する。","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-08 13:32:36","post_modified_gmt": "2016-02-08 04:32:36","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/08/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 426,"post_author": 1,"post_date": "2016-02-09 13:35:50","post_date_gmt": "2016-02-09 04:35:50","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
コンポーネントは後述の<strong>Prop</strong>がI/Fとなり、外部のものとやり取りができる。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ this.props.○○○ について</strong>
Propはコンポーネントの属性として定義し、それをthis.props.○○○というように参照する。","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 13:35:50","post_modified_gmt": "2016-02-09 04:35:50","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 427,"post_author": 1,"post_date": "2016-02-09 13:49:07","post_date_gmt": "2016-02-09 04:49:07","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
コンポーネントは後述の<strong>Prop</strong>がI/Fとなり、外部のものとやり取りができる。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。
Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行います。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができます。","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 13:49:07","post_modified_gmt": "2016-02-09 04:49:07","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 428,"post_author": 1,"post_date": "2016-02-09 14:13:25","post_date_gmt": "2016-02-09 05:13:25","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。
Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行います。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができます。","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:13:25","post_modified_gmt": "2016-02-09 05:13:25","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 429,"post_author": 1,"post_date": "2016-02-09 14:15:20","post_date_gmt": "2016-02-09 05:15:20","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。
Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:15:20","post_modified_gmt": "2016-02-09 05:15:20","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 430,"post_author": 1,"post_date": "2016-02-09 14:24:17","post_date_gmt": "2016-02-09 05:24:17","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:24:17","post_modified_gmt": "2016-02-09 05:24:17","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 431,"post_author": 1,"post_date": "2016-02-09 14:25:53","post_date_gmt": "2016-02-09 05:25:53","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。
子コンポーネントとやり取りをするために、イベントハンドラをプロパティに指定する。

Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:25:53","post_modified_gmt": "2016-02-09 05:25:53","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 432,"post_author": 1,"post_date": "2016-02-09 14:29:52","post_date_gmt": "2016-02-09 05:29:52","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。
子コンポーネントとやり取りをするために、イベントハンドラをプロパティに指定する。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:29:52","post_modified_gmt": "2016-02-09 05:29:52","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 433,"post_author": 1,"post_date": "2016-02-09 14:30:06","post_date_gmt": "2016-02-09 05:30:06","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。



<blockquote>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</blockquote>


&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。
子コンポーネントとやり取りをするために、イベントハンドラをプロパティに指定する。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:30:06","post_modified_gmt": "2016-02-09 05:30:06","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 434,"post_author": 1,"post_date": "2016-02-09 14:30:36","post_date_gmt": "2016-02-09 05:30:36","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。


<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。
子コンポーネントとやり取りをするために、イベントハンドラをプロパティに指定する。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:30:36","post_modified_gmt": "2016-02-09 05:30:36","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 435,"post_author": 1,"post_date": "2016-02-09 14:30:54","post_date_gmt": "2016-02-09 05:30:54","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。
子コンポーネントとやり取りをするために、イベントハンドラをプロパティに指定する。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:30:54","post_modified_gmt": "2016-02-09 05:30:54","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 436,"post_author": 1,"post_date": "2016-02-09 14:32:20","post_date_gmt": "2016-02-09 05:32:20","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。
子コンポーネントとやり取りをするために、イベントハンドラをプロパティに指定する。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:32:20","post_modified_gmt": "2016-02-09 05:32:20","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 437,"post_author": 1,"post_date": "2016-02-09 14:33:35","post_date_gmt": "2016-02-09 05:33:35","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。
子コンポーネントとやり取りをするために、イベントハンドラをプロパティに指定する。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:33:35","post_modified_gmt": "2016-02-09 05:33:35","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 438,"post_author": 1,"post_date": "2016-02-09 14:34:36","post_date_gmt": "2016-02-09 05:34:36","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。


　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:34:36","post_modified_gmt": "2016-02-09 05:34:36","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 439,"post_author": 1,"post_date": "2016-02-09 14:37:42","post_date_gmt": "2016-02-09 05:37:42","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:37:42","post_modified_gmt": "2016-02-09 05:37:42","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 440,"post_author": 1,"post_date": "2016-02-09 14:45:58","post_date_gmt": "2016-02-09 05:45:58","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedプロパティを定義しているコードは後ほど。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:45:58","post_modified_gmt": "2016-02-09 05:45:58","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 441,"post_author": 1,"post_date": "2016-02-09 14:46:18","post_date_gmt": "2016-02-09 05:46:18","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedプロパティを定義しているコードは後ほど出てきます。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:46:18","post_modified_gmt": "2016-02-09 05:46:18","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 442,"post_author": 1,"post_date": "2016-02-09 14:46:41","post_date_gmt": "2016-02-09 05:46:41","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。

　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:46:41","post_modified_gmt": "2016-02-09 05:46:41","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 443,"post_author": 1,"post_date": "2016-02-09 14:48:55","post_date_gmt": "2016-02-09 05:48:55","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message =
            \'React has been successfully running for \' + seconds + \' seconds.\';
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:48:55","post_modified_gmt": "2016-02-09 05:48:55","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 444,"post_author": 1,"post_date": "2016-02-09 14:50:07","post_date_gmt": "2016-02-09 05:50:07","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:50:07","post_modified_gmt": "2016-02-09 05:50:07","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 445,"post_author": 1,"post_date": "2016-02-09 14:56:08","post_date_gmt": "2016-02-09 05:56:08","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが入るよう指定されてますね。
$nbsp;
$nbsp;
長くなるので、続きは次回「React サンプルを解読してみる２」に書く予定。
$nbsp;
$nbsp;
$nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:56:08","post_modified_gmt": "2016-02-09 05:56:08","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 446,"post_author": 1,"post_date": "2016-02-09 14:59:20","post_date_gmt": "2016-02-09 05:59:20","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。
Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsed(経過)に代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが入るよう指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回「React サンプルを解読してみる２」に書く予定。
&nbsp;　&nbsp;　&nbsp;　&nbsp;　
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 14:59:20","post_modified_gmt": "2016-02-09 05:59:20","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 447,"post_author": 1,"post_date": "2016-02-09 15:02:42","post_date_gmt": "2016-02-09 06:02:42","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。</em>
<em>Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsedに代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。計算の内容は、this.props.elapsed  / 100 とあります。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが入るよう指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回「React サンプルを解読してみる２」に書く予定。
&nbsp;　&nbsp;
&nbsp;　&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 15:02:42","post_modified_gmt": "2016-02-09 06:02:42","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 448,"post_author": 1,"post_date": "2016-02-09 15:03:44","post_date_gmt": "2016-02-09 06:03:44","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。</em>
<em>Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsedに代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが入るよう指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回「React サンプルを解読してみる２」に書く予定。
&nbsp;　&nbsp;
&nbsp;　&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 15:03:44","post_modified_gmt": "2016-02-09 06:03:44","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 449,"post_author": 1,"post_date": "2016-02-09 15:05:47","post_date_gmt": "2016-02-09 06:05:47","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。</em>
<em>Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsedに代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが返すように指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回「React サンプルを解読してみる２」に書く予定。
&nbsp;　&nbsp;
&nbsp;　&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 15:05:47","post_modified_gmt": "2016-02-09 06:05:47","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 450,"post_author": 1,"post_date": "2016-02-09 15:08:21","post_date_gmt": "2016-02-09 06:08:21","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。</em>
<em>Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsedに代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが返すように指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回「React サンプルを解読してみる２」に書く予定。
&nbsp;　&nbsp;
&nbsp;　&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=8&l=as1&asins=4873117194&ref=qf_sp_asin_til&fc1=707070&IS2=1&lt1=_blank&m=amazon&lc1=152766&bc1=FFF3FE&bg1=FFF3FE&npa=1&f=ifr\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>

&nbsp;　&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 15:08:21","post_modified_gmt": "2016-02-09 06:08:21","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 451,"post_author": 1,"post_date": "2016-02-09 15:11:29","post_date_gmt": "2016-02-09 06:11:29","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。</em>
<em>Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsedに代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが返すように指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回「React サンプルを解読してみる２」に書く予定。
&nbsp;　&nbsp;
&nbsp;　&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>

&nbsp;　&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-09 15:11:29","post_modified_gmt": "2016-02-09 06:11:29","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/09/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 452,"post_author": 1,"post_date": "2016-02-10 14:31:23","post_date_gmt": "2016-02-10 05:31:23","post_content": "SourceTreeからコマンドラインに移行しつつある今日この頃。

コマンドラインからgit pushするのは危険。恐怖。(一度やらかしている)

ちゃんとgit pushにブランチ名をきちんと指定しないと、master-&gt;masterにpushされてしまいます。

絶対にpushをミスしたくないので、ミスしない方法を探してみると「push.default」というものがあるのですね。

私の作業としてはカレントブランチにpushすることしかないので、

.gitconfig ファイルの
<pre>[push]
	default = nothing</pre>
の箇所を
<pre>[push]
	default = simple</pre>
にすれば、カレントブランチにpushされるように設定が出来るのですね。

できた！これで安心だ！と思ったのも束の間。
これってGit 2.0 からなんですね。

今私が使ってるgitは
git version 1.7.7.5 (Apple Git-26)
古い。

gitをアップデートするため、git公式サイトから最新バージョンのものを落としてきて(.dmgファイル)
それを開いてそのまま流れにそってインストール。

pathを新しい方に設定する為に.bash_profileファイル内のPATHの箇所を最新版
/usr/local/git/bin:$PATH
に変更します。

これでバージョンが最新になる筈でしたが、コマンドでバージョン確認すると、
 
<pre>$ git --version
Illegal instruction: 4</pre> 
...。

なんでかなーと考えたのですが、このMacそいえばバージョン古くて、全くアップデートしてないのでした。
今gitの最新バージョンは2.6.3
MacOSX version 10.9.5以上でないとだめみたいでした。

会社のpcはMacのバージョンアップできないので、家でpush.default設定してみようと思います。
SourceTreeから離れるのはもうちょっと先になりそうです。

というか、vimでホイホイ環境変数を変えてしまって、しかもそれをバックアップとってなくてパスわからなくて、gitコマンドも他に使ってるコマンドもいろいろと使えなくなってしまいました。
command not found
の嵐です。

もともと指定していたパス探しに時間がかかってしまったので、これからはこういった.bash_profileファイルとかはバックアップちゃんとしようとおもいます…

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Gitのバージョンアップ(報われない)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "159-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-10 14:31:23","post_modified_gmt": "2016-02-10 05:31:23","post_content_filtered": "","post_parent": 159,"guid": "http://kumao-no-mori.com/2016/02/10/159-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 453,"post_author": 1,"post_date": "2016-02-10 14:32:42","post_date_gmt": "2016-02-10 05:32:42","post_content": "いろんなプロジェクトを同時進行している私は、とにかくブランチを切り替えまくります。
変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
あとAパターン、Bパターンと作成しておくのにも便利ですよね。
そのスタッシュについて一通りをメモ。

★ stashする
<pre>$ git stash</pre>

★ コメントを付けてstashする
<pre>$ git stash save \"自由にコメント\"</pre>

★ stashリストを確認
<pre>$ git stash list</pre>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<pre>$ git stash show \"stash名\"</pre>


★ stashしたものを取り出す
<pre>$ git stash apply stash@{0}</pre>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<pre>$ git stash drop stash@{0}</pre>

★ stashしたものを取り出した際に削除も同時に行う
<pre>$ git stash pop stash@{0}</pre>

&nbsp;
&nbsp;

<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>
","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-10 14:32:42","post_modified_gmt": "2016-02-10 05:32:42","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/2016/02/10/311-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 454,"post_author": 1,"post_date": "2016-02-12 14:03:22","post_date_gmt": "2016-02-12 05:03:22","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに計算を代入しrenderしてますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。

&nbsp;
","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b%ef%bc%92","to_ping": "","pinged": "
http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=454","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 455,"post_author": 1,"post_date": "2016-02-12 12:37:20","post_date_gmt": "2016-02-12 03:37:20","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 12:37:20","post_modified_gmt": "2016-02-12 03:37:20","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 456,"post_author": 1,"post_date": "2016-02-12 12:51:31","post_date_gmt": "2016-02-12 03:51:31","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
googleさんで翻訳すると、
<em>React.createFactoryを呼び出す代わりに、直接React.renderにExampleApplication （ { ... } ）を呼び出して</em>
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していました。

","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 12:51:31","post_modified_gmt": "2016-02-12 03:51:31","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 457,"post_author": 1,"post_date": "2016-02-12 13:08:32","post_date_gmt": "2016-02-12 04:08:32","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
googleさんで翻訳すると、
<em>React.createFactoryを呼び出す代わりに、直接React.renderにExampleApplication （ { ... } ）を呼び出して</em>
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していました。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:08:32","post_modified_gmt": "2016-02-12 04:08:32","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 458,"post_author": 1,"post_date": "2016-02-12 13:09:29","post_date_gmt": "2016-02-12 04:09:29","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
googleさんで翻訳すると、
&nbsp;
<em>React.createFactoryを呼び出す代わりに、直接React.renderにExampleApplication （ { ... } ）を呼び出して</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していました。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:09:29","post_modified_gmt": "2016-02-12 04:09:29","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 459,"post_author": 1,"post_date": "2016-02-12 13:11:53","post_date_gmt": "2016-02-12 04:11:53","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
googleさんで翻訳すると、
&nbsp;
<em>React.createFactoryを呼び出す代わりに、直接React.renderにExampleApplication （ { ... } ）を呼び出して</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していました。
React.createFactoryというものを呼び出す代わりに、直接React.renderというものにExampleApplicationを呼び出すとはどういうことなのか。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:11:53","post_modified_gmt": "2016-02-12 04:11:53","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 460,"post_author": 1,"post_date": "2016-02-12 13:16:35","post_date_gmt": "2016-02-12 04:16:35","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
googleさんで翻訳すると、
&nbsp;
<em>React.createFactoryを呼び出す代わりに、直接React.renderにExampleApplication （ { ... } ）を呼び出して</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していました。
React.createFactoryというものを呼び出す代わりに、直接React.renderというものにExampleApplicationを呼び出すとはどういうことなのか。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスのReactElementを作成するファクトリー関数を返すのがこれ。
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:16:35","post_modified_gmt": "2016-02-12 04:16:35","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 461,"post_author": 1,"post_date": "2016-02-12 13:21:11","post_date_gmt": "2016-02-12 04:21:11","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
googleさんで翻訳すると、
&nbsp;
<em>React.createFactoryを呼び出す代わりに、直接React.renderにExampleApplication （ { ... } ）を呼び出して</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していました。
React.createFactoryというものを呼び出す代わりに、直接React.renderというものにExampleApplicationを呼び出すとはどういうことなのか。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスのReactElement【React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。】を作成するファクトリー関数を返すのがこれ。
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:21:11","post_modified_gmt": "2016-02-12 04:21:11","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 462,"post_author": 1,"post_date": "2016-02-12 13:22:05","post_date_gmt": "2016-02-12 04:22:05","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
googleさんで翻訳すると、
&nbsp;
<em>React.createFactoryを呼び出す代わりに、直接React.renderにExampleApplication （ { ... } ）を呼び出して</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していました。
React.createFactoryというものを呼び出す代わりに、直接React.renderというものにExampleApplicationを呼び出すとはどういうことなのか。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの※ReactElementを作成するファクトリー関数を返すのがこれ。
※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:22:05","post_modified_gmt": "2016-02-12 04:22:05","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 463,"post_author": 1,"post_date": "2016-02-12 13:24:28","post_date_gmt": "2016-02-12 04:24:28","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していました。
React.createFactoryというものを呼び出す代わりに、直接React.renderというものにExampleApplicationを呼び出すとはどういうことなのか。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの※ReactElementを作成するファクトリー関数を返すのがこれ。
※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:24:28","post_modified_gmt": "2016-02-12 04:24:28","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 464,"post_author": 1,"post_date": "2016-02-12 13:25:12","post_date_gmt": "2016-02-12 04:25:12","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの※ReactElementを作成するファクトリー関数を返すのがこれ。
※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:25:12","post_modified_gmt": "2016-02-12 04:25:12","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 465,"post_author": 1,"post_date": "2016-02-12 13:26:32","post_date_gmt": "2016-02-12 04:26:32","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの※ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:26:32","post_modified_gmt": "2016-02-12 04:26:32","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 466,"post_author": 1,"post_date": "2016-02-12 13:27:08","post_date_gmt": "2016-02-12 04:27:08","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:27:08","post_modified_gmt": "2016-02-12 04:27:08","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 467,"post_author": 1,"post_date": "2016-02-12 13:27:58","post_date_gmt": "2016-02-12 04:27:58","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:27:58","post_modified_gmt": "2016-02-12 04:27:58","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 468,"post_author": 1,"post_date": "2016-02-12 13:30:34","post_date_gmt": "2016-02-12 04:30:34","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:30:34","post_modified_gmt": "2016-02-12 04:30:34","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 469,"post_author": 1,"post_date": "2016-02-12 13:56:45","post_date_gmt": "2016-02-12 04:56:45","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎。
&nbsp;
ということかなとおもいます！","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:56:45","post_modified_gmt": "2016-02-12 04:56:45","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 470,"post_author": 1,"post_date": "2016-02-12 13:57:50","post_date_gmt": "2016-02-12 04:57:50","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎。
&nbsp;
ということかなとおもいます！","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 13:57:50","post_modified_gmt": "2016-02-12 04:57:50","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 471,"post_author": 1,"post_date": "2016-02-12 14:03:22","post_date_gmt": "2016-02-12 05:03:22","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに new Date().getTime() - start の計算を代入してますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 14:03:22","post_modified_gmt": "2016-02-12 05:03:22","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 472,"post_author": 1,"post_date": "2016-02-12 14:05:28","post_date_gmt": "2016-02-12 05:05:28","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに new Date().getTime() - start の計算を代入してますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。


&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 14:05:28","post_modified_gmt": "2016-02-12 05:05:28","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 473,"post_author": 1,"post_date": "2016-02-12 14:06:43","post_date_gmt": "2016-02-12 05:06:43","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。</em>
<em>Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsedに代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが返すように指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回<a href=\"http://kumao-no-mori.com/2016/02/12/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b%ef%bc%92/\">「React サンプルを解読してみる２」</a>に書く予定。
&nbsp;　&nbsp;
&nbsp;　&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>

&nbsp;　&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 14:06:43","post_modified_gmt": "2016-02-12 05:06:43","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/02/12/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 474,"post_author": 1,"post_date": "2016-02-12 14:15:42","post_date_gmt": "2016-02-12 05:15:42","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに new Date().getTime() − start の計算を代入してますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。


&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 14:15:42","post_modified_gmt": "2016-02-12 05:15:42","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 475,"post_author": 1,"post_date": "2016-02-12 14:16:33","post_date_gmt": "2016-02-12 05:16:33","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに new Date().getTime() - start の計算を代入してますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。


&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 14:16:33","post_modified_gmt": "2016-02-12 05:16:33","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 476,"post_author": 1,"post_date": "2016-02-12 14:17:05","post_date_gmt": "2016-02-12 05:17:05","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに計算を代入してますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。


&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 14:17:05","post_modified_gmt": "2016-02-12 05:17:05","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 477,"post_author": 1,"post_date": "2016-02-12 14:19:28","post_date_gmt": "2016-02-12 05:19:28","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに計算を代入し描画してますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。


&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 14:19:28","post_modified_gmt": "2016-02-12 05:19:28","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 478,"post_author": 1,"post_date": "2016-02-12 14:19:49","post_date_gmt": "2016-02-12 05:19:49","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに計算を代入しrenderしてますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。


&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-12 14:19:49","post_modified_gmt": "2016-02-12 05:19:49","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/02/12/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 483,"post_author": 1,"post_date": "2016-02-15 18:43:01","post_date_gmt": "2016-02-15 09:43:01","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
<strong>★ マージ変更を中止し、なかったことにする</strong>
<pre>git marge --abort</pre>
&nbsp;
<strong>★ リベース変更を中止し、なかったことにする</strong>
<pre>git rebase --abort</pre>
&nbsp;
<strong>★ リバート変更を中止し、なかったことにする</strong>
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
<strong>★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。</strong>
<pre>git reset --hard</pre>
&nbsp;
<strong>★ 直前のコミットログを修正</strong>
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
<strong>★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる</strong>
<pre>git cherry-pick [コミット番号]</pre>

&nbsp;","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-%e3%83%91%e3%83%8b%e3%83%83%e3%82%af%e6%99%82%e3%81%ab","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=483","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 484,"post_author": 1,"post_date": "2016-02-15 18:43:01","post_date_gmt": "2016-02-15 09:43:01","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
★ マージを中止し、なかったことにする
<pre>git marge --abort</pre>
&nbsp;
★ リベースを中止し、なかったことにする
<pre>git rebase --abort</pre>
&nbsp;
★ リベートを中止し、なかったことにする
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。
<pre>git reset --hard</pre>
&nbsp;
★ 直前のコミットログを修正
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]
をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる
<pre>git cherry-pick</pre>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "483-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-15 18:43:01","post_modified_gmt": "2016-02-15 09:43:01","post_content_filtered": "","post_parent": 483,"guid": "http://kumao-no-mori.com/2016/02/15/483-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 485,"post_author": 1,"post_date": "2016-02-15 18:44:27","post_date_gmt": "2016-02-15 09:44:27","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
★ マージを中止し、なかったことにする
<pre>git marge --abort</pre>
&nbsp;
★ リベースを中止し、なかったことにする
<pre>git rebase --abort</pre>
&nbsp;
★ リベートを中止し、なかったことにする
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。
<pre>git reset --hard</pre>
&nbsp;
★ 直前のコミットログを修正
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる
<pre>git cherry-pick</pre>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "483-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-15 18:44:27","post_modified_gmt": "2016-02-15 09:44:27","post_content_filtered": "","post_parent": 483,"guid": "http://kumao-no-mori.com/2016/02/15/483-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 486,"post_author": 1,"post_date": "2016-02-15 18:45:52","post_date_gmt": "2016-02-15 09:45:52","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
<strong>★ マージを中止し、なかったことにする</strong>
<pre>git marge --abort</pre>
&nbsp;
<strong>★ リベースを中止し、なかったことにする</strong>
<pre>git rebase --abort</pre>
&nbsp;
<strong>★ リベートを中止し、なかったことにする</strong>
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
<strong>★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。</strong>
<pre>git reset --hard</pre>
&nbsp;
<strong>★ 直前のコミットログを修正</strong>
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
<strong>★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる</strong>
<pre>git cherry-pick</pre>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "483-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-15 18:45:52","post_modified_gmt": "2016-02-15 09:45:52","post_content_filtered": "","post_parent": 483,"guid": "http://kumao-no-mori.com/2016/02/15/483-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 487,"post_author": 1,"post_date": "2016-02-15 18:46:48","post_date_gmt": "2016-02-15 09:46:48","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
<strong>★ マージを中止し、なかったことにする</strong>
<pre>git marge --abort</pre>
&nbsp;
<strong>★ リベースを中止し、なかったことにする</strong>
<pre>git rebase --abort</pre>
&nbsp;
<strong>★ リベートを中止し、なかったことにする</strong>
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
<strong>★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。</strong>
<pre>git reset --hard</pre>
&nbsp;
<strong>★ 直前のコミットログを修正</strong>
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
<strong>★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる</strong>
<pre>git cherry-pick [コミット番号]</pre>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "483-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-15 18:46:48","post_modified_gmt": "2016-02-15 09:46:48","post_content_filtered": "","post_parent": 483,"guid": "http://kumao-no-mori.com/2016/02/15/483-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 488,"post_author": 1,"post_date": "2016-02-15 18:47:40","post_date_gmt": "2016-02-15 09:47:40","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
<strong>★ マージ変更を中止し、なかったことにする</strong>
<pre>git marge --abort</pre>
&nbsp;
<strong>★ リベース変更を中止し、なかったことにする</strong>
<pre>git rebase --abort</pre>
&nbsp;
<strong>★ リベート変更を中止し、なかったことにする</strong>
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
<strong>★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。</strong>
<pre>git reset --hard</pre>
&nbsp;
<strong>★ 直前のコミットログを修正</strong>
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
<strong>★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる</strong>
<pre>git cherry-pick [コミット番号]</pre>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "483-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-15 18:47:40","post_modified_gmt": "2016-02-15 09:47:40","post_content_filtered": "","post_parent": 483,"guid": "http://kumao-no-mori.com/2016/02/15/483-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 489,"post_author": 1,"post_date": "2016-02-15 22:42:13","post_date_gmt": "2016-02-15 13:42:13","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
<strong>★ マージ変更を中止し、なかったことにする</strong>
<pre>git marge --abort</pre>
&nbsp;
<strong>★ リベース変更を中止し、なかったことにする</strong>
<pre>git rebase --abort</pre>
&nbsp;
<strong>★ リバート変更を中止し、なかったことにする</strong>
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
<strong>★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。</strong>
<pre>git reset --hard</pre>
&nbsp;
<strong>★ 直前のコミットログを修正</strong>
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
<strong>★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる</strong>
<pre>git cherry-pick [コミット番号]</pre>
&nbsp;
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "483-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-15 22:42:13","post_modified_gmt": "2016-02-15 13:42:13","post_content_filtered": "","post_parent": 483,"guid": "http://kumao-no-mori.com/2016/02/15/483-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 491,"post_author": 1,"post_date": "2016-02-17 12:52:07","post_date_gmt": "2016-02-17 03:52:07","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（指定したコミットより後のコミットを指定すると、指定したコミットからの一覧が表示されます。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
削除したいコミットの一行を削除し保存する。

そして
<pre>$ git push -f origin [ブランチ]</pre>
でpushする。

これでgit logとかで確認すると綺麗になくなっています。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git 間違えてpushしてしまった時に、pushを取り消す方法","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 12:52:07","post_modified_gmt": "2016-02-17 03:52:07","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/02/17/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 492,"post_author": 1,"post_date": "2016-02-17 16:24:07","post_date_gmt": "2016-02-17 07:24:07","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
<strong>☆ 内容</strong>
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickメソッドでクリックで更新。更新の度state.clickCountに1を足していく。
★ this.setStateは更新の記述。
renderで仮想DOMをレンダリング。
<pre>
//仮想DOM
<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>
</pre>
h2をクリックしたらhandleClickを機能させる。
変動する箇所は{this.state.clickCount}でclickCountを表示。

&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;

&nbsp;
***
<strong>コンパイルについて</strong>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。
&nbsp;
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。
<small>作業するフォルダに移動。
jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ] の順です。</small>
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
そのうちgulpとBrowserifyでもっと快適な環境を作る予定です。
***


&nbsp;","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "react","to_ping": "","pinged": "
http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=492","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 493,"post_author": 1,"post_date": "2016-02-17 14:12:31","post_date_gmt": "2016-02-17 05:12:31","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値srateについてメモ。

★ キーワード【state】
","post_title": "React","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 14:12:31","post_modified_gmt": "2016-02-17 05:12:31","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 494,"post_author": 1,"post_date": "2016-02-17 14:18:58","post_date_gmt": "2016-02-17 05:18:58","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。

★ キーワード【state】
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
","post_title": "React","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 14:18:58","post_modified_gmt": "2016-02-17 05:18:58","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 495,"post_author": 1,"post_date": "2016-02-17 14:22:02","post_date_gmt": "2016-02-17 05:22:02","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。

★ キーワード【state】
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        dropZoneEntered: false;
        title: \'\',
        introduction: \'\',
        questions: []
    };
}
</pre>","post_title": "React","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 14:22:02","post_modified_gmt": "2016-02-17 05:22:02","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 496,"post_author": 1,"post_date": "2016-02-17 14:26:47","post_date_gmt": "2016-02-17 05:26:47","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。

★ キーワード【state】
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。","post_title": "React","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 14:26:47","post_modified_gmt": "2016-02-17 05:26:47","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 497,"post_author": 1,"post_date": "2016-02-17 14:29:59","post_date_gmt": "2016-02-17 05:29:59","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。

★ キーワード【state】
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 14:29:59","post_modified_gmt": "2016-02-17 05:29:59","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 498,"post_author": 1,"post_date": "2016-02-17 14:34:27","post_date_gmt": "2016-02-17 05:34:27","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
&nbsp;
","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 14:34:27","post_modified_gmt": "2016-02-17 05:34:27","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 499,"post_author": 1,"post_date": "2016-02-17 15:33:13","post_date_gmt": "2016-02-17 06:33:13","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 15:33:13","post_modified_gmt": "2016-02-17 06:33:13","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 500,"post_author": 1,"post_date": "2016-02-17 15:36:01","post_date_gmt": "2016-02-17 06:36:01","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 15:36:01","post_modified_gmt": "2016-02-17 06:36:01","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 501,"post_author": 1,"post_date": "2016-02-17 15:39:51","post_date_gmt": "2016-02-17 06:39:51","post_content": "","post_title": "count","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "count","to_ping": "","pinged": "","post_modified": "2016-02-17 15:40:15","post_modified_gmt": "2016-02-17 06:40:15","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 502,"post_author": 1,"post_date": "2016-02-17 15:40:24","post_date_gmt": "2016-02-17 06:40:24","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 15:40:24","post_modified_gmt": "2016-02-17 06:40:24","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 503,"post_author": 1,"post_date": "2016-02-17 15:40:54","post_date_gmt": "2016-02-17 06:40:54","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 15:40:54","post_modified_gmt": "2016-02-17 06:40:54","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 504,"post_author": 1,"post_date": "2016-02-17 15:41:45","post_date_gmt": "2016-02-17 06:41:45","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。

","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 15:41:45","post_modified_gmt": "2016-02-17 06:41:45","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 505,"post_author": 1,"post_date": "2016-02-17 15:55:29","post_date_gmt": "2016-02-17 06:55:29","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;
[上記のコード]
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickというメソッドを定義し、state.clickCountに+1をしていく。
this.setStateは更新の記述。","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 15:55:29","post_modified_gmt": "2016-02-17 06:55:29","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 506,"post_author": 1,"post_date": "2016-02-17 16:11:50","post_date_gmt": "2016-02-17 07:11:50","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ]
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;
[上記のコード]
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickというメソッドを定義し、更新の度state.clickCountに+1をしていく。
this.setStateは更新の記述。","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 16:11:50","post_modified_gmt": "2016-02-17 07:11:50","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 507,"post_author": 1,"post_date": "2016-02-17 16:18:56","post_date_gmt": "2016-02-17 07:18:56","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ] の順です。
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;
[上記のコード]
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickメソッドでクリックで更新。更新の度state.clickCountに1を足していく。
★ this.setStateは更新の記述。
renderで仮想DOMをレンダリング。
<pre>
//仮想DOM
<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>
</pre>
h2をクリックしたらhandleClickを機能させる。
変動する箇所は{this.state.clickCount}でclickCountを表示。","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 16:18:56","post_modified_gmt": "2016-02-17 07:18:56","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 508,"post_author": 1,"post_date": "2016-02-17 16:22:27","post_date_gmt": "2016-02-17 07:22:27","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。

***
ちょっと話が逸れてコンパイルについて。
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ] の順です。
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
そのうちgulpとBrowserifyでもっと快適な環境を作る予定です。
***

&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;
[上記のコード]
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickメソッドでクリックで更新。更新の度state.clickCountに1を足していく。
★ this.setStateは更新の記述。
renderで仮想DOMをレンダリング。
<pre>
//仮想DOM
<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>
</pre>
h2をクリックしたらhandleClickを機能させる。
変動する箇所は{this.state.clickCount}でclickCountを表示。

&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>
","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 16:22:27","post_modified_gmt": "2016-02-17 07:22:27","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 509,"post_author": 1,"post_date": "2016-02-17 16:24:07","post_date_gmt": "2016-02-17 07:24:07","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。

***
ちょっと話が逸れてコンパイルについて。
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。
<small>作業するフォルダに移動。
jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ] の順です。</small>
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
そのうちgulpとBrowserifyでもっと快適な環境を作る予定です。
***

&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;
[上記のコード]
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickメソッドでクリックで更新。更新の度state.clickCountに1を足していく。
★ this.setStateは更新の記述。
renderで仮想DOMをレンダリング。
<pre>
//仮想DOM
<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>
</pre>
h2をクリックしたらhandleClickを機能させる。
変動する箇所は{this.state.clickCount}でclickCountを表示。

&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>
","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 16:24:07","post_modified_gmt": "2016-02-17 07:24:07","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 510,"post_author": 1,"post_date": "2016-02-17 16:27:49","post_date_gmt": "2016-02-17 07:27:49","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。
&nbsp;
<strong>☆ 内容</strong>
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickメソッドでクリックで更新。更新の度state.clickCountに1を足していく。
★ this.setStateは更新の記述。
renderで仮想DOMをレンダリング。
<pre>
//仮想DOM
<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>
</pre>
h2をクリックしたらhandleClickを機能させる。
変動する箇所は{this.state.clickCount}でclickCountを表示。

&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;

&nbsp;
***
<strong>コンパイルについて</strong>
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。
<small>作業するフォルダに移動。
jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ] の順です。</small>
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
そのうちgulpとBrowserifyでもっと快適な環境を作る予定です。
***


&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 16:27:49","post_modified_gmt": "2016-02-17 07:27:49","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 511,"post_author": 1,"post_date": "2016-02-17 16:29:23","post_date_gmt": "2016-02-17 07:29:23","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
<strong>☆ 内容</strong>
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickメソッドでクリックで更新。更新の度state.clickCountに1を足していく。
★ this.setStateは更新の記述。
renderで仮想DOMをレンダリング。
<pre>
//仮想DOM
<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>
</pre>
h2をクリックしたらhandleClickを機能させる。
変動する箇所は{this.state.clickCount}でclickCountを表示。

&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;

&nbsp;
***
<strong>コンパイルについて</strong>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。
&nbsp;
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。
<small>作業するフォルダに移動。
jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ] の順です。</small>
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
そのうちgulpとBrowserifyでもっと快適な環境を作る予定です。
***


&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-17 16:29:23","post_modified_gmt": "2016-02-17 07:29:23","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/02/17/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 514,"post_author": 1,"post_date": "2016-02-19 15:20:27","post_date_gmt": "2016-02-19 06:20:27","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事。</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前の親コミットも一緒に複製され違うものになります。
リビジョンが違うものはエラーになり、リモートにpushする事が出来ません。
&nbsp;
もし、そのときに
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああっ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull rebaseについてとってもわかりやすいです。

&nbsp;","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-%e3%83%88%e3%83%94%e3%83%83%e3%82%af%e3%83%96%e3%83%a9%e3%83%b3%e3%83%81%e3%81%ab%e7%b5%b1%e5%90%88%e3%83%96%e3%83%a9%e3%83%b3%e3%83%81%e3%82%92%e3%83%9e%e3%83%bc%e3%82%b8","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:56","post_modified_gmt": "2016-09-29 09:55:56","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=514","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 515,"post_author": 1,"post_date": "2016-02-19 15:07:40","post_date_gmt": "2016-02-19 06:07:40","post_content": "ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
あと注意したいことが、
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前のコミットも一緒に複製され違うものになります。
リビジョンが違うものはリモートにpushする事が出来ません。
もし
<pre>
git push -f
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、これは使って行こうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull --rebaseについてとってもわかりやすいです。

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git トピックブランチにmasterブランチをマージする&rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-19 15:07:40","post_modified_gmt": "2016-02-19 06:07:40","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/02/19/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 516,"post_author": 1,"post_date": "2016-02-19 15:16:53","post_date_gmt": "2016-02-19 06:16:53","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前のコミットも一緒に複製され違うものになります。
リビジョンが違うものはリモートにpushする事が出来ません。
もし
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull --rebaseについてとってもわかりやすいです。

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git トピックブランチにmasterブランチをマージする&rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-19 15:16:53","post_modified_gmt": "2016-02-19 06:16:53","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/02/19/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 517,"post_author": 1,"post_date": "2016-02-19 15:17:34","post_date_gmt": "2016-02-19 06:17:34","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前のコミットも一緒に複製され違うものになります。
リビジョンが違うものはリモートにpushする事が出来ません。
もし
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull --rebaseについてとってもわかりやすいです。

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-19 15:17:34","post_modified_gmt": "2016-02-19 06:17:34","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/02/19/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 518,"post_author": 1,"post_date": "2016-02-19 15:19:19","post_date_gmt": "2016-02-19 06:19:19","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前の親コミットも一緒に複製され違うものになります。
リビジョンが違うものはリモートにpushする事が出来ません。
もし
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull --rebaseについてとってもわかりやすいです。

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-19 15:19:19","post_modified_gmt": "2016-02-19 06:19:19","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/02/19/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 519,"post_author": 1,"post_date": "2016-02-19 15:19:53","post_date_gmt": "2016-02-19 06:19:53","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前の親コミットも一緒に複製され違うものになります。
リビジョンが違うものはエラーになり、リモートにpushする事が出来ません。
もし
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull --rebaseについてとってもわかりやすいです。

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-19 15:19:53","post_modified_gmt": "2016-02-19 06:19:53","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/02/19/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 520,"post_author": 1,"post_date": "2016-02-19 15:20:27","post_date_gmt": "2016-02-19 06:20:27","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前の親コミットも一緒に複製され違うものになります。
リビジョンが違うものはエラーになり、リモートにpushする事が出来ません。
&nbsp;
もし
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああっ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull --rebaseについてとってもわかりやすいです。

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-19 15:20:27","post_modified_gmt": "2016-02-19 06:20:27","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/02/19/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 521,"post_author": 1,"post_date": "2016-02-19 15:29:49","post_date_gmt": "2016-02-19 06:29:49","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事。</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前の親コミットも一緒に複製され違うものになります。
リビジョンが違うものはエラーになり、リモートにpushする事が出来ません。
&nbsp;
もし、そのときに
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああっ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull --rebaseについてとってもわかりやすいです。

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-19 15:29:49","post_modified_gmt": "2016-02-19 06:29:49","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/02/19/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 522,"post_author": 1,"post_date": "2016-02-19 15:42:42","post_date_gmt": "2016-02-19 06:42:42","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事。</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前の親コミットも一緒に複製され違うものになります。
リビジョンが違うものはエラーになり、リモートにpushする事が出来ません。
&nbsp;
もし、そのときに
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああっ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull rebaseについてとってもわかりやすいです。

&nbsp;
&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-19 15:42:42","post_modified_gmt": "2016-02-19 06:42:42","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/02/19/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 524,"post_author": 1,"post_date": "2016-02-23 16:28:39","post_date_gmt": "2016-02-23 07:28:39","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
);
</pre>
&nbsp;
☆ React.createClass で Component を作成する。
<strong>ここのComponent名のはじめは大文字でなくてはならない。</strong>
&nbsp;
☆ render で ReactElement を作成し、戻り値としてComponentに返す。
<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
&nbsp;
☆ React.render でレンダリングの実行。
<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>

&nbsp;","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "react-2","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=524","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 525,"post_author": 1,"post_date": "2016-02-23 16:00:58","post_date_gmt": "2016-02-23 07:00:58","post_content": "<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
            );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
    );
</pre>","post_title": "React 基本１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:00:58","post_modified_gmt": "2016-02-23 07:00:58","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 526,"post_author": 1,"post_date": "2016-02-23 16:01:21","post_date_gmt": "2016-02-23 07:01:21","post_content": "<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
            );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
    );
</pre>","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:01:21","post_modified_gmt": "2016-02-23 07:01:21","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 527,"post_author": 1,"post_date": "2016-02-23 16:13:32","post_date_gmt": "2016-02-23 07:13:32","post_content": "この基本的な文を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
            );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
    );
</pre>
&nbsp;
☆ React.createClass で Component を作成する。<strong>ここのComponent名のはじめは大文字。</strong>
☆ render で ReactElement を作成し、戻り値としてComponentに返す。<strong>renderは単一のReactElementでなくてはならない。</strong>","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:13:32","post_modified_gmt": "2016-02-23 07:13:32","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 528,"post_author": 1,"post_date": "2016-02-23 16:14:49","post_date_gmt": "2016-02-23 07:14:49","post_content": "この基本的な文を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
            );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
    );
</pre>
&nbsp;
☆ React.createClass で Component を作成する。<strong>ここのComponent名のはじめは大文字。</strong>
☆ render で ReactElement を作成し、戻り値としてComponentに返す。<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
render() {
    
}
(大きいdivで囲ってしまえば良い)
</pre>","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:14:49","post_modified_gmt": "2016-02-23 07:14:49","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 529,"post_author": 1,"post_date": "2016-02-23 16:17:38","post_date_gmt": "2016-02-23 07:17:38","post_content": "この基本的な文を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
    );
</pre>
&nbsp;
☆ React.createClass で Component を作成する。<strong>ここのComponent名のはじめは大文字。</strong>
☆ render で ReactElement を作成し、戻り値としてComponentに返す。<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:17:38","post_modified_gmt": "2016-02-23 07:17:38","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 530,"post_author": 1,"post_date": "2016-02-23 16:20:04","post_date_gmt": "2016-02-23 07:20:04","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
    );
</pre>
&nbsp;
☆ React.createClass で Component を作成する。<strong>ここのComponent名のはじめは大文字。</strong>
☆ render で ReactElement を作成し、戻り値としてComponentに返す。<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
☆","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:20:04","post_modified_gmt": "2016-02-23 07:20:04","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 531,"post_author": 1,"post_date": "2016-02-23 16:24:42","post_date_gmt": "2016-02-23 07:24:42","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
    );
</pre>
&nbsp;
☆ React.createClass で Component を作成する。<strong>ここのComponent名のはじめは大文字。</strong>
☆ render で ReactElement を作成し、戻り値としてComponentに返す。<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
☆ React.render でレンダリングの実行。<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:24:42","post_modified_gmt": "2016-02-23 07:24:42","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 532,"post_author": 1,"post_date": "2016-02-23 16:25:09","post_date_gmt": "2016-02-23 07:25:09","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
);
</pre>
&nbsp;
☆ React.createClass で Component を作成する。<strong>ここのComponent名のはじめは大文字。</strong>
☆ render で ReactElement を作成し、戻り値としてComponentに返す。<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
☆ React.render でレンダリングの実行。<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:25:09","post_modified_gmt": "2016-02-23 07:25:09","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 533,"post_author": 1,"post_date": "2016-02-23 16:26:26","post_date_gmt": "2016-02-23 07:26:26","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
);
</pre>
&nbsp;
☆ React.createClass で Component を作成する。
<strong>ここのComponent名のはじめは大文字。</strong>
&nbsp;
☆ render で ReactElement を作成し、戻り値としてComponentに返す。
<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
&nbsp;
☆ React.render でレンダリングの実行。<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:26:26","post_modified_gmt": "2016-02-23 07:26:26","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 534,"post_author": 1,"post_date": "2016-02-23 16:27:39","post_date_gmt": "2016-02-23 07:27:39","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
);
</pre>
&nbsp;
☆ React.createClass で Component を作成する。
<strong>ここのComponent名のはじめは大文字。</strong>
&nbsp;
☆ render で ReactElement を作成し、戻り値としてComponentに返す。
<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
&nbsp;
☆ React.render でレンダリングの実行。
<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:27:39","post_modified_gmt": "2016-02-23 07:27:39","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 535,"post_author": 1,"post_date": "2016-02-23 16:30:04","post_date_gmt": "2016-02-23 07:30:04","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
);
</pre>
&nbsp;
☆ React.createClass で Component を作成する。
<strong>ここのComponent名のはじめは大文字。</strong>
&nbsp;
☆ render で ReactElement を作成し、戻り値としてComponentに返す。
<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
&nbsp;
☆ React.render でレンダリングの実行。
<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>
&nbsp;
&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;
$nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>
&nbsp;
&nbsp;","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:30:04","post_modified_gmt": "2016-02-23 07:30:04","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 536,"post_author": 1,"post_date": "2016-02-23 16:31:19","post_date_gmt": "2016-02-23 07:31:19","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
);
</pre>
&nbsp;
☆ React.createClass で Component を作成する。
<strong>ここのComponent名のはじめは大文字。</strong>
&nbsp;
☆ render で ReactElement を作成し、戻り値としてComponentに返す。
<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
&nbsp;
☆ React.render でレンダリングの実行。
<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>
&nbsp;&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>
&nbsp;&nbsp;","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:31:19","post_modified_gmt": "2016-02-23 07:31:19","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 537,"post_author": 1,"post_date": "2016-02-23 16:32:50","post_date_gmt": "2016-02-23 07:32:50","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
);
</pre>
&nbsp;
☆ React.createClass で Component を作成する。
<strong>ここのComponent名のはじめは大文字でなくてはならない。</strong>
&nbsp;
☆ render で ReactElement を作成し、戻り値としてComponentに返す。
<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
&nbsp;
☆ React.render でレンダリングの実行。
<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>
&nbsp;&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>
&nbsp;&nbsp;","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-23 16:32:50","post_modified_gmt": "2016-02-23 07:32:50","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/02/23/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 540,"post_author": 1,"post_date": "2016-02-29 16:57:55","post_date_gmt": "2016-02-29 07:57:55","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" rel=\"attachment wp-att-545\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" alt=\"redux\" width=\"1000\" height=\"700\" class=\"aligncenter size-full wp-image-545\" /></a>
&nbsp;&nbsp;
<strong>★ Store</strong>
Storeはアプリケーションのstateを保持している場所。
Reduxで状態は全てStoreのstateに保存する。
&nbsp;&nbsp;
<strong>★ Action</strong>
Actionは「何をする」という情報を持ったオブジェクト。
Actionは必ずtypeプロパティを持たないといけない。
Actionを作成するにはActionCreatorメソッドで作成する。
&nbsp;&nbsp;
<strong>★ dispatch</strong>
ActionをStoreに送るときは、dispatchを使ってstateを変更する。
&nbsp;&nbsp;
<strong>★ Reducer</strong>
Reducerはactionとstateから、新しいstateを作成して返すメソッド。
Reducerは状態を持たず、stateを受け取って次のstateを返す関数。ステートレスに保たれる。
Reducer内に子Reducerを作成し、stateのプロパティごとに子Reducerで処理するようにする。

&nbsp;","post_title": "React Reduxについて","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "react-redux%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=540","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 541,"post_author": 1,"post_date": "2016-02-29 16:36:59","post_date_gmt": "2016-02-29 07:36:59","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<strong>☆ Store</strong>
","post_title": "React Reduxについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "540-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-29 16:36:59","post_modified_gmt": "2016-02-29 07:36:59","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/2016/02/29/540-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 542,"post_author": 1,"post_date": "2016-02-29 16:57:55","post_date_gmt": "2016-02-29 07:57:55","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<strong>☆ Store</strong>
Storeはアプリケーションのstateを保持している場所。
Reduxで状態は全てStoreのstateに保存する。
&nbsp;&nbsp;
<strong>☆ Action</strong>
Actionは「何をする」という情報を持ったオブジェクト。
Actionは必ずtypeプロパティを持たないといけない。
Actionを作成するにはActionCreatorメソッドで作成する。
&nbsp;&nbsp;
<strong>☆ dispatch</strong>
ActionをStoreに送るときは、dispatchを使ってstateを変更する。
<strong>☆ Reducer</strong>
Reducerはactionとstateから、新しいstateを作成して返すメソッド。
Reducerは状態を持たず、stateを受け取って次のstateを返す関数。ステートレスに保たれる。
Reducer内に子Reducerを作成し、stateのプロパティごとに子Reducerで処理するようにする。

&nbsp;&nbsp;
&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>
","post_title": "React Reduxについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "540-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-29 16:57:55","post_modified_gmt": "2016-02-29 07:57:55","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/2016/02/29/540-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 543,"post_author": 1,"post_date": "2016-02-29 16:59:41","post_date_gmt": "2016-02-29 07:59:41","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<strong>☆ Store</strong>
Storeはアプリケーションのstateを保持している場所。
Reduxで状態は全てStoreのstateに保存する。
&nbsp;&nbsp;
<strong>☆ Action</strong>
Actionは「何をする」という情報を持ったオブジェクト。
Actionは必ずtypeプロパティを持たないといけない。
Actionを作成するにはActionCreatorメソッドで作成する。
&nbsp;&nbsp;
<strong>☆ dispatch</strong>
ActionをStoreに送るときは、dispatchを使ってstateを変更する。
&nbsp;&nbsp;
<strong>☆ Reducer</strong>
Reducerはactionとstateから、新しいstateを作成して返すメソッド。
Reducerは状態を持たず、stateを受け取って次のstateを返す関数。ステートレスに保たれる。
Reducer内に子Reducerを作成し、stateのプロパティごとに子Reducerで処理するようにする。

&nbsp;&nbsp;
&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>
","post_title": "React Reduxについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "540-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-29 16:59:41","post_modified_gmt": "2016-02-29 07:59:41","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/2016/02/29/540-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 544,"post_author": 1,"post_date": "2016-02-29 17:47:14","post_date_gmt": "2016-02-29 08:47:14","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<strong>★ Store</strong>
Storeはアプリケーションのstateを保持している場所。
Reduxで状態は全てStoreのstateに保存する。
&nbsp;&nbsp;
<strong>★ Action</strong>
Actionは「何をする」という情報を持ったオブジェクト。
Actionは必ずtypeプロパティを持たないといけない。
Actionを作成するにはActionCreatorメソッドで作成する。
&nbsp;&nbsp;
<strong>★ dispatch</strong>
ActionをStoreに送るときは、dispatchを使ってstateを変更する。
&nbsp;&nbsp;
<strong>★ Reducer</strong>
Reducerはactionとstateから、新しいstateを作成して返すメソッド。
Reducerは状態を持たず、stateを受け取って次のstateを返す関数。ステートレスに保たれる。
Reducer内に子Reducerを作成し、stateのプロパティごとに子Reducerで処理するようにする。

&nbsp;&nbsp;
&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>
","post_title": "React Reduxについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "540-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-29 17:47:14","post_modified_gmt": "2016-02-29 08:47:14","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/2016/02/29/540-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 545,"post_author": 1,"post_date": "2016-02-29 18:17:02","post_date_gmt": "2016-02-29 09:17:02","post_content": "","post_title": "redux","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "redux","to_ping": "","pinged": "","post_modified": "2016-02-29 18:17:02","post_modified_gmt": "2016-02-29 09:17:02","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 546,"post_author": 1,"post_date": "2016-02-29 18:17:39","post_date_gmt": "2016-02-29 09:17:39","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<strong>★ Store</strong>
Storeはアプリケーションのstateを保持している場所。
Reduxで状態は全てStoreのstateに保存する。
&nbsp;&nbsp;
<strong>★ Action</strong>
Actionは「何をする」という情報を持ったオブジェクト。
Actionは必ずtypeプロパティを持たないといけない。
Actionを作成するにはActionCreatorメソッドで作成する。
&nbsp;&nbsp;
<strong>★ dispatch</strong>
ActionをStoreに送るときは、dispatchを使ってstateを変更する。
&nbsp;&nbsp;
<strong>★ Reducer</strong>
Reducerはactionとstateから、新しいstateを作成して返すメソッド。
Reducerは状態を持たず、stateを受け取って次のstateを返す関数。ステートレスに保たれる。
Reducer内に子Reducerを作成し、stateのプロパティごとに子Reducerで処理するようにする。

&nbsp;&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" rel=\"attachment wp-att-545\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" alt=\"redux\" width=\"1000\" height=\"700\" class=\"aligncenter size-full wp-image-545\" /></a>
&nbsp;&nbsp;
&nbsp;&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React Reduxについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "540-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-29 18:17:39","post_modified_gmt": "2016-02-29 09:17:39","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/2016/02/29/540-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 547,"post_author": 1,"post_date": "2016-02-29 18:18:39","post_date_gmt": "2016-02-29 09:18:39","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" rel=\"attachment wp-att-545\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" alt=\"redux\" width=\"1000\" height=\"700\" class=\"aligncenter size-full wp-image-545\" /></a>
&nbsp;&nbsp;
<strong>★ Store</strong>
Storeはアプリケーションのstateを保持している場所。
Reduxで状態は全てStoreのstateに保存する。
&nbsp;&nbsp;
<strong>★ Action</strong>
Actionは「何をする」という情報を持ったオブジェクト。
Actionは必ずtypeプロパティを持たないといけない。
Actionを作成するにはActionCreatorメソッドで作成する。
&nbsp;&nbsp;
<strong>★ dispatch</strong>
ActionをStoreに送るときは、dispatchを使ってstateを変更する。
&nbsp;&nbsp;
<strong>★ Reducer</strong>
Reducerはactionとstateから、新しいstateを作成して返すメソッド。
Reducerは状態を持たず、stateを受け取って次のstateを返す関数。ステートレスに保たれる。
Reducer内に子Reducerを作成し、stateのプロパティごとに子Reducerで処理するようにする。

&nbsp;&nbsp;
&nbsp;&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
&nbsp;&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "React Reduxについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "540-revision-v1","to_ping": "","pinged": "","post_modified": "2016-02-29 18:18:39","post_modified_gmt": "2016-02-29 09:18:39","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/2016/02/29/540-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 549,"post_author": 1,"post_date": "2016-03-02 22:10:54","post_date_gmt": "2016-03-02 13:10:54","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>★ コードカラーの例</strong>
$ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
$ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
$ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>★ エイリアスの例</strong>
$ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
$ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
$ git checkoutコマンドの省略。
<pre>$ git config --global alias.co checkout</pre>
$ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。

上記のコードカラーとエイリアス一気に流す用に ▽
<pre>
git config --global color.diff auto
git config --global color.branch auto
git config --global color.status auto
git config --global color.interactive auto
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout
git config --global alias.ci commit
</pre>



<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-02 22:10:54","post_modified_gmt": "2016-03-02 13:10:54","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/03/02/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 550,"post_author": 1,"post_date": "2016-03-02 22:12:23","post_date_gmt": "2016-03-02 13:12:23","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちら様のものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>★ コードカラーの例</strong>
$ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
$ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
$ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>★ エイリアスの例</strong>
$ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
$ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
$ git checkoutコマンドの省略。
<pre>$ git config --global alias.co checkout</pre>
$ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。

上記のコードカラーとエイリアス一気に流す用に ▽
<pre>
git config --global color.diff auto
git config --global color.branch auto
git config --global color.status auto
git config --global color.interactive auto
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout
git config --global alias.ci commit
</pre>

&nbsp;&nbsp;&nbsp;&nbsp;

<SCRIPT charset=\"utf-8\" type=\"text/javascript\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=GetScriptTemplate\"> </SCRIPT> <NOSCRIPT><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></NOSCRIPT>

","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-02 22:12:23","post_modified_gmt": "2016-03-02 13:12:23","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/03/02/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 552,"post_author": 1,"post_date": "2016-03-03 11:07:26","post_date_gmt": "2016-03-03 02:07:26","post_content": "Macユーザーの私がWindowsでgitどうやるんだろうと思って見つけた方法をメモ。

<strong>☆１</strong>
まず、<a href=\"https://git-scm.com/\" target=\"_blank\">Gitの公式サイト</a>からfor Windows版をインストール。
&nbsp;
<strong>☆２</strong>
インストーラーを立ち上げて、Git Bashにチェックを入れる。(初期値でチェックされてる)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" rel=\"attachment wp-att-553\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" alt=\"git\" width=\"513\" height=\"398\" class=\"aligncenter size-full wp-image-553\" /></a>
&nbsp;
<strong>☆３</strong>
バンバン次に進む。(自分は英語を読まずにバンバン進んだが大丈夫だったのでたぶん大丈夫b)
インストールを完了する。
&nbsp;
<strong>☆４</strong>
初期値のままインストールすると、<em>C:\\Program Files\\Git</em>の中に<strong>git-bash.exe</strong>があるのでそのアプリケーションを起動すると、ターミナルのような画面が表示され、これまでと同じようにGitの操作ができる。
&nbsp;&nbsp;
※
GUIでやる人はGit GUIを☆２の時に選択(初期値でチェックされてる)すればGit GUIが使える。でもGUI使うとしたらSourceTreeかな？？？

&nbsp;","post_title": "Git windowsでgitコマンドを使う","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-windows%e3%81%a7git%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e3%82%92%e4%bd%bf%e3%81%86","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=552","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 553,"post_author": 1,"post_date": "2016-03-03 10:43:26","post_date_gmt": "2016-03-03 01:43:26","post_content": "","post_title": "git","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "git","to_ping": "","pinged": "","post_modified": "2016-03-03 10:43:26","post_modified_gmt": "2016-03-03 01:43:26","post_content_filtered": "","post_parent": 552,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 554,"post_author": 1,"post_date": "2016-03-03 10:59:35","post_date_gmt": "2016-03-03 01:59:35","post_content": "Macユーザーの私がWindowsでgitどうやるんだろうと思って見つけた方法をメモ。

<strong>☆１</strong>
まず、<a href=\"https://git-scm.com/\" target=\"_blank\">Gitの公式サイト</a>からfor Windows版をインストール。
&nbsp;
<strong>☆２</strong>
インストーラーを立ち上げて、Git Bashにチェックを入れる。(初期値で入っている)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" rel=\"attachment wp-att-553\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" alt=\"git\" width=\"513\" height=\"398\" class=\"aligncenter size-full wp-image-553\" /></a>
&nbsp;
<strong>☆３</strong>
バンバン次に進む。(自分は英語を読まずにバンバン進んだが大丈夫だったのでたぶん大丈夫b)
インストールを完了する。
&nbsp;
<strong>☆４</strong>
初期値のままインストールすると、<em>C:\\Program Files\\Git</em>の中に<strong>git-bash.exe</strong>があるのでそのアプリケーションを起動すると、ターミナルのような画面が表示され、これまでと同じようにGitの操作ができる。","post_title": "Git windowsでgitコマンドを使う","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "552-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-03 10:59:35","post_modified_gmt": "2016-03-03 01:59:35","post_content_filtered": "","post_parent": 552,"guid": "http://kumao-no-mori.com/2016/03/03/552-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 555,"post_author": 1,"post_date": "2016-03-03 11:07:26","post_date_gmt": "2016-03-03 02:07:26","post_content": "Macユーザーの私がWindowsでgitどうやるんだろうと思って見つけた方法をメモ。

<strong>☆１</strong>
まず、<a href=\"https://git-scm.com/\" target=\"_blank\">Gitの公式サイト</a>からfor Windows版をインストール。
&nbsp;
<strong>☆２</strong>
インストーラーを立ち上げて、Git Bashにチェックを入れる。(初期値でチェックされてる)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" rel=\"attachment wp-att-553\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" alt=\"git\" width=\"513\" height=\"398\" class=\"aligncenter size-full wp-image-553\" /></a>
&nbsp;
<strong>☆３</strong>
バンバン次に進む。(自分は英語を読まずにバンバン進んだが大丈夫だったのでたぶん大丈夫b)
インストールを完了する。
&nbsp;
<strong>☆４</strong>
初期値のままインストールすると、<em>C:\\Program Files\\Git</em>の中に<strong>git-bash.exe</strong>があるのでそのアプリケーションを起動すると、ターミナルのような画面が表示され、これまでと同じようにGitの操作ができる。
&nbsp;&nbsp;
※
GUIでやる人はGit GUIを☆２の時に選択(初期値でチェックされてる)すればGit GUIが使える。でもGUI使うとしたらSourceTreeかな？？？
&nbsp;&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git windowsでgitコマンドを使う","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "552-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-03 11:07:26","post_modified_gmt": "2016-03-03 02:07:26","post_content_filtered": "","post_parent": 552,"guid": "http://kumao-no-mori.com/2016/03/03/552-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 558,"post_author": 1,"post_date": "2016-03-07 18:53:53","post_date_gmt": "2016-03-07 09:53:53","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
<strong>☆ Authorの変更</strong>
コミットした後にAuthorを変更したい場合、
<pre>
git commit --amend --author=\"changeName <test@example.com>\"
</pre>
で名前とメールアドレスを設定。
するとこのような画面になるので↓
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" rel=\"attachment wp-att-563\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" alt=\"author\" width=\"692\" height=\"223\" class=\"aligncenter size-full wp-image-563\" /></a>
ちゃんと今指定したものになっているか確認して保存して閉じる。
変更されたものを
<pre>
git push -f origin master
</pre>
で強制プッシュで完了。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" rel=\"attachment wp-att-568\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" alt=\"author_change\" width=\"210\" height=\"104\" class=\"aligncenter size-full wp-image-568\" /></a>
このように変更されます。(強制プッシュは怖いので、ブランチをよく確認してください！！)

&nbsp;","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-commiter%e8%a8%ad%e5%ae%9a%e3%81%a8author%e5%a4%89%e6%9b%b4","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=558","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 559,"post_author": 1,"post_date": "2016-03-03 12:44:03","post_date_gmt": "2016-03-03 03:44:03","post_content": "","post_title": "commiter","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "commiter","to_ping": "","pinged": "","post_modified": "2016-03-03 12:44:03","post_modified_gmt": "2016-03-03 03:44:03","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 560,"post_author": 1,"post_date": "2016-03-03 14:16:09","post_date_gmt": "2016-03-03 05:16:09","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "558-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-03 14:16:09","post_modified_gmt": "2016-03-03 05:16:09","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/2016/03/03/558-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 561,"post_author": 1,"post_date": "2016-03-07 18:45:24","post_date_gmt": "2016-03-07 09:45:24","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
<strong>☆ Authorの変更</strong>
コミットした後にAuthorを変更したい場合、
<pre>

</pre>","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "558-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-07 18:45:24","post_modified_gmt": "2016-03-07 09:45:24","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/2016/03/07/558-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 562,"post_author": 1,"post_date": "2016-03-07 18:46:39","post_date_gmt": "2016-03-07 09:46:39","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
<strong>☆ Authorの変更</strong>
コミットした後にAuthorを変更したい場合、
<pre>
git commit --amend --author=\"changeName <test@example.com>\"
</pre>","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "558-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-07 18:46:39","post_modified_gmt": "2016-03-07 09:46:39","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/2016/03/07/558-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 563,"post_author": 1,"post_date": "2016-03-07 18:48:42","post_date_gmt": "2016-03-07 09:48:42","post_content": "","post_title": "author","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "author","to_ping": "","pinged": "","post_modified": "2016-03-07 18:48:42","post_modified_gmt": "2016-03-07 09:48:42","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 565,"post_author": 1,"post_date": "2016-03-07 18:51:25","post_date_gmt": "2016-03-07 09:51:25","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
<strong>☆ Authorの変更</strong>
コミットした後にAuthorを変更したい場合、
<pre>
git commit --amend --author=\"changeName <test@example.com>\"
</pre>
で名前とメールアドレスを設定。
するとこのような画面になるので↓
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" rel=\"attachment wp-att-563\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" alt=\"author\" width=\"692\" height=\"223\" class=\"aligncenter size-full wp-image-563\" /></a>
ちゃんと今指定したものになっているか確認して保存して閉じる。
変更されたものを
<pre>
git push -f origin master
</pre>
で強制プッシュで完了。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" rel=\"attachment wp-att-564\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" alt=\"author_change\" width=\"212\" height=\"55\" class=\"aligncenter size-full wp-image-564\" /></a>
このように変更されます。","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "558-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-07 18:51:25","post_modified_gmt": "2016-03-07 09:51:25","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/2016/03/07/558-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 566,"post_author": 1,"post_date": "2016-03-07 18:53:53","post_date_gmt": "2016-03-07 09:53:53","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
<strong>☆ Authorの変更</strong>
コミットした後にAuthorを変更したい場合、
<pre>
git commit --amend --author=\"changeName <test@example.com>\"
</pre>
で名前とメールアドレスを設定。
するとこのような画面になるので↓
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" rel=\"attachment wp-att-563\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" alt=\"author\" width=\"692\" height=\"223\" class=\"aligncenter size-full wp-image-563\" /></a>
ちゃんと今指定したものになっているか確認して保存して閉じる。
変更されたものを
<pre>
git push -f origin master
</pre>
で強制プッシュで完了。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" rel=\"attachment wp-att-564\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" alt=\"author_change\" width=\"212\" height=\"55\" class=\"aligncenter size-full wp-image-564\" /></a>
このように変更されます。

&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "558-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-07 18:53:53","post_modified_gmt": "2016-03-07 09:53:53","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/2016/03/07/558-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 568,"post_author": 1,"post_date": "2016-03-07 18:56:39","post_date_gmt": "2016-03-07 09:56:39","post_content": "","post_title": "author_change","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "author_change","to_ping": "","pinged": "","post_modified": "2016-03-07 18:56:39","post_modified_gmt": "2016-03-07 09:56:39","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 569,"post_author": 1,"post_date": "2016-03-07 18:56:47","post_date_gmt": "2016-03-07 09:56:47","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
<strong>☆ Authorの変更</strong>
コミットした後にAuthorを変更したい場合、
<pre>
git commit --amend --author=\"changeName <test@example.com>\"
</pre>
で名前とメールアドレスを設定。
するとこのような画面になるので↓
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" rel=\"attachment wp-att-563\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" alt=\"author\" width=\"692\" height=\"223\" class=\"aligncenter size-full wp-image-563\" /></a>
ちゃんと今指定したものになっているか確認して保存して閉じる。
変更されたものを
<pre>
git push -f origin master
</pre>
で強制プッシュで完了。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" rel=\"attachment wp-att-568\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" alt=\"author_change\" width=\"210\" height=\"104\" class=\"aligncenter size-full wp-image-568\" /></a>
このように変更されます。

&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "558-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-07 18:56:47","post_modified_gmt": "2016-03-07 09:56:47","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/2016/03/07/558-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 570,"post_author": 1,"post_date": "2016-03-07 18:58:17","post_date_gmt": "2016-03-07 09:58:17","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
<strong>☆ Authorの変更</strong>
コミットした後にAuthorを変更したい場合、
<pre>
git commit --amend --author=\"changeName <test@example.com>\"
</pre>
で名前とメールアドレスを設定。
するとこのような画面になるので↓
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" rel=\"attachment wp-att-563\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" alt=\"author\" width=\"692\" height=\"223\" class=\"aligncenter size-full wp-image-563\" /></a>
ちゃんと今指定したものになっているか確認して保存して閉じる。
変更されたものを
<pre>
git push -f origin master
</pre>
で強制プッシュで完了。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" rel=\"attachment wp-att-568\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" alt=\"author_change\" width=\"210\" height=\"104\" class=\"aligncenter size-full wp-image-568\" /></a>
このように変更されます。(強制プッシュは怖いので、ブランチをよく確認してください！！)

&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "558-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-07 18:58:17","post_modified_gmt": "2016-03-07 09:58:17","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/2016/03/07/558-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 571,"post_author": 1,"post_date": "2016-03-07 22:24:28","post_date_gmt": "2016-03-07 13:24:28","post_content": "★Hamlとは★
Hamlはhtmlを見やすくスッキリ、美しく記述することができる

★環境設定★
RubyがベースのためRubyがインストールされてるのが前提である
gem(Ruby)が最新版の状態でHamlをインストール

☆公式サイト
<a href=\"http://haml.info/\">http://haml.info/</a>

☆コマンド(Mac)
<pre class=\"lang:sh decode:true \">gem install haml</pre>

★コンパイル★
ファイルの拡張子は.hamlになる。
hamlをhanlコマンドでコンパイルし、htmlで出力する形になる。

haml \'コンパイル前のhamlファイル\' \'コンパイル後のhtmlファイル\'
<pre>haml index.haml index.html</pre>
hamlのオプションは
<pre>haml --help</pre>
で確認。

★書き方★
hamlだと、htmlで煩わしい閉じタグを書かずに済みます。
頭に%を付けるだけでokです。
%header は &lt;header&gt;&lt;/header&gt; ということ。

例えば %body の中に Hello World! と打ちたい場合はこんな感じです。
<pre>/ bodyタグで囲みたい場合

 %body 
   Hallo World!

-# 
  ちなみに、一行コメントの\'/\'も、インデントをつければ
  複数行のコメントをかける。

-# これはhaml内のみのコメントアウト。htmlには表示されません。</pre>
&nbsp;","post_title": "Haml勉強メモ１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "57-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-07 22:24:28","post_modified_gmt": "2016-03-07 13:24:28","post_content_filtered": "","post_parent": 57,"guid": "http://kumao-no-mori.com/2016/03/07/57-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 572,"post_author": 1,"post_date": "2016-03-08 00:20:34","post_date_gmt": "2016-03-07 15:20:34","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</br>
<a style=\"margin:0 auto\" href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<!-- Place this tag where you want the button to render. -->
<a align=\"center\" class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><!-- Place this tag right after the last button or just before your close body tag. -->
<script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</p>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-08 00:20:34","post_modified_gmt": "2016-03-07 15:20:34","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/03/08/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 573,"post_author": 1,"post_date": "2016-03-08 00:26:21","post_date_gmt": "2016-03-07 15:26:21","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</br>
<a align=\"center\" href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<!-- Place this tag where you want the button to render. -->
<a align=\"center\" class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><!-- Place this tag right after the last button or just before your close body tag. -->
<script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</p>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-08 00:26:21","post_modified_gmt": "2016-03-07 15:26:21","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/03/08/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 574,"post_author": 1,"post_date": "2016-03-08 00:27:44","post_date_gmt": "2016-03-07 15:27:44","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>食いしん坊だよ★</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<!-- Place this tag where you want the button to render. -->
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><!-- Place this tag right after the last button or just before your close body tag. -->
<script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-08 00:27:44","post_modified_gmt": "2016-03-07 15:27:44","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/03/08/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 576,"post_author": 1,"post_date": "2016-03-16 19:35:17","post_date_gmt": "2016-03-16 10:35:17","post_content": "ES6(ECMAScript6)のアロー関数についてメモ。
=> これがアロー関数。
&nbsp;
javaScriptでは
<pre>
function hoge(huga) {
    return true;
};
</pre>
のように記述していましたが、
ES6だと上記のが
<pre>
var hoge = huga =>  true;
// var 関数名 = 引数 => 処理
</pre>
の一行で済ますことができる。

&nbsp;","post_title": "ES6 アロー関数について","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "es6%e3%80%80%e3%82%a2%e3%83%ad%e3%83%bc%e9%96%a2%e6%95%b0%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=576","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 577,"post_author": 1,"post_date": "2016-03-16 19:35:17","post_date_gmt": "2016-03-16 10:35:17","post_content": "ES6(ECMAScript6)のアロー関数についてメモ。
&nbsp;
javaScriptでは
<pre>
function hoge(huga) {
    return true;
};
</pre>
のように記述していましたが、
ES6だと上記のが
<pre>
var hoge = huga =>  true;
// var 関数名 = 引数 => 処理
</pre>
の一行で済ますことができる。
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ES6　アロー関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "576-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-16 19:35:17","post_modified_gmt": "2016-03-16 10:35:17","post_content_filtered": "","post_parent": 576,"guid": "http://kumao-no-mori.com/2016/03/16/576-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 578,"post_author": 1,"post_date": "2016-03-16 19:36:34","post_date_gmt": "2016-03-16 10:36:34","post_content": "ES6(ECMAScript6)のアロー関数についてメモ。
=> これがアロー関数。
&nbsp;
javaScriptでは
<pre>
function hoge(huga) {
    return true;
};
</pre>
のように記述していましたが、
ES6だと上記のが
<pre>
var hoge = huga =>  true;
// var 関数名 = 引数 => 処理
</pre>
の一行で済ますことができる。
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ES6　アロー関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "576-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-16 19:36:34","post_modified_gmt": "2016-03-16 10:36:34","post_content_filtered": "","post_parent": 576,"guid": "http://kumao-no-mori.com/2016/03/16/576-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 580,"post_author": 1,"post_date": "2016-03-17 11:12:16","post_date_gmt": "2016-03-17 02:12:16","post_content": "gulpを回した時に <strong>Warning: gulp version mismatch:</strong> に出くわしたのでメモ。
&nbsp;
<pre>Warning: gulp version mismatch:
Global gulp is 3.9.1
Local gulp is 3.9.0
</pre>
GlobalのバージョンとLocalのバージョンがちがうというエラー。
&nbsp;
Globalのバージョンに合わせるにはこの場合
<pre>
npm install gulp@3.9.1 --save
</pre>

とすれば良い。


&nbsp;","post_title": "gulp LocalのバージョンをGlobalのバージョンに合わせる","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "gulp%e3%80%80local%e3%81%ae%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e3%82%92global%e3%81%ae%e3%83%90%e3%83%bc%e3%82%b8%e3%83%a7%e3%83%b3%e3%81%ab%e5%90%88%e3%82%8f%e3%81%9b%e3%82%8b","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=580","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 581,"post_author": 1,"post_date": "2016-03-17 11:12:16","post_date_gmt": "2016-03-17 02:12:16","post_content": "gulpを回した時に <strong>Warning: gulp version mismatch:</strong> に出くわしたのでメモ。
＆nbsp;
<pre>Warning: gulp version mismatch:
Global gulp is 3.9.1
Local gulp is 3.9.0
</pre>
GlobalのバージョンとLocalのバージョンがちがうというエラー。
Globalのバージョンに合わせるにはこの場合
<pre>
npm install gulp@3.9.1 --save
</pre>

とすれば良い。


&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "gulp　LocalのバージョンをGlobalのバージョンに合わせる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "580-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-17 11:12:16","post_modified_gmt": "2016-03-17 02:12:16","post_content_filtered": "","post_parent": 580,"guid": "http://kumao-no-mori.com/2016/03/17/580-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 582,"post_author": 1,"post_date": "2016-03-17 11:13:35","post_date_gmt": "2016-03-17 02:13:35","post_content": "gulpを回した時に <strong>Warning: gulp version mismatch:</strong> に出くわしたのでメモ。
&nbsp;
<pre>Warning: gulp version mismatch:
Global gulp is 3.9.1
Local gulp is 3.9.0
</pre>
GlobalのバージョンとLocalのバージョンがちがうというエラー。
Globalのバージョンに合わせるにはこの場合
<pre>
npm install gulp@3.9.1 --save
</pre>

とすれば良い。


&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "gulp　LocalのバージョンをGlobalのバージョンに合わせる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "580-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-17 11:13:35","post_modified_gmt": "2016-03-17 02:13:35","post_content_filtered": "","post_parent": 580,"guid": "http://kumao-no-mori.com/2016/03/17/580-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 583,"post_author": 1,"post_date": "2016-03-17 11:14:34","post_date_gmt": "2016-03-17 02:14:34","post_content": "gulpを回した時に <strong>Warning: gulp version mismatch:</strong> に出くわしたのでメモ。
&nbsp;
<pre>Warning: gulp version mismatch:
Global gulp is 3.9.1
Local gulp is 3.9.0
</pre>
GlobalのバージョンとLocalのバージョンがちがうというエラー。
&nbsp;
Globalのバージョンに合わせるにはこの場合
<pre>
npm install gulp@3.9.1 --save
</pre>

とすれば良い。


&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "gulp　LocalのバージョンをGlobalのバージョンに合わせる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "580-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-17 11:14:34","post_modified_gmt": "2016-03-17 02:14:34","post_content_filtered": "","post_parent": 580,"guid": "http://kumao-no-mori.com/2016/03/17/580-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 584,"post_author": 1,"post_date": "2016-03-17 18:18:32","post_date_gmt": "2016-03-17 09:18:32","post_content": "ES6(ECMAScript6)のアロー関数についてメモ。
=> これがアロー関数。
&nbsp;
javaScriptでは
<pre>
function hoge(huga) {
    return true;
};
</pre>
のように記述していましたが、
ES6だと上記のが
<pre>
var hoge = huga =>  true;
// var 関数名 = 引数 => 処理
</pre>
の一行で済ますことができる。
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ES6 アロー関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "576-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-17 18:18:32","post_modified_gmt": "2016-03-17 09:18:32","post_content_filtered": "","post_parent": 576,"guid": "http://kumao-no-mori.com/2016/03/17/576-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 585,"post_author": 1,"post_date": "2016-03-17 18:18:48","post_date_gmt": "2016-03-17 09:18:48","post_content": "gulpを回した時に <strong>Warning: gulp version mismatch:</strong> に出くわしたのでメモ。
&nbsp;
<pre>Warning: gulp version mismatch:
Global gulp is 3.9.1
Local gulp is 3.9.0
</pre>
GlobalのバージョンとLocalのバージョンがちがうというエラー。
&nbsp;
Globalのバージョンに合わせるにはこの場合
<pre>
npm install gulp@3.9.1 --save
</pre>

とすれば良い。


&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "gulp LocalのバージョンをGlobalのバージョンに合わせる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "580-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-17 18:18:48","post_modified_gmt": "2016-03-17 09:18:48","post_content_filtered": "","post_parent": 580,"guid": "http://kumao-no-mori.com/2016/03/17/580-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 587,"post_author": 1,"post_date": "2016-03-24 14:34:33","post_date_gmt": "2016-03-24 05:34:33","post_content": "USキーボードで入力切り替えをするとき、初期は[Control]+[Space]で切り替えることになるのですが、
これが意外に面倒くさくて、JISキーボードと同じように設定してみました。
簡単ですぐにできます。

&nbsp;
こちらの
<a href=\"https://pqrs.org/osx/karabiner/index.html.ja\" target=\"_blank\">Karabiner</a>
のサイト様から、最新版をダウンロード。
&nbsp;
ダウンロードが完了すると、こんな画面が開けます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" rel=\"attachment wp-att-588\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" alt=\"karabinerサンプル\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-588\" /></a>
▲ このようにChangeKeyから、<strong>CompleteViMode > ForJapanese</strong>を開き、このようにチェックします。
（左側のCommandを押したら英字、右側のCommandを押したら日本語の設定）
&nbsp;
そして次に同じChangeKeyから、<strong>DeviceSpecificMixedSettings > ForJapanese</strong>から好みの動きを設定できます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" rel=\"attachment wp-att-589\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" alt=\"karabinerサンプル２\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-589\" /></a>
▲ （★おすすめ）がおすすめです。この設定ができたらKarabinerを閉じます。
&nbsp;
以上でCommand_Lが英字、Command_Rが日本語に設定できます。
&nbsp;
ですが、初期の[Control]+[Space]での切り替えが可能なままです。
もうこれはいらないので、
システム環境から <strong>キーボード > ショートカット > 入力ソース > 前の入力ソースを選択 ^スペース</strong>
 のチェックを外します。
すると、[Control]+[Space]が無効になってスッキリします。


&nbsp;","post_title": "USキーボードで入力切り替えを簡単にする（Mac）","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "us%e3%82%ad%e3%83%bc%e3%83%9c%e3%83%bc%e3%83%89%e3%81%a7%e5%85%a5%e5%8a%9b%e5%88%87%e3%82%8a%e6%9b%bf%e3%81%88%e3%82%92%e7%b0%a1%e5%8d%98%e3%81%ab%e3%81%99%e3%82%8b%ef%bc%88mac%ef%bc%89","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=587","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 588,"post_author": 1,"post_date": "2016-03-24 14:13:30","post_date_gmt": "2016-03-24 05:13:30","post_content": "","post_title": "karabinerサンプル","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "karabiner%e3%82%b5%e3%83%b3%e3%83%95%e3%82%9a%e3%83%ab","to_ping": "","pinged": "","post_modified": "2016-03-24 14:13:30","post_modified_gmt": "2016-03-24 05:13:30","post_content_filtered": "","post_parent": 587,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 589,"post_author": 1,"post_date": "2016-03-24 14:21:54","post_date_gmt": "2016-03-24 05:21:54","post_content": "","post_title": "karabinerサンプル２","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "karabiner%e3%82%b5%e3%83%b3%e3%83%95%e3%82%9a%e3%83%ab%ef%bc%92","to_ping": "","pinged": "","post_modified": "2016-03-24 14:21:54","post_modified_gmt": "2016-03-24 05:21:54","post_content_filtered": "","post_parent": 587,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 590,"post_author": 1,"post_date": "2016-03-24 14:29:21","post_date_gmt": "2016-03-24 05:29:21","post_content": "USキーボードで入力切り替えをするとき、初期は[Control]+[Space]で切り替えることになるのですが、
これが意外に面倒くさくて、JISキーボードと同じように設定してみました。
簡単ですぐにできます。

&nbsp;
こちらの
<a href=\"https://pqrs.org/osx/karabiner/index.html.ja\" target=\"_blank\">Karabiner</a>
のサイトから、最新版をダウンロード。
&nbsp;
ダウンロードが完了すると、こんな画面が開けます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" rel=\"attachment wp-att-588\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" alt=\"karabinerサンプル\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-588\" /></a>
▲ このようにChangeKeyから、CompleteViMode > ForJapaneseを開き、このようにチェックします。
（左側のコマンドを押したら英字、右側のコマンドを押したら日本語の設定）
&nbsp;
そして次に同じChangeKeyから、DeviceSpecificMixedSettings > ForJapaneseから好みの動きを設定できます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" rel=\"attachment wp-att-589\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" alt=\"karabinerサンプル２\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-589\" /></a>
▲ （★おすすめ）がおすすめです。この設定ができたらKarabinerを閉じます。
&nbsp;
以上でCommand_Lが英字、Command_Rが日本語に設定できます。
&nbsp;
ですが、初期の[Control]+[Space]での切り替えが可能なままです。
もうこれはいらないので、
システム環境から キーボード > ショートカット > 入力ソース > 前の入力ソースを選択 ^スペース
のチェックを外します。
すると、[Control]+[Space]が無効になってスッキリします。","post_title": "USキーボードで入力切り替えを簡単にする（Mac）","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "587-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-24 14:29:21","post_modified_gmt": "2016-03-24 05:29:21","post_content_filtered": "","post_parent": 587,"guid": "http://kumao-no-mori.com/2016/03/24/587-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 591,"post_author": 1,"post_date": "2016-03-24 14:33:58","post_date_gmt": "2016-03-24 05:33:58","post_content": "USキーボードで入力切り替えをするとき、初期は[Control]+[Space]で切り替えることになるのですが、
これが意外に面倒くさくて、JISキーボードと同じように設定してみました。
簡単ですぐにできます。

&nbsp;
こちらの
<a href=\"https://pqrs.org/osx/karabiner/index.html.ja\" target=\"_blank\">Karabiner</a>
のサイト様から、最新版をダウンロード。
&nbsp;
ダウンロードが完了すると、こんな画面が開けます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" rel=\"attachment wp-att-588\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" alt=\"karabinerサンプル\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-588\" /></a>
▲ このようにChangeKeyから、<strong>CompleteViMode > ForJapanese</strong>を開き、このようにチェックします。
（左側のコマンドを押したら英字、右側のコマンドを押したら日本語の設定）
&nbsp;
そして次に同じChangeKeyから、<strong>DeviceSpecificMixedSettings > ForJapanese</strong>から好みの動きを設定できます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" rel=\"attachment wp-att-589\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" alt=\"karabinerサンプル２\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-589\" /></a>
▲ （★おすすめ）がおすすめです。この設定ができたらKarabinerを閉じます。
&nbsp;
以上でCommand_Lが英字、Command_Rが日本語に設定できます。
&nbsp;
ですが、初期の[Control]+[Space]での切り替えが可能なままです。
もうこれはいらないので、
システム環境から <strong>キーボード > ショートカット > 入力ソース > 前の入力ソースを選択 ^スペース</strong>
 のチェックを外します。
すると、[Control]+[Space]が無効になってスッキリします。
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "USキーボードで入力切り替えを簡単にする（Mac）","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "587-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-24 14:33:58","post_modified_gmt": "2016-03-24 05:33:58","post_content_filtered": "","post_parent": 587,"guid": "http://kumao-no-mori.com/2016/03/24/587-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 593,"post_author": 1,"post_date": "2016-03-24 19:48:09","post_date_gmt": "2016-03-24 10:48:09","post_content": "ES6でつまずいて死にかけたのでメモ。

ES6でjQueryのeachを利用して
<pre>
const i = 1;
$(\'.title\').each(() => {
    $(this).attr(\'class\',\'title\' + (++i));
})
</pre>
例えばこんな感じで、titleクラスがついたエレメントに連番をつけようとした場合、
これでコンパイル後のソースを確認したら、$(this)の箇所が$(undefined)になってしまいます。
なんか引数が足りないとundefinedが代入されてしまうらしいです。
&nbsp;
なので引数を増やして、
<pre>
const i = 1;
$(\'.title\').each((data, ele) => {
    $(ele).attr(\'class\',\'title\' + (++i));
})
</pre>
でなんか解決できました。

&nbsp;","post_title": "ES6 babelで変換すると$(this)に$(undefined)が返ってくる問題","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "es6-babel%e3%81%a7%e5%a4%89%e6%8f%9bbabel%e3%81%a7%e5%a4%89%e6%8f%9b%e3%81%99%e3%82%8b%e3%81%a8this%e3%81%abundefined%e3%81%8c%e8%bf%94%e3%81%a3%e3%81%a6%e3%81%8f%e3%82%8b%e5%95%8f%e9%a1%8c","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=593","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 594,"post_author": 1,"post_date": "2016-03-24 19:26:43","post_date_gmt": "2016-03-24 10:26:43","post_content": "","post_title": "ES6 babelで変換","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "593-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-24 19:26:43","post_modified_gmt": "2016-03-24 10:26:43","post_content_filtered": "","post_parent": 593,"guid": "http://kumao-no-mori.com/2016/03/24/593-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 595,"post_author": 1,"post_date": "2016-03-24 19:48:09","post_date_gmt": "2016-03-24 10:48:09","post_content": "ES6で躓いて死にかけたのでメモ。

ES6でjQueryのeachを利用して
<pre>
var i = 1;
$(\'.title\').each(() => {
    $(this).attr(\'class\',\'title\' + (++i));
})
</pre>
例えばこんな感じで、titleクラスがついたエレメントに連番をつけようとした場合、
これでコンパイル後のソースを確認したら、$(this)の箇所が$(undefined)になってしまいます。
なんか引数が足りないとundefinedが代入されてしまうらしいです。
&nbsp;
なので引数を増やして、
<pre>
var i = 1;
$(\'.title\').each((data, ele) => {
    $(ele).attr(\'class\',\'title\' + (++i));
})
</pre>
でなんか解決できました。

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ES6 babelで変換","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "593-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-24 19:48:09","post_modified_gmt": "2016-03-24 10:48:09","post_content_filtered": "","post_parent": 593,"guid": "http://kumao-no-mori.com/2016/03/24/593-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 596,"post_author": 1,"post_date": "2016-03-24 19:50:48","post_date_gmt": "2016-03-24 10:50:48","post_content": "ES6で躓いて死にかけたのでメモ。

ES6でjQueryのeachを利用して
<pre>
var i = 1;
$(\'.title\').each(() => {
    $(this).attr(\'class\',\'title\' + (++i));
})
</pre>
例えばこんな感じで、titleクラスがついたエレメントに連番をつけようとした場合、
これでコンパイル後のソースを確認したら、$(this)の箇所が$(undefined)になってしまいます。
なんか引数が足りないとundefinedが代入されてしまうらしいです。
&nbsp;
なので引数を増やして、
<pre>
var i = 1;
$(\'.title\').each((data, ele) => {
    $(ele).attr(\'class\',\'title\' + (++i));
})
</pre>
でなんか解決できました。

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ES6 babelで変換すると$(this)に$(undefined)が返ってくる問題","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "593-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-24 19:50:48","post_modified_gmt": "2016-03-24 10:50:48","post_content_filtered": "","post_parent": 593,"guid": "http://kumao-no-mori.com/2016/03/24/593-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 597,"post_author": 1,"post_date": "2016-03-24 19:52:27","post_date_gmt": "2016-03-24 10:52:27","post_content": "ES6でつまずいて死にかけたのでメモ。

ES6でjQueryのeachを利用して
<pre>
var i = 1;
$(\'.title\').each(() => {
    $(this).attr(\'class\',\'title\' + (++i));
})
</pre>
例えばこんな感じで、titleクラスがついたエレメントに連番をつけようとした場合、
これでコンパイル後のソースを確認したら、$(this)の箇所が$(undefined)になってしまいます。
なんか引数が足りないとundefinedが代入されてしまうらしいです。
&nbsp;
なので引数を増やして、
<pre>
var i = 1;
$(\'.title\').each((data, ele) => {
    $(ele).attr(\'class\',\'title\' + (++i));
})
</pre>
でなんか解決できました。

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ES6 babelで変換すると$(this)に$(undefined)が返ってくる問題","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "593-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-24 19:52:27","post_modified_gmt": "2016-03-24 10:52:27","post_content_filtered": "","post_parent": 593,"guid": "http://kumao-no-mori.com/2016/03/24/593-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 598,"post_author": 1,"post_date": "2016-03-24 19:57:11","post_date_gmt": "2016-03-24 10:57:11","post_content": "ES6でつまずいて死にかけたのでメモ。

ES6でjQueryのeachを利用して
<pre>
const i = 1;
$(\'.title\').each(() => {
    $(this).attr(\'class\',\'title\' + (++i));
})
</pre>
例えばこんな感じで、titleクラスがついたエレメントに連番をつけようとした場合、
これでコンパイル後のソースを確認したら、$(this)の箇所が$(undefined)になってしまいます。
なんか引数が足りないとundefinedが代入されてしまうらしいです。
&nbsp;
なので引数を増やして、
<pre>
const i = 1;
$(\'.title\').each((data, ele) => {
    $(ele).attr(\'class\',\'title\' + (++i));
})
</pre>
でなんか解決できました。

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "ES6 babelで変換すると$(this)に$(undefined)が返ってくる問題","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "593-revision-v1","to_ping": "","pinged": "","post_modified": "2016-03-24 19:57:11","post_modified_gmt": "2016-03-24 10:57:11","post_content_filtered": "","post_parent": 593,"guid": "http://kumao-no-mori.com/2016/03/24/593-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 600,"post_author": 1,"post_date": "2016-04-04 22:12:12","post_date_gmt": "2016-04-04 13:12:12","post_content": "<strong>☆letについて</strong>
javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になります。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// ES6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配...)
letは値を再代入することができるが、もう一度letで宣言することはできない。


<strong>☆constについて</strong>
constはletと同じようにブロックスコープができるのですが、constは再代入もできなくなります。

<pre>
// ES6
var hoge = () => {
    for( const i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined

    const hogehoge = 10;
    alert(i); // = 10
          
    hogehoge = 20;
    alert(i); // = TypeError
    
｝
</pre>

といった感じ。(こちらも動作未確認です...)
再宣言も再代入もできません。

&nbsp;



","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "es6-let%e3%81%a8const%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=600","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 601,"post_author": 1,"post_date": "2016-04-04 19:25:13","post_date_gmt": "2016-04-04 10:25:13","post_content": "<strong>☆letについて</strong>


javascriptでは、","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 19:25:13","post_modified_gmt": "2016-04-04 10:25:13","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 602,"post_author": 1,"post_date": "2016-04-04 19:36:37","post_date_gmt": "2016-04-04 10:36:37","post_content": "<strong>☆letについて</strong>

javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になる。

<pre>
for(var i=0; i<10; i++) {
  sum += i;
}
</pre>
","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 19:36:37","post_modified_gmt": "2016-04-04 10:36:37","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 603,"post_author": 1,"post_date": "2016-04-04 20:26:35","post_date_gmt": "2016-04-04 11:26:35","post_content": "<strong>☆letについて</strong>

javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になる。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
// alert(i);  ＝ 10
}
hoge();
</pre>

<pre>
// es6の場合
var hoge = () => {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
// alert(i);  ＝ 10
｝
</pre>


","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 20:26:35","post_modified_gmt": "2016-04-04 11:26:35","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 604,"post_author": 1,"post_date": "2016-04-04 20:29:41","post_date_gmt": "2016-04-04 11:29:41","post_content": "<strong>☆letについて</strong>

javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になる。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// es6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 20:29:41","post_modified_gmt": "2016-04-04 11:29:41","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 605,"post_author": 1,"post_date": "2016-04-04 20:45:59","post_date_gmt": "2016-04-04 11:45:59","post_content": "<strong>☆letについて</strong>

javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になる。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// es6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配ですが from電車)


<strong>☆constについて</strong>

constはletのように、変数定義に","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 20:45:59","post_modified_gmt": "2016-04-04 11:45:59","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 606,"post_author": 1,"post_date": "2016-04-04 22:12:12","post_date_gmt": "2016-04-04 13:12:12","post_content": "<strong>☆letについて</strong>

javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になります。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// ES6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配...)
letは値を再代入することができるが、もう一度letで宣言することはできない。


<strong>☆constについて</strong>

constはletと同じようにブロックスコープができるのですが、constは再代入もできなくなります。

<pre>
// ES6
var hoge = () => {
    for( const i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined

    const hogehoge = 10;
    alert(i); // = 10
          
    hogehoge = 20;
    alert(i); // = TypeError
    
｝
</pre>

といった感じ。(こちらも動作未確認です...)
再宣言も再代入もできません。","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 22:12:12","post_modified_gmt": "2016-04-04 13:12:12","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 607,"post_author": 1,"post_date": "2016-04-04 22:20:47","post_date_gmt": "2016-04-04 13:20:47","post_content": "<strong>☆letについて</strong>
javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になります。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// ES6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配...)
letは値を再代入することができるが、もう一度letで宣言することはできない。


<strong>☆constについて</strong>
constはletと同じようにブロックスコープができるのですが、constは再代入もできなくなります。

<pre>
// ES6
var hoge = () => {
    for( const i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined

    const hogehoge = 10;
    alert(i); // = 10
          
    hogehoge = 20;
    alert(i); // = TypeError
    
｝
</pre>

といった感じ。(こちらも動作未確認です...)
再宣言も再代入もできません。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=48&l=ur1&category=books&f=ifr\" width=\"728\" height=\"90\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>

","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 22:20:47","post_modified_gmt": "2016-04-04 13:20:47","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 608,"post_author": 1,"post_date": "2016-04-04 22:21:27","post_date_gmt": "2016-04-04 13:21:27","post_content": "<strong>☆letについて</strong>
javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になります。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// ES6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配...)
letは値を再代入することができるが、もう一度letで宣言することはできない。


<strong>☆constについて</strong>
constはletと同じようにブロックスコープができるのですが、constは再代入もできなくなります。

<pre>
// ES6
var hoge = () => {
    for( const i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined

    const hogehoge = 10;
    alert(i); // = 10
          
    hogehoge = 20;
    alert(i); // = TypeError
    
｝
</pre>

といった感じ。(こちらも動作未確認です...)
再宣言も再代入もできません。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=48&l=ur1&category=books&f=ifr\" width=\"728\" height=\"90\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=293&l=ur1&category=amazonsale&f=ifr\" width=\"640\" height=\"100\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 22:21:27","post_modified_gmt": "2016-04-04 13:21:27","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 609,"post_author": 1,"post_date": "2016-04-04 22:25:07","post_date_gmt": "2016-04-04 13:25:07","post_content": "<strong>☆letについて</strong>
javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になります。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// ES6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配...)
letは値を再代入することができるが、もう一度letで宣言することはできない。


<strong>☆constについて</strong>
constはletと同じようにブロックスコープができるのですが、constは再代入もできなくなります。

<pre>
// ES6
var hoge = () => {
    for( const i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined

    const hogehoge = 10;
    alert(i); // = 10
          
    hogehoge = 20;
    alert(i); // = TypeError
    
｝
</pre>

といった感じ。(こちらも動作未確認です...)
再宣言も再代入もできません。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=293&l=ur1&category=amazonsale&f=ifr\" width=\"640\" height=\"100\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 22:25:07","post_modified_gmt": "2016-04-04 13:25:07","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 610,"post_author": 1,"post_date": "2016-04-04 22:34:16","post_date_gmt": "2016-04-04 13:34:16","post_content": "<strong>☆letについて</strong>
javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になります。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// ES6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配...)
letは値を再代入することができるが、もう一度letで宣言することはできない。


<strong>☆constについて</strong>
constはletと同じようにブロックスコープができるのですが、constは再代入もできなくなります。

<pre>
// ES6
var hoge = () => {
    for( const i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined

    const hogehoge = 10;
    alert(i); // = 10
          
    hogehoge = 20;
    alert(i); // = TypeError
    
｝
</pre>

といった感じ。(こちらも動作未確認です...)
再宣言も再代入もできません。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=293&l=ur1&category=coupons&banner=1H3YX16MBEARGDW7D6G2&f=ifr\" width=\"640\" height=\"100\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 22:34:16","post_modified_gmt": "2016-04-04 13:34:16","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 611,"post_author": 1,"post_date": "2016-04-04 22:35:40","post_date_gmt": "2016-04-04 13:35:40","post_content": "<strong>☆letについて</strong>
javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になります。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// ES6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配...)
letは値を再代入することができるが、もう一度letで宣言することはできない。


<strong>☆constについて</strong>
constはletと同じようにブロックスコープができるのですが、constは再代入もできなくなります。

<pre>
// ES6
var hoge = () => {
    for( const i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined

    const hogehoge = 10;
    alert(i); // = 10
          
    hogehoge = 20;
    alert(i); // = TypeError
    
｝
</pre>

といった感じ。(こちらも動作未確認です...)
再宣言も再代入もできません。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>




","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-04 22:35:40","post_modified_gmt": "2016-04-04 13:35:40","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/04/04/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 612,"post_author": 1,"post_date": "2016-04-05 16:30:20","post_date_gmt": "2016-04-05 07:30:20","post_content": "<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"rePdLr\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/rePdLr/\">knockout</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;

","post_title": "Knockout.js  \"ようこそ〇〇さん\"のやつ","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "knockout-js-%e8%87%aa%e4%bd%9c%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=612","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 613,"post_author": 1,"post_date": "2016-04-05 16:22:39","post_date_gmt": "2016-04-05 07:22:39","post_content": "Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>
value
visible
text
</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout-3.4.0.jsファイルを落として読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
文字数カウント
姓名両方を打ち込んだ後のタイミングで表示
くらいです。

","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-05 16:22:39","post_modified_gmt": "2016-04-05 07:22:39","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/05/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 614,"post_author": 1,"post_date": "2016-04-05 16:24:54","post_date_gmt": "2016-04-05 07:24:54","post_content": "","post_title": "knockout_name","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "knockout_name","to_ping": "","pinged": "","post_modified": "2016-04-05 16:24:54","post_modified_gmt": "2016-04-05 07:24:54","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 615,"post_author": 1,"post_date": "2016-04-05 16:26:22","post_date_gmt": "2016-04-05 07:26:22","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>
value
visible
text
</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout-3.4.0.jsファイルを落として読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
文字数カウント
姓名両方を打ち込んだ後のタイミングで表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable()
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-05 16:26:22","post_modified_gmt": "2016-04-05 07:26:22","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/05/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 616,"post_author": 1,"post_date": "2016-04-05 16:27:00","post_date_gmt": "2016-04-05 07:27:00","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout-3.4.0.jsファイルを落として読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
文字数カウント
姓名両方を打ち込んだ後のタイミングで表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable()
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-05 16:27:00","post_modified_gmt": "2016-04-05 07:27:00","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/05/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 617,"post_author": 1,"post_date": "2016-04-05 16:27:25","post_date_gmt": "2016-04-05 07:27:25","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout-3.4.0.jsファイルを落として読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングで表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable()
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-05 16:27:25","post_modified_gmt": "2016-04-05 07:27:25","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/05/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 618,"post_author": 1,"post_date": "2016-04-05 16:30:20","post_date_gmt": "2016-04-05 07:30:20","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout-3.4.0.jsファイルを落として読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングで表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable()
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>




<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-05 16:30:20","post_modified_gmt": "2016-04-05 07:30:20","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/05/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 619,"post_author": 1,"post_date": "2016-04-05 16:32:27","post_date_gmt": "2016-04-05 07:32:27","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout-3.4.0.jsファイルを落として読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングで表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable()
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-05 16:32:27","post_modified_gmt": "2016-04-05 07:32:27","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/05/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 620,"post_author": 1,"post_date": "2016-04-05 16:33:33","post_date_gmt": "2016-04-05 07:33:33","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout-3.4.0.jsファイルを落として読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングで表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-05 16:33:33","post_modified_gmt": "2016-04-05 07:33:33","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/05/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 621,"post_author": 1,"post_date": "2016-04-05 21:04:29","post_date_gmt": "2016-04-05 12:04:29","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout.jsファイルを読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングで表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-05 21:04:29","post_modified_gmt": "2016-04-05 12:04:29","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/05/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 622,"post_author": 1,"post_date": "2016-04-06 12:39:41","post_date_gmt": "2016-04-06 03:39:41","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout.jsファイルを読み込んでから、このコードをブラウザで表示してみてください。
機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-06 12:39:41","post_modified_gmt": "2016-04-06 03:39:41","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/06/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 623,"post_author": 1,"post_date": "2016-04-07 12:51:29","post_date_gmt": "2016-04-07 03:51:29","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout.jsファイルを読み込んでから、このコードをブラウザで表示してみてください。(しょぼいですが...)
もしくはここからフォルダ落とせばすぐ開けます。↓
https://github.com/naokidoguchi/playground/tree/master/knockout

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-07 12:51:29","post_modified_gmt": "2016-04-07 03:51:29","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/07/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 624,"post_author": 1,"post_date": "2016-04-07 12:52:41","post_date_gmt": "2016-04-07 03:52:41","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" rel=\"attachment wp-att-614\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/knockout_name.png\" alt=\"knockout_name\" width=\"662\" height=\"262\" class=\"aligncenter size-full wp-image-614\" /></a>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。
もっと簡潔な書き方があるのかもしれませんが、初心者なのでこのくらいで....

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

knockout.jsファイルを読み込んでから、このコードをブラウザで表示してみてください。(しょぼいですが...)
もしくはここからフォルダ落とせばすぐ開けます。↓
<a href=\"https://github.com/naokidoguchi/playground/tree/master/knockout\" target=\"_blank\">github bynaokidoguchi</a>

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-07 12:52:41","post_modified_gmt": "2016-04-07 03:52:41","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/04/07/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 626,"post_author": 1,"post_date": "2016-04-13 13:36:01","post_date_gmt": "2016-04-13 04:36:01","post_content": "USキーボードで入力切り替えをするとき、初期は[Control]+[Space]で切り替えることになるのですが、
これが意外に面倒くさくて、JISキーボードと同じように設定してみました。
簡単ですぐにできます。

&nbsp;
こちらの
<a href=\"https://pqrs.org/osx/karabiner/index.html.ja\" target=\"_blank\">Karabiner</a>
のサイト様から、最新版をダウンロード。
&nbsp;
ダウンロードが完了すると、こんな画面が開けます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" rel=\"attachment wp-att-588\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" alt=\"karabinerサンプル\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-588\" /></a>
▲ このようにChangeKeyから、<strong>CompleteViMode > ForJapanese</strong>を開き、このようにチェックします。
（左側のCommandを押したら英字、右側のCommandを押したら日本語の設定）
&nbsp;
そして次に同じChangeKeyから、<strong>DeviceSpecificMixedSettings > ForJapanese</strong>から好みの動きを設定できます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" rel=\"attachment wp-att-589\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" alt=\"karabinerサンプル２\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-589\" /></a>
▲ （★おすすめ）がおすすめです。この設定ができたらKarabinerを閉じます。
&nbsp;
以上でCommand_Lが英字、Command_Rが日本語に設定できます。
&nbsp;
ですが、初期の[Control]+[Space]での切り替えが可能なままです。
もうこれはいらないので、
システム環境から <strong>キーボード > ショートカット > 入力ソース > 前の入力ソースを選択 ^スペース</strong>
 のチェックを外します。
すると、[Control]+[Space]が無効になってスッキリします。
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "USキーボードで入力切り替えを簡単にする（Mac）","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "587-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-13 13:36:01","post_modified_gmt": "2016-04-13 04:36:01","post_content_filtered": "","post_parent": 587,"guid": "http://kumao-no-mori.com/2016/04/13/587-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 628,"post_author": 1,"post_date": "2016-04-26 02:06:27","post_date_gmt": "2016-04-25 17:06:27","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


&nbsp;
&nbsp;
&nbsp;


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



&nbsp;","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "atom-git%e3%82%92%e6%89%b1%e3%81%86%e3%81%ae%e3%81%ab%e4%be%bf%e5%88%a9%e3%81%aa%e3%83%91%e3%83%83%e3%82%b1%e3%83%bc%e3%82%b8","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:54","post_modified_gmt": "2016-09-29 09:55:54","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=628","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 629,"post_author": 1,"post_date": "2016-04-25 18:23:06","post_date_gmt": "2016-04-25 09:23:06","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>


コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。



<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>


Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-25 18:23:06","post_modified_gmt": "2016-04-25 09:23:06","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/25/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 630,"post_author": 1,"post_date": "2016-04-26 01:57:40","post_date_gmt": "2016-04-25 16:57:40","post_content": "","post_title": "conf","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2016-04-26-1-53-38","to_ping": "","pinged": "","post_modified": "2016-04-26 02:00:11","post_modified_gmt": "2016-04-25 17:00:11","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 632,"post_author": 1,"post_date": "2016-04-26 01:59:00","post_date_gmt": "2016-04-25 16:59:00","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/conf.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/conf.png\" alt=\"スクリーンショット 2016-04-26 1.53.38\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。



<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/diff.png\" rel=\"attachment wp-att-631\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/diff.png\" alt=\"diff\" width=\"300\" height=\"236\" class=\"aligncenter size-medium wp-image-631\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 01:59:00","post_modified_gmt": "2016-04-25 16:59:00","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 633,"post_author": 1,"post_date": "2016-04-26 02:00:13","post_date_gmt": "2016-04-25 17:00:13","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。



<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.57.22.png\" rel=\"attachment wp-att-631\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.57.22-300x236.png\" alt=\"diff\" width=\"300\" height=\"236\" class=\"aligncenter size-medium wp-image-631\" /></a>
Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:00:13","post_modified_gmt": "2016-04-25 17:00:13","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 634,"post_author": 1,"post_date": "2016-04-26 02:01:59","post_date_gmt": "2016-04-25 17:01:59","post_content": "","post_title": "logdiff","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2016-04-26-2-01-41","to_ping": "","pinged": "","post_modified": "2016-04-26 02:02:17","post_modified_gmt": "2016-04-25 17:02:17","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 635,"post_author": 1,"post_date": "2016-04-26 02:02:26","post_date_gmt": "2016-04-25 17:02:26","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。



<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:02:26","post_modified_gmt": "2016-04-25 17:02:26","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 636,"post_author": 1,"post_date": "2016-04-26 02:04:14","post_date_gmt": "2016-04-25 17:04:14","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


<br><br><br>


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:04:14","post_modified_gmt": "2016-04-25 17:04:14","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 637,"post_author": 1,"post_date": "2016-04-26 02:04:26","post_date_gmt": "2016-04-25 17:04:26","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


<br>
<br>
<br>


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:04:26","post_modified_gmt": "2016-04-25 17:04:26","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 638,"post_author": 1,"post_date": "2016-04-26 02:05:14","post_date_gmt": "2016-04-25 17:05:14","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


<div class=\"margin-bottom:20px;\"></div>


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:05:14","post_modified_gmt": "2016-04-25 17:05:14","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 639,"post_author": 1,"post_date": "2016-04-26 02:05:22","post_date_gmt": "2016-04-25 17:05:22","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


<div style=\"margin-bottom:20px;\"></div>


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:05:22","post_modified_gmt": "2016-04-25 17:05:22","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 640,"post_author": 1,"post_date": "2016-04-26 02:05:54","post_date_gmt": "2016-04-25 17:05:54","post_content": "<div style=\"margin-bottom:20px;\">
<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


</div>


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:05:54","post_modified_gmt": "2016-04-25 17:05:54","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 641,"post_author": 1,"post_date": "2016-04-26 02:06:18","post_date_gmt": "2016-04-25 17:06:18","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


&nbsp;
&nbsp;
&nbsp;
&nbsp;


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:06:18","post_modified_gmt": "2016-04-25 17:06:18","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 642,"post_author": 1,"post_date": "2016-04-26 02:06:27","post_date_gmt": "2016-04-25 17:06:27","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


&nbsp;
&nbsp;
&nbsp;


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 02:06:27","post_modified_gmt": "2016-04-25 17:06:27","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/04/26/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 643,"post_author": 1,"post_date": "2016-04-26 12:49:46","post_date_gmt": "2016-04-26 03:49:46","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-1024x397.png\" alt=\"githubの差分\" width=\"660\" height=\"256\" class=\"aligncenter size-large wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダパス
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-1024x453.png\" alt=\"splitの\" width=\"660\" height=\"292\" class=\"aligncenter size-large wp-image-649\" /></a>

自分の環境だとこんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。
[control]+[z]だと一気に閉じれます。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパス
で見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "git-vim%e3%81%a7diff%e3%82%92%e7%94%bb%e9%9d%a2%e5%88%86%e5%89%b2%e3%81%a7%e8%a1%a8%e7%a4%ba%e3%81%a8%e3%81%8b%e3%83%96%e3%83%a9%e3%83%b3%e3%83%81%e3%82%92%e8%b6%8a%e3%81%88%e3%81%a6%e5%b7%ae","to_ping": "","pinged": "","post_modified": "2016-09-29 18:55:55","post_modified_gmt": "2016-09-29 09:55:55","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=643","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 644,"post_author": 1,"post_date": "2016-04-26 12:30:51","post_date_gmt": "2016-04-26 03:30:51","post_content": "","post_title": "githubの差分","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "github%e3%81%ae%e5%b7%ae%e5%88%86","to_ping": "","pinged": "","post_modified": "2016-04-26 12:30:51","post_modified_gmt": "2016-04-26 03:30:51","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 645,"post_author": 1,"post_date": "2016-04-26 12:31:31","post_date_gmt": "2016-04-26 03:31:31","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-300x116.png\" alt=\"githubの差分\" width=\"300\" height=\"116\" class=\"aligncenter size-medium wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 12:31:31","post_modified_gmt": "2016-04-26 03:31:31","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/26/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 647,"post_author": 1,"post_date": "2016-04-26 12:48:44","post_date_gmt": "2016-04-26 03:48:44","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-300x116.png\" alt=\"githubの差分\" width=\"300\" height=\"116\" class=\"aligncenter size-medium wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダ
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの.png\" rel=\"attachment wp-att-646\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-300x80.png\" alt=\"splitの\" width=\"300\" height=\"80\" class=\"aligncenter size-medium wp-image-646\" /></a>

自分の環境だと、こんな過激な色合いになりましたが、パステルカラー好きなのでいいかなと。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパスで見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 12:48:44","post_modified_gmt": "2016-04-26 03:48:44","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/26/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 648,"post_author": 1,"post_date": "2016-04-27 13:34:31","post_date_gmt": "2016-04-27 04:34:31","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-1024x397.png\" alt=\"githubの差分\" width=\"660\" height=\"256\" class=\"aligncenter size-large wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダパス
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-1024x453.png\" alt=\"splitの\" width=\"660\" height=\"292\" class=\"aligncenter size-large wp-image-649\" /></a>

自分の環境だとこんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。
もしくは[control]+[z]

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパス
で見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-04-27 13:34:31","post_modified_gmt": "2016-04-27 04:34:31","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/26/643-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 649,"post_author": 1,"post_date": "2016-04-26 13:34:20","post_date_gmt": "2016-04-26 04:34:20","post_content": "","post_title": "splitの","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "split%e3%81%ae-2","to_ping": "","pinged": "","post_modified": "2016-04-26 13:34:20","post_modified_gmt": "2016-04-26 04:34:20","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 650,"post_author": 1,"post_date": "2016-04-26 13:34:34","post_date_gmt": "2016-04-26 04:34:34","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-300x116.png\" alt=\"githubの差分\" width=\"300\" height=\"116\" class=\"aligncenter size-medium wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダ
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-300x133.png\" alt=\"splitの\" width=\"300\" height=\"133\" class=\"aligncenter size-medium wp-image-649\" /></a>

自分の環境だと、こんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパスで見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 13:34:34","post_modified_gmt": "2016-04-26 04:34:34","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/26/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 651,"post_author": 1,"post_date": "2016-04-26 13:35:43","post_date_gmt": "2016-04-26 04:35:43","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-300x116.png\" alt=\"githubの差分\" width=\"300\" height=\"116\" class=\"aligncenter size-medium wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダ
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-300x133.png\" alt=\"splitの\" width=\"300\" height=\"133\" class=\"aligncenter size-medium wp-image-649\" /></a>

自分の環境だとこんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパスで見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 13:35:43","post_modified_gmt": "2016-04-26 04:35:43","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/26/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 652,"post_author": 1,"post_date": "2016-04-26 13:37:41","post_date_gmt": "2016-04-26 04:37:41","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-300x116.png\" alt=\"githubの差分\" width=\"300\" height=\"116\" class=\"aligncenter size-medium wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダ
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-300x133.png\" alt=\"splitの\" width=\"300\" height=\"133\" class=\"aligncenter size-medium wp-image-649\" /></a>

自分の環境だとこんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパス
で見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 13:37:41","post_modified_gmt": "2016-04-26 04:37:41","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/26/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 653,"post_author": 1,"post_date": "2016-04-26 13:38:00","post_date_gmt": "2016-04-26 04:38:00","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-300x116.png\" alt=\"githubの差分\" width=\"300\" height=\"116\" class=\"aligncenter size-medium wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダパス
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-300x133.png\" alt=\"splitの\" width=\"300\" height=\"133\" class=\"aligncenter size-medium wp-image-649\" /></a>

自分の環境だとこんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパス
で見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 13:38:00","post_modified_gmt": "2016-04-26 04:38:00","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/26/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 654,"post_author": 1,"post_date": "2016-04-26 17:43:36","post_date_gmt": "2016-04-26 08:43:36","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>
↑このリンクから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(#target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せるということです。
&nbsp;&nbsp;
そうして、ブラウザでindex.htmlを開くと、このようになりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png\" rel=\"attachment wp-att-660\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest-1024x469.png\" alt=\"mustachetest\" width=\"660\" height=\"302\" class=\"aligncenter size-large wp-image-660\" /></a>
(色とかはcssでつけてます。)

&nbsp;&nbsp;
上記の全ては<a href=\"https://github.com/naokidoguchi/playground/tree/master/mustache\" target=\"_blank\">ここから</a>
&nbsp;
gulpはローカルサーバー立ち上げるだけです。
\"npm i\"でよければ使ってください。

&nbsp;","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=654","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 655,"post_author": 1,"post_date": "2016-04-26 16:48:36","post_date_gmt": "2016-04-26 07:48:36","post_content": "mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>

ここから","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 16:48:36","post_modified_gmt": "2016-04-26 07:48:36","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 656,"post_author": 1,"post_date": "2016-04-26 16:50:04","post_date_gmt": "2016-04-26 07:50:04","post_content": "","post_title": "mustache","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "mustache","to_ping": "","pinged": "","post_modified": "2016-04-26 16:50:04","post_modified_gmt": "2016-04-26 07:50:04","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 657,"post_author": 1,"post_date": "2016-04-26 16:54:42","post_date_gmt": "2016-04-26 07:54:42","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>

ここから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.min.jsを拝借します。
","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 16:54:42","post_modified_gmt": "2016-04-26 07:54:42","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 658,"post_author": 1,"post_date": "2016-04-26 17:21:06","post_date_gmt": "2016-04-26 08:21:06","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>

ここから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
  <style>
  <!--
  body {
    background: cadetblue;
  }
  #target1 {
    color: pink;
    margin: 20px 0;
  }
  #target2 {
    color: lightblue;
  }
  -->
  </style>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>

</pre>

☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>

☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せます。","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:21:06","post_modified_gmt": "2016-04-26 08:21:06","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 659,"post_author": 1,"post_date": "2016-04-26 17:22:47","post_date_gmt": "2016-04-26 08:22:47","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>

ここから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
  <style>
  <!--
  body {
    background: cadetblue;
  }
  #target1 {
    color: pink;
    margin: 20px 0;
  }
  #target2 {
    color: lightblue;
  }
  -->
  </style>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せます。
","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:22:47","post_modified_gmt": "2016-04-26 08:22:47","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 660,"post_author": 1,"post_date": "2016-04-26 17:26:32","post_date_gmt": "2016-04-26 08:26:32","post_content": "","post_title": "mustachetest","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "mustachetest","to_ping": "","pinged": "","post_modified": "2016-04-26 17:26:32","post_modified_gmt": "2016-04-26 08:26:32","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png","menu_order": 0,"post_type": "attachment","post_mime_type": "image/png","comment_count": 0}, {"ID": 661,"post_author": 1,"post_date": "2016-04-26 17:30:39","post_date_gmt": "2016-04-26 08:30:39","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>

ここから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せるということです。
&nbsp;&nbsp;
そうして、ブラウザでindex.htmlを開くと、このようになりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png\" rel=\"attachment wp-att-660\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest-1024x469.png\" alt=\"mustachetest\" width=\"660\" height=\"302\" class=\"aligncenter size-large wp-image-660\" /></a>
(色とかはcssでつけてます。)

&nbsp;&nbsp;
上記の全ては<a href=\"https://github.com/naokidoguchi/playground/tree/master/mustache/dist\" target=\"_blank\">ここから</a>
&nbsp;
gulpはローカルサーバー立ち上げるだけです。
\"npm i\"でよければ使ってください。","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:30:39","post_modified_gmt": "2016-04-26 08:30:39","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 662,"post_author": 1,"post_date": "2016-04-26 17:31:15","post_date_gmt": "2016-04-26 08:31:15","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>
このリンクから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せるということです。
&nbsp;&nbsp;
そうして、ブラウザでindex.htmlを開くと、このようになりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png\" rel=\"attachment wp-att-660\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest-1024x469.png\" alt=\"mustachetest\" width=\"660\" height=\"302\" class=\"aligncenter size-large wp-image-660\" /></a>
(色とかはcssでつけてます。)

&nbsp;&nbsp;
上記の全ては<a href=\"https://github.com/naokidoguchi/playground/tree/master/mustache/dist\" target=\"_blank\">ここから</a>
&nbsp;
gulpはローカルサーバー立ち上げるだけです。
\"npm i\"でよければ使ってください。","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:31:15","post_modified_gmt": "2016-04-26 08:31:15","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 663,"post_author": 1,"post_date": "2016-04-26 17:38:17","post_date_gmt": "2016-04-26 08:38:17","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>
↑このリンクから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せるということです。
&nbsp;&nbsp;
そうして、ブラウザでindex.htmlを開くと、このようになりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png\" rel=\"attachment wp-att-660\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest-1024x469.png\" alt=\"mustachetest\" width=\"660\" height=\"302\" class=\"aligncenter size-large wp-image-660\" /></a>
(色とかはcssでつけてます。)

&nbsp;&nbsp;
上記の全ては<a href=\"https://github.com/naokidoguchi/playground/tree/master/mustache/dist\" target=\"_blank\">ここから</a>
&nbsp;
gulpはローカルサーバー立ち上げるだけです。
\"npm i\"でよければ使ってください。","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:38:17","post_modified_gmt": "2016-04-26 08:38:17","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 664,"post_author": 1,"post_date": "2016-04-26 17:39:18","post_date_gmt": "2016-04-26 08:39:18","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>
↑このリンクから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(#target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せるということです。
&nbsp;&nbsp;
そうして、ブラウザでindex.htmlを開くと、このようになりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png\" rel=\"attachment wp-att-660\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest-1024x469.png\" alt=\"mustachetest\" width=\"660\" height=\"302\" class=\"aligncenter size-large wp-image-660\" /></a>
(色とかはcssでつけてます。)

&nbsp;&nbsp;
上記の全ては<a href=\"https://github.com/naokidoguchi/playground/tree/master/mustache/dist\" target=\"_blank\">ここから</a>
&nbsp;
gulpはローカルサーバー立ち上げるだけです。
\"npm i\"でよければ使ってください。","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:39:18","post_modified_gmt": "2016-04-26 08:39:18","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 665,"post_author": 1,"post_date": "2016-04-26 17:47:41","post_date_gmt": "2016-04-26 08:47:41","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-1024x397.png\" alt=\"githubの差分\" width=\"660\" height=\"256\" class=\"aligncenter size-large wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダパス
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-1024x453.png\" alt=\"splitの\" width=\"660\" height=\"292\" class=\"aligncenter size-large wp-image-649\" /></a>

自分の環境だとこんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパス
で見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:47:41","post_modified_gmt": "2016-04-26 08:47:41","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/26/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 667,"post_author": 1,"post_date": "2016-04-26 17:52:37","post_date_gmt": "2016-04-26 08:52:37","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>
↑このリンクから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(#target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せるということです。
&nbsp;&nbsp;
そうして、ブラウザでindex.htmlを開くと、このようになりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png\" rel=\"attachment wp-att-660\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest-1024x469.png\" alt=\"mustachetest\" width=\"660\" height=\"302\" class=\"aligncenter size-large wp-image-660\" /></a>
(色とかはcssでつけてます。)

&nbsp;&nbsp;
上記の全ては<a href=\"https://github.com/naokidoguchi/playground/tree/master/mustache/dist\" target=\"_blank\">ここから</a>
&nbsp;
gulpはローカルサーバー立ち上げるだけです。
\"npm i\"でよければ使ってください。

&nbsp;&nbsp;&nbsp;&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:52:37","post_modified_gmt": "2016-04-26 08:52:37","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 668,"post_author": 1,"post_date": "2016-04-26 17:55:03","post_date_gmt": "2016-04-26 08:55:03","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>
↑このリンクから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(#target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せるということです。
&nbsp;&nbsp;
そうして、ブラウザでindex.htmlを開くと、このようになりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png\" rel=\"attachment wp-att-660\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest-1024x469.png\" alt=\"mustachetest\" width=\"660\" height=\"302\" class=\"aligncenter size-large wp-image-660\" /></a>
(色とかはcssでつけてます。)

&nbsp;&nbsp;
上記の全ては<a href=\"https://github.com/naokidoguchi/playground/tree/master/mustache\" target=\"_blank\">ここから</a>
&nbsp;
gulpはローカルサーバー立ち上げるだけです。
\"npm i\"でよければ使ってください。

&nbsp;&nbsp;&nbsp;&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-26 17:55:03","post_modified_gmt": "2016-04-26 08:55:03","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/04/26/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 670,"post_author": 1,"post_date": "2016-04-27 13:36:05","post_date_gmt": "2016-04-27 04:36:05","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-1024x397.png\" alt=\"githubの差分\" width=\"660\" height=\"256\" class=\"aligncenter size-large wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダパス
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-1024x453.png\" alt=\"splitの\" width=\"660\" height=\"292\" class=\"aligncenter size-large wp-image-649\" /></a>

自分の環境だとこんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。
[control]+[z]だと一気に閉じれます。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパス
で見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-27 13:36:05","post_modified_gmt": "2016-04-27 04:36:05","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/04/27/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 671,"post_author": 1,"post_date": "2016-04-28 14:57:29","post_date_gmt": "2016-04-28 05:57:29","post_content": "勉強としておみくじ作ってみました。
基本的なコードしか書いてないですが、シンプルなので使い回しに良いかも???????
ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"600\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;
","post_title": "React  おみくじ","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=671","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 672,"post_author": 1,"post_date": "2016-04-28 14:56:01","post_date_gmt": "2016-04-28 05:56:01","post_content": "勉強としておみくじ作ってみました。
コードが綺麗かどうかは置いといて、
よければポチポチしてみてください。

[codepen_embed height=\"266\" theme_id=\"light\" slug_hash=\"LNgZrj\" default_tab=\"html,result\" user=\"kumapoyo\"]See the Pen <a href=\'http://codepen.io/kumapoyo/pen/LNgZrj/\'>LNgZrj</a> by NaoKidoguchi (<a href=\'http://codepen.io/kumapoyo\'>@kumapoyo</a>) on <a href=\'http://codepen.io\'>CodePen</a>.[/codepen_embed]","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 14:56:01","post_modified_gmt": "2016-04-28 05:56:01","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 673,"post_author": 1,"post_date": "2016-04-28 14:56:36","post_date_gmt": "2016-04-28 05:56:36","post_content": "勉強としておみくじ作ってみました。
コードが綺麗かどうかは置いといて、
よければポチポチしてみてください。

<p data-height=\"266\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"html,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 14:56:36","post_modified_gmt": "2016-04-28 05:56:36","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 674,"post_author": 1,"post_date": "2016-04-28 14:57:29","post_date_gmt": "2016-04-28 05:57:29","post_content": "勉強としておみくじ作ってみました。
コードが綺麗かどうかは置いといて、
よければポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"266\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"html,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 14:57:29","post_modified_gmt": "2016-04-28 05:57:29","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 675,"post_author": 1,"post_date": "2016-04-28 15:17:44","post_date_gmt": "2016-04-28 06:17:44","post_content": "勉強としておみくじ作ってみました。
コードが綺麗かどうかは置いといて、ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"266\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"html,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 15:17:44","post_modified_gmt": "2016-04-28 06:17:44","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 676,"post_author": 1,"post_date": "2016-04-28 15:38:12","post_date_gmt": "2016-04-28 06:38:12","post_content": "勉強としておみくじ作ってみました。
基本的なコードしか書いてないですが、シンプルなので使い回しに良いかも???????
ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"html,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 15:38:12","post_modified_gmt": "2016-04-28 06:38:12","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 677,"post_author": 1,"post_date": "2016-04-28 15:22:32","post_date_gmt": "2016-04-28 06:22:32","post_content": "勉強としておみくじ作ってみました。
基本的なコードしか書いてないですが、シンプルなので使い回しに良いかも???????
ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"266\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"html,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 15:22:32","post_modified_gmt": "2016-04-28 06:22:32","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 678,"post_author": 1,"post_date": "2016-04-28 15:38:34","post_date_gmt": "2016-04-28 06:38:34","post_content": "勉強としておみくじ作ってみました。
基本的なコードしか書いてないですが、シンプルなので使い回しに良いかも???????
ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"600\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"html,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 15:38:34","post_modified_gmt": "2016-04-28 06:38:34","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 679,"post_author": 1,"post_date": "2016-04-28 15:56:54","post_date_gmt": "2016-04-28 06:56:54","post_content": "勉強としておみくじ作ってみました。
基本的なコードしか書いてないですが、シンプルなので使い回しに良いかも???????
ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"266\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"html,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 15:56:54","post_modified_gmt": "2016-04-28 06:56:54","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 680,"post_author": 1,"post_date": "2016-04-28 15:59:46","post_date_gmt": "2016-04-28 06:59:46","post_content": "勉強としておみくじ作ってみました。
基本的なコードしか書いてないですが、シンプルなので使い回しに良いかも???????
ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"600\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"html,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 15:59:46","post_modified_gmt": "2016-04-28 06:59:46","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 681,"post_author": 1,"post_date": "2016-04-28 16:01:49","post_date_gmt": "2016-04-28 07:01:49","post_content": "勉強としておみくじ作ってみました。
基本的なコードしか書いてないですが、シンプルなので使い回しに良いかも???????
ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"600\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 16:01:49","post_modified_gmt": "2016-04-28 07:01:49","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/04/28/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 682,"post_author": 1,"post_date": "2016-04-28 16:22:13","post_date_gmt": "2016-04-28 07:22:13","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
<a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイト様の\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。


2016.4.28 追記
reactでマテリアルデザインをするなら
★ <a href=\"http://www.material-ui.com/\" target=\"_blank\">material-ui</a>
こちらのサイトが素敵ですね。
今これ使ってみてます。

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 16:22:13","post_modified_gmt": "2016-04-28 07:22:13","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2016/04/28/234-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 683,"post_author": 1,"post_date": "2016-04-28 16:17:49","post_date_gmt": "2016-04-28 07:17:49","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
<a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイト様の\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。


2016.4.28 追記

reactでマテリアルデザインをするなら
<a href=\"http://www.material-ui.com/\" target=\"_blank\">material-ui</a>
こちらのサイトが素敵ですね。
今これ使ってみてます。","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 16:17:49","post_modified_gmt": "2016-04-28 07:17:49","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2016/04/28/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 684,"post_author": 1,"post_date": "2016-04-28 16:19:04","post_date_gmt": "2016-04-28 07:19:04","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
<a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイト様の\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。


2016.4.28 追記
reactでマテリアルデザインをするなら
<a href=\"http://www.material-ui.com/\" target=\"_blank\">material-ui</a>
こちらのサイトが素敵ですね。
今これ使ってみてます。

&nbsp;&nbsp;&nbsp;&nbsp

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 16:19:04","post_modified_gmt": "2016-04-28 07:19:04","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2016/04/28/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 685,"post_author": 1,"post_date": "2016-04-28 16:19:44","post_date_gmt": "2016-04-28 07:19:44","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
<a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイト様の\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。


2016.4.28 追記
reactでマテリアルデザインをするなら
<a href=\"http://www.material-ui.com/\" target=\"_blank\">material-ui</a>
こちらのサイトが素敵ですね。
今これ使ってみてます。

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 16:19:44","post_modified_gmt": "2016-04-28 07:19:44","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2016/04/28/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 686,"post_author": 1,"post_date": "2016-04-28 16:22:24","post_date_gmt": "2016-04-28 07:22:24","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
★ <a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイト様の\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。


2016.4.28 追記
reactでマテリアルデザインをするなら
★ <a href=\"http://www.material-ui.com/\" target=\"_blank\">material-ui</a>
こちらのサイトが素敵ですね。
今これ使ってみてます。

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2016-04-28 16:22:24","post_modified_gmt": "2016-04-28 07:22:24","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2016/04/28/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 688,"post_author": 1,"post_date": "2016-05-09 13:36:36","post_date_gmt": "2016-05-09 04:36:36","post_content": "<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"BKMrjL\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/BKMrjL/\">BKMrjL</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  自作サンプル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-05-09 13:36:36","post_modified_gmt": "2016-05-09 04:36:36","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/05/09/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 689,"post_author": 1,"post_date": "2016-05-09 13:38:02","post_date_gmt": "2016-05-09 04:38:02","post_content": "<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"BKMrjL\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/BKMrjL/\">BKMrjL</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  ようこそまるまる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-05-09 13:38:02","post_modified_gmt": "2016-05-09 04:38:02","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/05/09/612-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 690,"post_author": 1,"post_date": "2016-05-09 13:38:06","post_date_gmt": "2016-05-09 04:38:06","post_content": "<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"BKMrjL\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/BKMrjL/\">BKMrjL</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  ようこそ〇〇さん","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-05-09 13:38:06","post_modified_gmt": "2016-05-09 04:38:06","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/05/09/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 691,"post_author": 1,"post_date": "2016-05-09 13:38:27","post_date_gmt": "2016-05-09 04:38:27","post_content": "<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"BKMrjL\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/BKMrjL/\">BKMrjL</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  \"ようこそ〇〇さん\"のやつ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-05-09 13:38:27","post_modified_gmt": "2016-05-09 04:38:27","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/05/09/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 692,"post_author": 1,"post_date": "2016-05-09 18:18:38","post_date_gmt": "2016-05-09 09:18:38","post_content": "<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"rePdLr\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/rePdLr/\">knockout</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>


","post_title": "Knockout.js  \"ようこそ〇〇さん\"のやつ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-05-09 18:18:38","post_modified_gmt": "2016-05-09 09:18:38","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/05/09/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 694,"post_author": 1,"post_date": "2016-06-08 19:22:59","post_date_gmt": "2016-06-08 10:22:59","post_content": "<p data-height=\"232\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。

&nbsp;","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "vue-js-%e3%82%92%e8%a7%a6%e3%81%a3%e3%81%a6%e3%81%bf%e3%81%9f","to_ping": "","pinged": "
http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/","post_modified": "2016-09-29 18:57:17","post_modified_gmt": "2016-09-29 09:57:17","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=694","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 695,"post_author": 1,"post_date": "2016-06-08 18:17:16","post_date_gmt": "2016-06-08 09:17:16","post_content": "<p data-height=\"343\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-08 18:17:16","post_modified_gmt": "2016-06-08 09:17:16","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/06/08/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 696,"post_author": 1,"post_date": "2016-06-08 19:21:39","post_date_gmt": "2016-06-08 10:21:39","post_content": "<p data-height=\"343\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-08 19:21:39","post_modified_gmt": "2016-06-08 10:21:39","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/06/08/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 697,"post_author": 1,"post_date": "2016-06-10 13:32:23","post_date_gmt": "2016-06-10 04:32:23","post_content": "<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"js,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-10 13:32:23","post_modified_gmt": "2016-06-10 04:32:23","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/06/10/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 698,"post_author": 1,"post_date": "2016-06-10 13:37:17","post_date_gmt": "2016-06-10 04:37:17","post_content": "<p data-height=\"294\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-10 13:37:17","post_modified_gmt": "2016-06-10 04:37:17","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/06/10/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 699,"post_author": 1,"post_date": "2016-06-10 13:39:53","post_date_gmt": "2016-06-10 04:39:53","post_content": "<p data-height=\"232\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-10 13:39:53","post_modified_gmt": "2016-06-10 04:39:53","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/06/10/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 700,"post_author": 1,"post_date": "2016-06-10 13:40:44","post_date_gmt": "2016-06-10 04:40:44","post_content": "<p data-height=\"300\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"js,result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-10 13:40:44","post_modified_gmt": "2016-06-10 04:40:44","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/06/10/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 701,"post_author": 1,"post_date": "2016-06-10 13:42:37","post_date_gmt": "2016-06-10 04:42:37","post_content": "<p data-height=\"232\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。



<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-10 13:42:37","post_modified_gmt": "2016-06-10 04:42:37","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/06/10/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 703,"post_author": 1,"post_date": "2016-06-15 22:38:51","post_date_gmt": "2016-06-15 13:38:51","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

&nbsp;

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
&nbsp;
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "web%e3%82%bb%e3%82%ad%e3%83%a5%e3%83%aa%e3%83%86%e3%82%a3%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6%e8%80%83%e3%81%88%e3%81%a6%e3%81%bf%e3%82%8b","to_ping": "","pinged": "","post_modified": "2016-09-29 18:57:16","post_modified_gmt": "2016-09-29 09:57:16","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=703","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 704,"post_author": 1,"post_date": "2016-06-15 19:05:15","post_date_gmt": "2016-06-15 10:05:15","post_content": "

JTBも個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね〜。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
狙ったサイトを攻撃するために、まずは踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。


★ SQLインジェクション
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

★ XSS（クロスサイトスクリプティング）
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

★ CSRF（クロスサイトリクエストフォージェリー）
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってきて混乱すると思います。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 19:05:15","post_modified_gmt": "2016-06-15 10:05:15","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 705,"post_author": 1,"post_date": "2016-06-15 19:55:42","post_date_gmt": "2016-06-15 10:55:42","post_content": "","post_title": "security_img","post_excerpt": "","post_status": "inherit","comment_status": "open","ping_status": "closed","post_password": "","post_name": "img_0509","to_ping": "","pinged": "","post_modified": "2016-06-15 21:14:33","post_modified_gmt": "2016-06-15 12:14:33","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509.jpg","menu_order": 0,"post_type": "attachment","post_mime_type": "image/jpeg","comment_count": 0}, {"ID": 706,"post_author": 1,"post_date": "2016-06-15 21:14:41","post_date_gmt": "2016-06-15 12:14:41","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509.jpg\" alt=\"セキュリティイメージ\" width=\"640\" height=\"427\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBも個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね〜。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
狙ったサイトを攻撃するために、まずは踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。


★ SQLインジェクション
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

★ XSS（クロスサイトスクリプティング）
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

★ CSRF（クロスサイトリクエストフォージェリー）
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってきて混乱すると思います。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 21:14:41","post_modified_gmt": "2016-06-15 12:14:41","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 707,"post_author": 1,"post_date": "2016-06-15 21:19:02","post_date_gmt": "2016-06-15 12:19:02","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね〜。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
狙ったサイトを攻撃するために、まずは踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。


★ SQLインジェクション
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

★ XSS（クロスサイトスクリプティング）
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

★ CSRF（クロスサイトリクエストフォージェリー）
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってきて混乱すると思います。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 21:19:02","post_modified_gmt": "2016-06-15 12:19:02","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 708,"post_author": 1,"post_date": "2016-06-15 21:20:12","post_date_gmt": "2016-06-15 12:20:12","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
狙ったサイトを攻撃するために、まずは踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。


★ SQLインジェクション
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

★ XSS（クロスサイトスクリプティング）
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

★ CSRF（クロスサイトリクエストフォージェリー）
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってきて混乱すると思います。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 21:20:12","post_modified_gmt": "2016-06-15 12:20:12","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 709,"post_author": 1,"post_date": "2016-06-15 21:22:32","post_date_gmt": "2016-06-15 12:22:32","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
狙ったサイトを攻撃するために、まずは踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。


<strong>★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong>★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong>★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってきて混乱すると思います。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 21:22:32","post_modified_gmt": "2016-06-15 12:22:32","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 710,"post_author": 1,"post_date": "2016-06-15 21:29:18","post_date_gmt": "2016-06-15 12:29:18","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
狙ったサイトを攻撃するために、まずは踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color:yellow\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong>★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong>★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってきて混乱すると思います。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 21:29:18","post_modified_gmt": "2016-06-15 12:29:18","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 711,"post_author": 1,"post_date": "2016-06-15 21:43:11","post_date_gmt": "2016-06-15 12:43:11","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color:yellow\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong>★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong>★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってきて混乱すると思います。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 21:43:11","post_modified_gmt": "2016-06-15 12:43:11","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 712,"post_author": 1,"post_date": "2016-06-15 21:46:04","post_date_gmt": "2016-06-15 12:46:04","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color:deeppink\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong>★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong>★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってきて混乱すると思います。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 21:46:04","post_modified_gmt": "2016-06-15 12:46:04","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 713,"post_author": 1,"post_date": "2016-06-15 22:15:53","post_date_gmt": "2016-06-15 13:15:53","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color:deeppink\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong style=\"color:deeppink\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong style=\"color:deeppink\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。


<strong style=\"color:deeppink\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。



<strong style=\"color:deeppink\">★ クリックジャッキング</strong>




<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:15:53","post_modified_gmt": "2016-06-15 13:15:53","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 714,"post_author": 1,"post_date": "2016-06-15 22:22:15","post_date_gmt": "2016-06-15 13:22:15","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color:deeppink\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong style=\"color:deeppink\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong style=\"color:deeppink\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。


<strong style=\"color:deeppink\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。



などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。



<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:22:15","post_modified_gmt": "2016-06-15 13:22:15","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 715,"post_author": 1,"post_date": "2016-06-15 22:22:48","post_date_gmt": "2016-06-15 13:22:48","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


今朝JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color:deeppink\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong style=\"color:deeppink\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong style=\"color:deeppink\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。


<strong style=\"color:deeppink\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。



などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。



<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:22:48","post_modified_gmt": "2016-06-15 13:22:48","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 716,"post_author": 1,"post_date": "2016-06-15 22:23:02","post_date_gmt": "2016-06-15 13:23:02","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティの事は頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color:deeppink\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong style=\"color:deeppink\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong style=\"color:deeppink\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。


<strong style=\"color:deeppink\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。



などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。



<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:23:02","post_modified_gmt": "2016-06-15 13:23:02","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 717,"post_author": 1,"post_date": "2016-06-15 22:24:20","post_date_gmt": "2016-06-15 13:24:20","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color:deeppink\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。


<strong style=\"color:deeppink\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。


<strong style=\"color:deeppink\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。


<strong style=\"color:deeppink\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。



などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。



<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:24:20","post_modified_gmt": "2016-06-15 13:24:20","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 718,"post_author": 1,"post_date": "2016-06-15 22:27:36","post_date_gmt": "2016-06-15 13:27:36","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" class=\"aligncenter size-full wp-image-705\" /></a>


今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

<br>
<br>
<br>
<br>
<strong style=\"color:deeppink\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。
<br>
<br>
<br>
<strong style=\"color:deeppink\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。
<br>
<br>
<br>
<strong style=\"color:deeppink\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。
<br>
<br>
<br>
<strong style=\"color:deeppink\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

<br>
<br>
<br>
<br>
などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。
<br>
<br>
<br>
<br>

<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>


<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFF3FE&fc1=707070&lc1=152766&t=kumapoyo-22&o=9&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=4873117194\" style=\"width:120px;height:240px;\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:27:36","post_modified_gmt": "2016-06-15 13:27:36","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 719,"post_author": 1,"post_date": "2016-06-15 22:30:20","post_date_gmt": "2016-06-15 13:30:20","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。



<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。



<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。



<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。



などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。





<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=6&l=ur1&category=amazonrotate&f=ifr\" width=\"120\" height=\"150\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:800px;max-height:600px;\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:30:20","post_modified_gmt": "2016-06-15 13:30:20","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 720,"post_author": 1,"post_date": "2016-06-15 22:31:23","post_date_gmt": "2016-06-15 13:31:23","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。



<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。



<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。



<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。



<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。



などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。





<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=12&l=ur1&category=amazonrotate&f=ifr\" width=\"300\" height=\"250\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:800px;max-height:600px;\" frameborder=\"0\"></iframe>
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:31:23","post_modified_gmt": "2016-06-15 13:31:23","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 721,"post_author": 1,"post_date": "2016-06-15 22:32:02","post_date_gmt": "2016-06-15 13:32:02","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;

&nbsp;

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:32:02","post_modified_gmt": "2016-06-15 13:32:02","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 722,"post_author": 1,"post_date": "2016-06-15 22:32:46","post_date_gmt": "2016-06-15 13:32:46","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです

。
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:32:46","post_modified_gmt": "2016-06-15 13:32:46","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 723,"post_author": 1,"post_date": "2016-06-15 22:33:04","post_date_gmt": "2016-06-15 13:33:04","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

&nbsp;

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです

。
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:33:04","post_modified_gmt": "2016-06-15 13:33:04","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 724,"post_author": 1,"post_date": "2016-06-15 22:33:26","post_date_gmt": "2016-06-15 13:33:26","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

&nbsp;

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:33:26","post_modified_gmt": "2016-06-15 13:33:26","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 725,"post_author": 1,"post_date": "2016-06-15 22:34:39","post_date_gmt": "2016-06-15 13:34:39","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
&nbsp;
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:34:39","post_modified_gmt": "2016-06-15 13:34:39","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 726,"post_author": 1,"post_date": "2016-06-15 22:35:11","post_date_gmt": "2016-06-15 13:35:11","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

&nbsp;

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。

&nbsp;

WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いみたいです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:35:11","post_modified_gmt": "2016-06-15 13:35:11","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 727,"post_author": 1,"post_date": "2016-06-15 22:36:26","post_date_gmt": "2016-06-15 13:36:26","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

&nbsp;

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
&nbsp;
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-15 22:36:26","post_modified_gmt": "2016-06-15 13:36:26","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/06/15/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 728,"post_author": 1,"post_date": "2016-06-20 16:01:12","post_date_gmt": "2016-06-20 07:01:12","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（指定したコミットより後のコミットを指定すると、指定したコミットからの一覧が表示されます。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
<del datetime=\"2016-06-20T06:47:03+00:00\">削除したいコミットの一行を削除し保存する。</del>
(2016/6/20修正)
以下のような修正コマンドがあります。
コミット番号の前のpickになっている箇所を修正したいコマンドに書き換えます。
<pre>#  Commands:
#　　p, pick = 内容を変更しない
#　　r, reword = コミットメッセージを変更する
#　　e, edit = コミットを編集する
#　　s, squash = ひとつ前のコミットにまとめ、コミットメッセージを書き直す
#  　f, fixup = lひとつ前のコミットにまとめ、コミットメッセージをそのまま使う
#  　x, exec = shell でコマンドを実行する
#  　d, drop = コミットを削除する
</pre> 

変更しvimで保存した後、

<pre>git add .
git commit --amend
</pre>
で変更をコミット。

これだけではrebaseの処理は終わっておらず、
<pre>git rebase --continue</pre>
で終了させます。

これで完了です。


<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Git 間違えてpushしてしまった時のrebase","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-20 16:01:12","post_modified_gmt": "2016-06-20 07:01:12","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/06/20/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 729,"post_author": 1,"post_date": "2016-06-20 16:02:04","post_date_gmt": "2016-06-20 07:02:04","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（指定したコミットより後のコミットを指定すると、指定したコミットからの一覧が表示されます。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
<del datetime=\"2016-06-20T06:47:03+00:00\">削除したいコミットの一行を削除し保存する。</del>
(2016/6/20修正)
以下のような修正コマンドがあります。
コミット番号の前のpickになっている箇所を修正したいコマンドに書き換えます。
<pre>#  Commands:
#　　p, pick = 内容を変更しない
#　　r, reword = コミットメッセージを変更する
#　　e, edit = コミットを編集する
#　　s, squash = ひとつ前のコミットにまとめ、コミットメッセージを書き直す
#  　f, fixup = lひとつ前のコミットにまとめ、コミットメッセージをそのまま使う
#  　x, exec = shell でコマンドを実行する
#  　d, drop = コミットを削除する
</pre> 

変更しvimで保存した後、

<pre>git add .
git commit --amend
</pre>
で変更をコミット。

これだけではrebaseの処理は終わっておらず、
<pre>git rebase --continue</pre>
で終了させます。

これで完了です。

&nbsp;

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "Git 間違えてpushしてしまった時のrebase","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-20 16:02:04","post_modified_gmt": "2016-06-20 07:02:04","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/06/20/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 730,"post_author": 1,"post_date": "2016-06-20 16:03:22","post_date_gmt": "2016-06-20 07:03:22","post_content": "間違えてpushしてしまった場合は
<pre>$ git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（指定したコミットより後のコミットを指定すると、指定したコミットからの一覧が表示されます。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
<del datetime=\"2016-06-20T06:47:03+00:00\">削除したいコミットの一行を削除し保存する。</del>
(2016/6/20修正)
以下のような修正コマンドがあります。
コミット番号の前のpickになっている箇所を修正したいコマンドに書き換えます。
<pre>#  Commands:
#　　p, pick = 内容を変更しない
#　　r, reword = コミットメッセージを変更する
#　　e, edit = コミットを編集する
#　　s, squash = ひとつ前のコミットにまとめ、コミットメッセージを書き直す
#  　f, fixup = ひとつ前のコミットにまとめ、コミットメッセージをそのまま使う
#  　x, exec = shell でコマンドを実行する
#  　d, drop = コミットを削除する
</pre> 

変更しvimで保存した後、

<pre>git add .
git commit --amend
</pre>
で変更をコミット。

これだけではrebaseの処理は終わっておらず、
<pre>git rebase --continue</pre>
で終了させます。

これで完了です。

&nbsp;

<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>","post_title": "Git 間違えてpushしてしまった時のrebase","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-06-20 16:03:22","post_modified_gmt": "2016-06-20 07:03:22","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/06/20/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 733,"post_author": 1,"post_date": "2016-07-21 00:49:59","post_date_gmt": "2016-07-20 15:49:59","post_content": "rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。
&nbsp;
あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。


&nbsp;","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "private","comment_status": "closed","ping_status": "open","post_password": "","post_name": "ruby%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98","to_ping": "","pinged": "
http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/","post_modified": "2016-09-29 18:57:16","post_modified_gmt": "2016-09-29 09:57:16","post_content_filtered": "","post_parent": 0,"guid": "http://kumao-no-mori.com/?p=733","menu_order": 0,"post_type": "post","post_mime_type": "","comment_count": 0}, {"ID": 734,"post_author": 1,"post_date": "2016-07-20 18:50:52","post_date_gmt": "2016-07-20 09:50:52","post_content": "rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。

<script src=\"//repl.it/embed/Cdwc/0.js\"></script>

rubyの良さがわかってきた気がします。","post_title": "Rubyでおみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-20 18:50:52","post_modified_gmt": "2016-07-20 09:50:52","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/20/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 735,"post_author": 1,"post_date": "2016-07-20 18:53:20","post_date_gmt": "2016-07-20 09:53:20","post_content": "rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。

<script src=\"//repl.it/embed/Cdwc/0.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。","post_title": "Rubyでおみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-20 18:53:20","post_modified_gmt": "2016-07-20 09:53:20","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/20/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 736,"post_author": 1,"post_date": "2016-07-20 18:54:33","post_date_gmt": "2016-07-20 09:54:33","post_content": "rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/0.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-20 18:54:33","post_modified_gmt": "2016-07-20 09:54:33","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/20/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 737,"post_author": 1,"post_date": "2016-07-20 18:55:53","post_date_gmt": "2016-07-20 09:55:53","post_content": "rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/0.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-20 18:55:53","post_modified_gmt": "2016-07-20 09:55:53","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/20/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 738,"post_author": 1,"post_date": "2016-07-20 19:04:20","post_date_gmt": "2016-07-20 10:04:20","post_content": "rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。

あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-20 19:04:20","post_modified_gmt": "2016-07-20 10:04:20","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/20/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 739,"post_author": 1,"post_date": "2016-07-20 19:17:30","post_date_gmt": "2016-07-20 10:17:30","post_content": "自律神経が乱れまくってお薬で治療中ですー。

rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。

あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-20 19:17:30","post_modified_gmt": "2016-07-20 10:17:30","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/20/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 740,"post_author": 1,"post_date": "2016-07-20 19:20:15","post_date_gmt": "2016-07-20 10:20:15","post_content": "くま森最近更新頻度低すぎですねー。
自律神経が乱れまくってお薬で治療中です。心にゆとりを。

rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。

あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-20 19:20:15","post_modified_gmt": "2016-07-20 10:20:15","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/20/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 741,"post_author": 1,"post_date": "2016-07-21 00:19:00","post_date_gmt": "2016-07-20 15:19:00","post_content": "自律神経が乱れまくってお薬で治療中です。心にゆとりを。

rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。

あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-21 00:19:00","post_modified_gmt": "2016-07-20 15:19:00","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/21/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 742,"post_author": 1,"post_date": "2016-07-21 00:30:58","post_date_gmt": "2016-07-20 15:30:58","post_content": "自律神経が乱れまくってお薬で治療中です。心にゆとりを。

rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。
&nbsp;
あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。


&nbsp;
<script src=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;MarketPlace=JP&amp;ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&amp;Operation=GetScriptTemplate\" type=\"text/javascript\" charset=\"utf-8\">// <![CDATA[
 
// ]]></script><noscript><A rel=\"nofollow\" HREF=\"http://ws-fe.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&MarketPlace=JP&ID=V20070822%2FJP%2Fkumapoyo-22%2F8009%2Ff570adb7-c832-4ebd-a5f6-bdbc29ab02f5&Operation=NoScript\">Amazon.co.jp ウィジェット</A></noscript>","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-21 00:30:58","post_modified_gmt": "2016-07-20 15:30:58","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/21/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 743,"post_author": 1,"post_date": "2016-07-21 00:45:14","post_date_gmt": "2016-07-20 15:45:14","post_content": "自律神経が乱れまくってお薬で治療中です。心にゆとりを。

rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。
&nbsp;
あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。


&nbsp;
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
&nbsp;
&nbsp;","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-21 00:45:14","post_modified_gmt": "2016-07-20 15:45:14","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/21/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 744,"post_author": 1,"post_date": "2016-07-21 00:46:54","post_date_gmt": "2016-07-20 15:46:54","post_content": "自律神経が乱れまくってお薬で治療中です。心にゆとりを。

rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。
&nbsp;
あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。


&nbsp;
<iframe width=\"300\" height=\"250\" style=\"border: none; max-width: 800px; max-height: 600px;\" src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&amp;o=9&amp;p=12&amp;l=ur1&amp;category=amazonrotate&amp;f=ifr\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" frameborder=\"0\"></iframe>
&nbsp;
&nbsp;","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-21 00:46:54","post_modified_gmt": "2016-07-20 15:46:54","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/21/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 746,"post_author": 1,"post_date": "2016-07-22 11:59:30","post_date_gmt": "2016-07-22 02:59:30","post_content": "自律神経が乱れまくってお薬で治療中です。心にゆとりを。

rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。
&nbsp;
あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。


&nbsp;","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 11:59:30","post_modified_gmt": "2016-07-22 02:59:30","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/07/22/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 747,"post_author": 1,"post_date": "2016-07-22 12:00:43","post_date_gmt": "2016-07-22 03:00:43","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\"><img class=\"aligncenter size-full wp-image-705\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/06/img_0509-e1465993036303.jpg\" alt=\"セキュリティイメージ\" width=\"627\" height=\"318\" /></a>

&nbsp;

今朝、JTBの個人情報流出がニュースになってました。
取引先を装った標的型攻撃メールの添付ファイルを開いたことによるウイルス感染か？ということで、最大でおよそ７９３万人分の情報が流出したそうです。
&nbsp;
WEBセキュリティに関しては頭が良い人がやってくれてるんだろうなぁ。すごいなぁ。と少し前まで他人事で知らないまま生きてましたが、WEBを運営する人はみんな知っておかないといけないことだったんですね~。ダメエンジニアですね。
そしてこのサイトは大丈夫なのか。(‘ω’)
攻撃者は狙ったサイトを攻撃するために、まず踏み台になるサーバーを探すみたいなので、アクセス数が少ないこのサイトも狙われてるかもですね。いかにも脆弱っぽい見た目ですもんね。よくわからんコメントはよく来ますね。日本語以外は読めませんね。
CMSはとにかく更新更新。常に全てを最新状態にするのが大事。

不束ですが覚えたことをちょこっとメモしてみます。

&nbsp;

<strong style=\"color: deeppink;\">★ SQLインジェクション</strong>
SQLインジェクションは有名で被害も多いです。
入力フォームなどからSQL文で個人情報をデータベースにリクエストし、情報を盗む攻撃です。
そんなに簡単なら自分でも盗めちゃいそうです。
ちゃんと知識さえあれば、対策は難しくないです。
<strong>バインド機構</strong>や<strong>文字コードの指定</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ XSS（クロスサイトスクリプティング）</strong>
XSSは入力フォームなどにWebページを操作するスクリプトを入力して送信する攻撃です。
ページの見え方や動作を変えられてしまいます。
<strong>HTMLエンコード</strong>などで対策できます。
マークアップでできる対策としては、HTMLでシングルクォーテーションを使わない。でも基本HTMLでシングルクォーテーションは使わないですよね。

&nbsp;

<strong style=\"color: deeppink;\">★ CSRF（クロスサイトリクエストフォージェリー）</strong>
CSRFはショッピングサイトなどの最終確定処理のリクエストを外部ページから行う攻撃です。
リクエスト送信のボタンが公開されていて誰でも押せる状態になってたとすれば、ショッピングサイト側には大量の注文が入ってくることになります。
対策としては、正規のユーザーかどうかをチェックすることが必要になります。
<strong>あるタイミングでトークンを発行し、確定処理されるタイミングでトークンを照合する</strong>などで対策できます。

&nbsp;

<strong style=\"color: deeppink;\">★ クリックジャッキング</strong>
クリックジャッキングは攻撃者自らのサイトの上に透過指定して透明な標的のサイトを被せます。
ユーザーからは攻撃者サイトしか見えていないことになり、攻撃者サイトのボタンやリンクをクリックさせることでユーザーに標的のサイトを操作させる攻撃です。
Webサイトから返されるHTTPレスポンスヘッダに<strong>「X-Frame-Options」HTTPヘッダの指定</strong>で対策ができます。

&nbsp;

&nbsp;

などなどこれ以外にもたくさんの脅威がweb上で溢れています。
悪い人は思ってる以上にいっぱいいますから、自分で自分の身は守れるようにしないとですね。

&nbsp;
","post_title": "WEBセキュリティについて考えてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "703-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:00:43","post_modified_gmt": "2016-07-22 03:00:43","post_content_filtered": "","post_parent": 703,"guid": "http://kumao-no-mori.com/2016/07/22/703-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 748,"post_author": 1,"post_date": "2016-07-22 12:02:04","post_date_gmt": "2016-07-22 03:02:04","post_content": "<p data-height=\"232\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。

&nbsp
","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:02:04","post_modified_gmt": "2016-07-22 03:02:04","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/07/22/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 749,"post_author": 1,"post_date": "2016-07-22 12:03:11","post_date_gmt": "2016-07-22 03:03:11","post_content": "勉強としておみくじ作ってみました。
基本的なコードしか書いてないですが、シンプルなので使い回しに良いかも???????
ポチポチしてみてください。

&nbsp;&nbsp;&nbsp;&nbsp;

<p data-height=\"600\" data-theme-id=\"light\" data-slug-hash=\"LNgZrj\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/LNgZrj/\">LNgZrj</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

&nbsp;
","post_title": "React  おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "671-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:03:11","post_modified_gmt": "2016-07-22 03:03:11","post_content_filtered": "","post_parent": 671,"guid": "http://kumao-no-mori.com/2016/07/22/671-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 750,"post_author": 1,"post_date": "2016-07-22 12:04:12","post_date_gmt": "2016-07-22 03:04:12","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache.png\" rel=\"attachment wp-att-656\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustache-1024x495.png\" alt=\"mustache\" width=\"660\" height=\"319\" class=\"aligncenter size-large wp-image-656\" /></a>

mustache.jsを使って、複数のテンプレートを一つのファイルにインクルードしてみました。

<strong>★ <a href=\"https://mustache.github.io/\" target=\"_blank\">mustache</a>
</strong>
↑このリンクから自分が使いたい言語のmustacheをDLしてきます。
私はjsなので、このページのJavaScriptを選択するとgithubに飛ぶので、そこからmustache.jsを拝借します。

☆ まず、表示させるページ\"index.html\"に、記述はjqueryにしたいのでjqueryを読み込みます。そして先ほどのmustache.jsを読み込み、のちに使う\"app.js\"を読み込みます。
そして、今回は2ファイル読み込むので、ファイルを読み込む箇所(#target)を2つdivで作ってみます。
<pre>
<!DOCTYPE html>
<html lang=\"ja\">
<head>
  <meta charset=\"UTF-8\">
  <title>hoge</title>
  <script src=\"jquery-1.12.1.min.js\"></script>
  <script src=\"mustache.min.js\"></script>
  <script src=\"app.js\"></script>
</head>
<body>
  <div id=\"target1\">Loading...</div>
  <div id=\"target2\">Loading...</div>
</body>
</html>
</pre>
&nbsp;&nbsp;
☆ 次に\"app.js\"を作成
中身はこんな感じにしてみました。このように\"<strong>$.get</strong>\"で表示させたいテンプレートファイルを取得してるみたいです。そして\"<strong>Mustache.render()</strong>\"でレンダリング(画面描画)してるみたいです。
\"template2.html\"は繰り返し表示させてみようと思ったのでなんかfor文書いてみました。
<pre>
$(function() {
  $.get(\'template1.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
    $(\'#target1\').html(rendered);
  });
  $.get(\'template2.html\', function(template) {
    var rendered = Mustache.render(template, {
      msg2: \"テンプレート２を読み込んでます\"
    }
  );
    $(\'#target2\').html(\'\');
    for(var i = 1; i < 10; i++) {
      $(\'#target2\').append(\'<li>\' + rendered + \'</li>\');
    }
  });
});
</pre>
&nbsp;&nbsp;
☆ そして、読み込ませるファイルはこんな感じにしてみました。(template1.html)
<pre>
(σﾟ∀ﾟ)σ < {{msg1}}! )
</pre>
&nbsp;&nbsp;
mustache.jsの名前の由来、{{}}が出てきました。
先ほどapp.jsで
<pre>
    var rendered = Mustache.render(template, {
      msg1: \"テンプレート１を読み込んでます\"
    }
  );
</pre>
のように書いてました。
ここでこのように好きな変数に好きな文字を入れとくと、{{}}で呼び出せるということです。
&nbsp;&nbsp;
そうして、ブラウザでindex.htmlを開くと、このようになりました。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest.png\" rel=\"attachment wp-att-660\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/mustachetest-1024x469.png\" alt=\"mustachetest\" width=\"660\" height=\"302\" class=\"aligncenter size-large wp-image-660\" /></a>
(色とかはcssでつけてます。)

&nbsp;&nbsp;
上記の全ては<a href=\"https://github.com/naokidoguchi/playground/tree/master/mustache\" target=\"_blank\">ここから</a>
&nbsp;
gulpはローカルサーバー立ち上げるだけです。
\"npm i\"でよければ使ってください。

&nbsp;","post_title": "mustache.js  でファイルをインクルードしてみる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "654-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:04:12","post_modified_gmt": "2016-07-22 03:04:12","post_content_filtered": "","post_parent": 654,"guid": "http://kumao-no-mori.com/2016/07/22/654-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 751,"post_author": 1,"post_date": "2016-07-22 12:05:45","post_date_gmt": "2016-07-22 03:05:45","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分.png\" rel=\"attachment wp-att-644\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/githubの差分-1024x397.png\" alt=\"githubの差分\" width=\"660\" height=\"256\" class=\"aligncenter size-large wp-image-644\" /></a>

上のみたいにgithubとかで差分見る時はなんか右上にsplitボタンがあってそれで画面分割で差分が見られて、vimでもそんな風に差分が見れたらなと思って調べたのでメモ。

&nbsp;
<strong>★vimでdiffを画面分割で表示方法について</strong>

.gitconfigに追加したいので、以下のものを流します。
<pre>
git config --global diff.tool vimdiff
git config --global difftool.prompt false
git config --global merge.tool vimdiff
git config --global mergetool.prompt false
</pre>
&nbsp;
これで設定はできたので、splitで表示したい時に
<pre>
git difftool 対象ファイルorフォルダパス
</pre>
でokです。

こんな感じになります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1.png\" rel=\"attachment wp-att-649\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/splitの-1-1024x453.png\" alt=\"splitの\" width=\"660\" height=\"292\" class=\"aligncenter size-large wp-image-649\" /></a>

自分の環境だとこんな過激な色合いになりましたが別にいいかな。
ただ、difftool画面から出る時は、:qを二回して、一画面ずつ閉じていく必要があります。
[control]+[z]だと一気に閉じれます。

&nbsp;&nbsp;&nbsp;&nbsp;

<strong>★ブランチを越えて差分を確認</strong>

ついでメモです。

ブランチを越えて差分を確認したい場合は、比較元ブランチをチェックアウトしてから
git diff 比較したいブランチ 比較したいファイルorフォルダのパス
で見れました。
<pre>
git diff feature/〇〇〇 src/
</pre>

もちろんdifftoolも使うと見やすいです。


&nbsp;","post_title": "Git  vimでdiffを画面分割で表示とかブランチを越えて差分を確認とか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "643-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:05:45","post_modified_gmt": "2016-07-22 03:05:45","post_content_filtered": "","post_parent": 643,"guid": "http://kumao-no-mori.com/2016/07/22/643-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 752,"post_author": 1,"post_date": "2016-07-22 12:06:33","post_date_gmt": "2016-07-22 03:06:33","post_content": "<strong>★<a href=\"https://atom.io/packages/merge-conflicts\" target=\"_blank\">merge-conflicts</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38.png\" rel=\"attachment wp-att-630\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-1.53.38-300x230.png\" alt=\"conf\" width=\"300\" height=\"230\" class=\"aligncenter size-medium wp-image-630\" /></a>

コンフリクトを起こした際、対象箇所を視覚的に見やすく表示してくれます。
パッケージ > Merge Conflicts > Detect で表示してくれます。
競合箇所が一目でわかるので感激です。
さらに、相手の変更を使うか、自分の変更を使うかのボタンがあるので、わざわざ>>>>headや=====を消す作業がなくなります。


&nbsp;
&nbsp;
&nbsp;


<strong>★<a href=\"https://atom.io/packages/git-plus\" target=\"_blank\">git-plus</a></strong>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41.png\" rel=\"attachment wp-att-634\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/04/スクリーンショット-2016-04-26-2.01.41-300x140.png\" alt=\"logdiff\" width=\"300\" height=\"140\" class=\"aligncenter size-medium wp-image-634\" /></a>

Atom上でgitコマンドが打てるようになります。
コマンドを打つボックスは、
Macは　[Cmd]+[Shift]+[H]
windowsは　[Ctrl]+[Shift]+[H]
で開くことができます。
頭にgitをつける必要がなくなり、曖昧な単語でも予測して候補を出してくれます。
いちいちコマンドラインに移動せずAtom一つで出来ちゃうので良いです。
このボックスで、logやdiffをやると、とても見やすく表示してくれて、これも感激でした。


以上二つは入れといて損はないと思いました。



&nbsp;","post_title": "Atom  Gitを扱うのに便利なパッケージ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "628-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:06:33","post_modified_gmt": "2016-07-22 03:06:33","post_content_filtered": "","post_parent": 628,"guid": "http://kumao-no-mori.com/2016/07/22/628-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 753,"post_author": 1,"post_date": "2016-07-22 12:07:03","post_date_gmt": "2016-07-22 03:07:03","post_content": "<p data-height=\"265\" data-theme-id=\"light\" data-slug-hash=\"rePdLr\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/rePdLr/\">knockout</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

Knockout.jsの勉強で、作ってみたコードをここにメモしときます。

使用したバインディングは
<strong>value
visible
text</strong>
を使用しました。

<strong>Observable</strong>は監視対象。
<strong>computed</strong>で監視対象に値を返しています。
<strong>applyBindings</strong>でKnockoutを作動させてバインディングを有効にする。

機能としては、
・文字数カウント
・姓名両方を打ち込んだ後のタイミングでウェルカム表示
くらいです。

<pre>
<!DOCTYPE>
<html>
  <head>
    <meta charset=\"UTF-8\" />
    <script src=\"knockout-3.4.0.js\"></script>
  </head>
  <body>
    <section>
      <p>☆姓名を入力してください☆</p>
      <div>
        <span>姓：<input data-bind=\"value: sei\" /></span>&nbsp;<span data-bind=\"text: seiNum\"></span>文字
      </div>
      <div>
        <span>名：<input data-bind=\"value: mei\" /></span>&nbsp;<span data-bind=\"text: meiNum\"></span>文字
      </div>
      <div data-bind=\"visible: comment\">
        ようこそ、<span data-bind=\"text: comment.fullName\"></span>&nbsp;さん
      </div>
    </section>
    <script type=\"text/javascript\">
      var viewModel = function(sei, mei) {
        var self = this;
        self.sei = ko.observable(sei);
        self.mei = ko.observable(mei);
        self.seiNum = ko.observable();
        self.comment = ko.observable(false);
        //ComputedObservable
        self.comment = ko.computed(function() {
          if(self.sei().length > 0 && self.mei().length > 0) {
            return true;
          }
        });
        self.comment.fullName = ko.computed(function() {
          return self.sei() + \" \" + self.mei();
        });
        self.seiNum = ko.computed(function() {
          return self.sei().length;
        });
        self.meiNum = ko.computed(function() {
          return self.mei().length;
        });
      };
      ko.applyBindings(new viewModel(\"\",\"\"));
    </script>
  </body>
</html>
</pre>


&nbsp;

","post_title": "Knockout.js  \"ようこそ〇〇さん\"のやつ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "612-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:07:03","post_modified_gmt": "2016-07-22 03:07:03","post_content_filtered": "","post_parent": 612,"guid": "http://kumao-no-mori.com/2016/07/22/612-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 754,"post_author": 1,"post_date": "2016-07-22 12:07:52","post_date_gmt": "2016-07-22 03:07:52","post_content": "<strong>☆letについて</strong>
javascriptでは、javaやC言語にあるブロックスコープというものがない。
if文やfor文のブロックが終了した後でもその中で作った変数は残り続けてしまいます。
ですが、ES6だとletというものを使用すれば、ブロックスコープがjavascriptでも使用可能になります。

<pre>
// javascriptの場合
function hoge() {
    for(var i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ 10
}
hoge();
</pre>

<pre>
// ES6の場合
var hoge = () => {
    for( let i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined
｝
</pre>

といった感じ。(動作未確認なのでちょっと心配...)
letは値を再代入することができるが、もう一度letで宣言することはできない。


<strong>☆constについて</strong>
constはletと同じようにブロックスコープができるのですが、constは再代入もできなくなります。

<pre>
// ES6
var hoge = () => {
    for( const i=0; i<10; i++) {
      piyo += i;
    }
    alert(i); // ＝ not defined

    const hogehoge = 10;
    alert(i); // = 10
          
    hogehoge = 20;
    alert(i); // = TypeError
    
｝
</pre>

といった感じ。(こちらも動作未確認です...)
再宣言も再代入もできません。

&nbsp;



","post_title": "ES6  \"let\"と\"const\"について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "600-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:07:52","post_modified_gmt": "2016-07-22 03:07:52","post_content_filtered": "","post_parent": 600,"guid": "http://kumao-no-mori.com/2016/07/22/600-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 755,"post_author": 1,"post_date": "2016-07-22 12:09:41","post_date_gmt": "2016-07-22 03:09:41","post_content": "ES6でつまずいて死にかけたのでメモ。

ES6でjQueryのeachを利用して
<pre>
const i = 1;
$(\'.title\').each(() => {
    $(this).attr(\'class\',\'title\' + (++i));
})
</pre>
例えばこんな感じで、titleクラスがついたエレメントに連番をつけようとした場合、
これでコンパイル後のソースを確認したら、$(this)の箇所が$(undefined)になってしまいます。
なんか引数が足りないとundefinedが代入されてしまうらしいです。
&nbsp;
なので引数を増やして、
<pre>
const i = 1;
$(\'.title\').each((data, ele) => {
    $(ele).attr(\'class\',\'title\' + (++i));
})
</pre>
でなんか解決できました。

&nbsp;","post_title": "ES6 babelで変換すると$(this)に$(undefined)が返ってくる問題","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "593-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:09:41","post_modified_gmt": "2016-07-22 03:09:41","post_content_filtered": "","post_parent": 593,"guid": "http://kumao-no-mori.com/2016/07/22/593-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 756,"post_author": 1,"post_date": "2016-07-22 12:11:42","post_date_gmt": "2016-07-22 03:11:42","post_content": "USキーボードで入力切り替えをするとき、初期は[Control]+[Space]で切り替えることになるのですが、
これが意外に面倒くさくて、JISキーボードと同じように設定してみました。
簡単ですぐにできます。

&nbsp;
こちらの
<a href=\"https://pqrs.org/osx/karabiner/index.html.ja\" target=\"_blank\">Karabiner</a>
のサイト様から、最新版をダウンロード。
&nbsp;
ダウンロードが完了すると、こんな画面が開けます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" rel=\"attachment wp-att-588\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル.png\" alt=\"karabinerサンプル\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-588\" /></a>
▲ このようにChangeKeyから、<strong>CompleteViMode > ForJapanese</strong>を開き、このようにチェックします。
（左側のCommandを押したら英字、右側のCommandを押したら日本語の設定）
&nbsp;
そして次に同じChangeKeyから、<strong>DeviceSpecificMixedSettings > ForJapanese</strong>から好みの動きを設定できます。 ▼
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" rel=\"attachment wp-att-589\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/karabinerサンプル２.png\" alt=\"karabinerサンプル２\" width=\"1824\" height=\"1508\" class=\"aligncenter size-full wp-image-589\" /></a>
▲ （★おすすめ）がおすすめです。この設定ができたらKarabinerを閉じます。
&nbsp;
以上でCommand_Lが英字、Command_Rが日本語に設定できます。
&nbsp;
ですが、初期の[Control]+[Space]での切り替えが可能なままです。
もうこれはいらないので、
システム環境から <strong>キーボード > ショートカット > 入力ソース > 前の入力ソースを選択 ^スペース</strong>
 のチェックを外します。
すると、[Control]+[Space]が無効になってスッキリします。


&nbsp;","post_title": "USキーボードで入力切り替えを簡単にする（Mac）","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "587-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:11:42","post_modified_gmt": "2016-07-22 03:11:42","post_content_filtered": "","post_parent": 587,"guid": "http://kumao-no-mori.com/2016/07/22/587-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 757,"post_author": 1,"post_date": "2016-07-22 12:13:27","post_date_gmt": "2016-07-22 03:13:27","post_content": "gulpを回した時に <strong>Warning: gulp version mismatch:</strong> に出くわしたのでメモ。
&nbsp;
<pre>Warning: gulp version mismatch:
Global gulp is 3.9.1
Local gulp is 3.9.0
</pre>
GlobalのバージョンとLocalのバージョンがちがうというエラー。
&nbsp;
Globalのバージョンに合わせるにはこの場合
<pre>
npm install gulp@3.9.1 --save
</pre>

とすれば良い。


&nbsp;","post_title": "gulp LocalのバージョンをGlobalのバージョンに合わせる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "580-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:13:27","post_modified_gmt": "2016-07-22 03:13:27","post_content_filtered": "","post_parent": 580,"guid": "http://kumao-no-mori.com/2016/07/22/580-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 758,"post_author": 1,"post_date": "2016-07-22 12:14:50","post_date_gmt": "2016-07-22 03:14:50","post_content": "gulpを回した時に <strong>Warning: gulp version mismatch:</strong> に出くわしたのでメモ。
&nbsp;
<pre>Warning: gulp version mismatch:
Global gulp is 3.9.1
Local gulp is 3.9.0
</pre>
GlobalのバージョンとLocalのバージョンがちがうというエラー。
&nbsp;
Globalのバージョンに合わせるにはこの場合
<pre>
npm install gulp@3.9.1 --save
</pre>

とすれば良い。


&nbsp;","post_title": "gulp LocalのバージョンをGlobalのバージョンに合わせる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "580-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:14:50","post_modified_gmt": "2016-07-22 03:14:50","post_content_filtered": "","post_parent": 580,"guid": "http://kumao-no-mori.com/2016/07/22/580-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 759,"post_author": 1,"post_date": "2016-07-22 12:16:15","post_date_gmt": "2016-07-22 03:16:15","post_content": "ES6(ECMAScript6)のアロー関数についてメモ。
=> これがアロー関数。
&nbsp;
javaScriptでは
<pre>
function hoge(huga) {
    return true;
};
</pre>
のように記述していましたが、
ES6だと上記のが
<pre>
var hoge = huga =>  true;
// var 関数名 = 引数 => 処理
</pre>
の一行で済ますことができる。

&nbsp;","post_title": "ES6 アロー関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "576-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:16:15","post_modified_gmt": "2016-07-22 03:16:15","post_content_filtered": "","post_parent": 576,"guid": "http://kumao-no-mori.com/2016/07/22/576-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 760,"post_author": 1,"post_date": "2016-07-22 12:17:00","post_date_gmt": "2016-07-22 03:17:00","post_content": "ES6(ECMAScript6)のアロー関数についてメモ。
=> これがアロー関数。
&nbsp;
javaScriptでは
<pre>
function hoge(huga) {
    return true;
};
</pre>
のように記述していましたが、
ES6だと上記のが
<pre>
var hoge = huga =>  true;
// var 関数名 = 引数 => 処理
</pre>
の一行で済ますことができる。

&nbsp;","post_title": "ES6 アロー関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "576-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:17:00","post_modified_gmt": "2016-07-22 03:17:00","post_content_filtered": "","post_parent": 576,"guid": "http://kumao-no-mori.com/2016/07/22/576-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 761,"post_author": 1,"post_date": "2016-07-22 12:18:03","post_date_gmt": "2016-07-22 03:18:03","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" rel=\"attachment wp-att-559\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/commiter.png\" alt=\"commiter\" width=\"267\" height=\"123\" class=\"aligncenter size-full wp-image-559\" /></a>

いつもと違うPCでコミットした際に、画像の箇所がそのPCユーザーの名前になってしまったり、unknownになってしまったり...メールアドレスなんかも自分のじゃないものが表示されてしまったりで困ったので解決方法をメモ。

<strong>☆ Commiterの設定</strong>
リポジトリ直下の.gitconfigに以下を追記する。
<pre>
git config --local user.name your_name
git config --local user.email your_email@example.com
</pre>
&nbsp;
<strong>☆ Authorの変更</strong>
コミットした後にAuthorを変更したい場合、
<pre>
git commit --amend --author=\"changeName <test@example.com>\"
</pre>
で名前とメールアドレスを設定。
するとこのような画面になるので↓
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" rel=\"attachment wp-att-563\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author.png\" alt=\"author\" width=\"692\" height=\"223\" class=\"aligncenter size-full wp-image-563\" /></a>
ちゃんと今指定したものになっているか確認して保存して閉じる。
変更されたものを
<pre>
git push -f origin master
</pre>
で強制プッシュで完了。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" rel=\"attachment wp-att-568\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/author_change.png\" alt=\"author_change\" width=\"210\" height=\"104\" class=\"aligncenter size-full wp-image-568\" /></a>
このように変更されます。(強制プッシュは怖いので、ブランチをよく確認してください！！)

&nbsp;","post_title": "Git Commiter設定とAuthor変更","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "558-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:18:03","post_modified_gmt": "2016-07-22 03:18:03","post_content_filtered": "","post_parent": 558,"guid": "http://kumao-no-mori.com/2016/07/22/558-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 762,"post_author": 1,"post_date": "2016-07-22 12:19:32","post_date_gmt": "2016-07-22 03:19:32","post_content": "Macユーザーの私がWindowsでgitどうやるんだろうと思って見つけた方法をメモ。

<strong>☆１</strong>
まず、<a href=\"https://git-scm.com/\" target=\"_blank\">Gitの公式サイト</a>からfor Windows版をインストール。
&nbsp;
<strong>☆２</strong>
インストーラーを立ち上げて、Git Bashにチェックを入れる。(初期値でチェックされてる)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" rel=\"attachment wp-att-553\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" alt=\"git\" width=\"513\" height=\"398\" class=\"aligncenter size-full wp-image-553\" /></a>
&nbsp;
<strong>☆３</strong>
バンバン次に進む。(自分は英語を読まずにバンバン進んだが大丈夫だったのでたぶん大丈夫b)
インストールを完了する。
&nbsp;
<strong>☆４</strong>
初期値のままインストールすると、<em>C:\\Program Files\\Git</em>の中に<strong>git-bash.exe</strong>があるのでそのアプリケーションを起動すると、ターミナルのような画面が表示され、これまでと同じようにGitの操作ができる。
&nbsp;&nbsp;
※
GUIでやる人はGit GUIを☆２の時に選択(初期値でチェックされてる)すればGit GUIが使える。でもGUI使うとしたらSourceTreeかな？？？

&nbsp;","post_title": "Git windowsでgitコマンドを使う","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "552-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:19:32","post_modified_gmt": "2016-07-22 03:19:32","post_content_filtered": "","post_parent": 552,"guid": "http://kumao-no-mori.com/2016/07/22/552-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 763,"post_author": 1,"post_date": "2016-07-22 12:19:35","post_date_gmt": "2016-07-22 03:19:35","post_content": "Macユーザーの私がWindowsでgitどうやるんだろうと思って見つけた方法をメモ。

<strong>☆１</strong>
まず、<a href=\"https://git-scm.com/\" target=\"_blank\">Gitの公式サイト</a>からfor Windows版をインストール。
&nbsp;
<strong>☆２</strong>
インストーラーを立ち上げて、Git Bashにチェックを入れる。(初期値でチェックされてる)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" rel=\"attachment wp-att-553\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/03/git.png\" alt=\"git\" width=\"513\" height=\"398\" class=\"aligncenter size-full wp-image-553\" /></a>
&nbsp;
<strong>☆３</strong>
バンバン次に進む。(自分は英語を読まずにバンバン進んだが大丈夫だったのでたぶん大丈夫b)
インストールを完了する。
&nbsp;
<strong>☆４</strong>
初期値のままインストールすると、<em>C:\\Program Files\\Git</em>の中に<strong>git-bash.exe</strong>があるのでそのアプリケーションを起動すると、ターミナルのような画面が表示され、これまでと同じようにGitの操作ができる。
&nbsp;&nbsp;
※
GUIでやる人はGit GUIを☆２の時に選択(初期値でチェックされてる)すればGit GUIが使える。でもGUI使うとしたらSourceTreeかな？？？

&nbsp;","post_title": "Git windowsでgitコマンドを使う","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "552-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:19:35","post_modified_gmt": "2016-07-22 03:19:35","post_content_filtered": "","post_parent": 552,"guid": "http://kumao-no-mori.com/2016/07/22/552-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 764,"post_author": 1,"post_date": "2016-07-22 12:21:00","post_date_gmt": "2016-07-22 03:21:00","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" rel=\"attachment wp-att-545\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" alt=\"redux\" width=\"1000\" height=\"700\" class=\"aligncenter size-full wp-image-545\" /></a>
&nbsp;&nbsp;
<strong>★ Store</strong>
Storeはアプリケーションのstateを保持している場所。
Reduxで状態は全てStoreのstateに保存する。
&nbsp;&nbsp;
<strong>★ Action</strong>
Actionは「何をする」という情報を持ったオブジェクト。
Actionは必ずtypeプロパティを持たないといけない。
Actionを作成するにはActionCreatorメソッドで作成する。
&nbsp;&nbsp;
<strong>★ dispatch</strong>
ActionをStoreに送るときは、dispatchを使ってstateを変更する。
&nbsp;&nbsp;
<strong>★ Reducer</strong>
Reducerはactionとstateから、新しいstateを作成して返すメソッド。
Reducerは状態を持たず、stateを受け取って次のstateを返す関数。ステートレスに保たれる。
Reducer内に子Reducerを作成し、stateのプロパティごとに子Reducerで処理するようにする。

&nbsp;","post_title": "React Reduxについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "540-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:21:00","post_modified_gmt": "2016-07-22 03:21:00","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/2016/07/22/540-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 765,"post_author": 1,"post_date": "2016-07-22 12:22:06","post_date_gmt": "2016-07-22 03:22:06","post_content": "Reactで今一番アツいライブラリがReduxと聞いたので、ふわっとメモ。

<strong>☆ Reduxとは</strong>
state(アプリケーションでの状態)を管理するためのフレームワーク。
&nbsp;&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" rel=\"attachment wp-att-545\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/redux.png\" alt=\"redux\" width=\"1000\" height=\"700\" class=\"aligncenter size-full wp-image-545\" /></a>
&nbsp;&nbsp;
<strong>★ Store</strong>
Storeはアプリケーションのstateを保持している場所。
Reduxで状態は全てStoreのstateに保存する。
&nbsp;&nbsp;
<strong>★ Action</strong>
Actionは「何をする」という情報を持ったオブジェクト。
Actionは必ずtypeプロパティを持たないといけない。
Actionを作成するにはActionCreatorメソッドで作成する。
&nbsp;&nbsp;
<strong>★ dispatch</strong>
ActionをStoreに送るときは、dispatchを使ってstateを変更する。
&nbsp;&nbsp;
<strong>★ Reducer</strong>
Reducerはactionとstateから、新しいstateを作成して返すメソッド。
Reducerは状態を持たず、stateを受け取って次のstateを返す関数。ステートレスに保たれる。
Reducer内に子Reducerを作成し、stateのプロパティごとに子Reducerで処理するようにする。

&nbsp;","post_title": "React Reduxについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "540-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:22:06","post_modified_gmt": "2016-07-22 03:22:06","post_content_filtered": "","post_parent": 540,"guid": "http://kumao-no-mori.com/2016/07/22/540-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 766,"post_author": 1,"post_date": "2016-07-22 12:24:11","post_date_gmt": "2016-07-22 03:24:11","post_content": "この基本的な文(jsx)を細かく読み解いてみる。
<pre>
var Test = React.createClass({
    render() {
        return (
            <div>
                <h1>あいうえお</h1>
            </div>
        );
    }
});
React.render(
    <Test />,
    document.getElementById(\'app\')
);
</pre>
&nbsp;
☆ React.createClass で Component を作成する。
<strong>ここのComponent名のはじめは大文字でなくてはならない。</strong>
&nbsp;
☆ render で ReactElement を作成し、戻り値としてComponentに返す。
<strong>renderは単一のReactElementでなくてはならない。</strong>
<pre>
// 誤
render() {
    return (
        <h1>hello</h1>
        <div>kumao</div> // これだとエラーになる
    );
}

// 正
render() {
    return (
        <div>
            <h1>hello</h1>
            <div>kumao</div>
        </div> // 大きいdivで囲ってしまえば良い
    );
}
</pre>
&nbsp;
☆ React.render でレンダリングの実行。
<strong>第一引数にComponent名、第二引数にrendering場所を指定。</strong>
<pre>
React.render(
    <Test />, // Componentは< />で記述する。
    document.getElementById(\'app\')
);
</pre>

&nbsp;","post_title": "React 勉強(基本１)","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "524-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:24:11","post_modified_gmt": "2016-07-22 03:24:11","post_content_filtered": "","post_parent": 524,"guid": "http://kumao-no-mori.com/2016/07/22/524-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 767,"post_author": 1,"post_date": "2016-07-22 12:25:35","post_date_gmt": "2016-07-22 03:25:35","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事。</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前の親コミットも一緒に複製され違うものになります。
リビジョンが違うものはエラーになり、リモートにpushする事が出来ません。
&nbsp;
もし、そのときに
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああっ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull rebaseについてとってもわかりやすいです。

&nbsp;","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:25:35","post_modified_gmt": "2016-07-22 03:25:35","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/07/22/514-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 768,"post_author": 1,"post_date": "2016-07-22 12:26:40","post_date_gmt": "2016-07-22 03:26:40","post_content": "<strong>☆ ブランチ切った後にmasterが更新されたときに、トピックブランチにマージしたいとき。</strong>
<pre>
git merge master
</pre>
するだけです。
リリース前にトピックブランチ内でコンフリクトをどうにかできるのでマージするようにしたいです。
&nbsp;
<strong>☆ 注意したい事。</strong>
<pre>
git rebase master
</pre>
をしては絶対いけないです。
rebaseでコミットログが綺麗になると思っても、rebaseはコミットを複製してそれを統合するような形になります。
複製されたコミット番号は違うものになります。
それはいいのですが、それに加えて一つ前の親コミットも一緒に複製され違うものになります。
リビジョンが違うものはエラーになり、リモートにpushする事が出来ません。
&nbsp;
もし、そのときに
<pre>
git push -f origin リモートブランチ
</pre>
で無理矢理リモートにpushしてしまうと、一人でトピックブランチ弄ってる場合は良いですが、
他の人と作業してる場合にああああっ！ってなります。

&nbsp;

rebaseについて上記のを知ってrebaseは怖いものだという事がわかりましたが、扱えるととてもスマートです。
<pre>
git pull --rebase origin リモートブランチ
</pre>
pull時にこれをやると、マージコミットが作られず、コミット履歴が綺麗になります。
余計なコミット履歴がなくなりスッキリ整った状態で渡せるので、rebaseは今は取りあえずpullのときだけどんどん利用していこうと思います。
&nbsp;
&nbsp;

| 参考
参考にさせていただきました。
<a href=\"http://blog.inouetakuya.info/entry/20130602/1370173582\" target=\"_blank\">http://blog.inouetakuya.info/entry/20130602/1370173582</a>
こちらのサイトの方が、図があってとってもわかりやすいです。
<a href=\"http://kray.jp/blog/git-pull-rebase/\" target=\"_blank\">http://kray.jp/blog/git-pull-rebase/</a>
pull rebaseについてとってもわかりやすいです。

&nbsp;","post_title": "Git トピックブランチに統合ブランチをマージする & rebaseについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "514-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:26:40","post_modified_gmt": "2016-07-22 03:26:40","post_content_filtered": "","post_parent": 514,"guid": "http://kumao-no-mori.com/2016/07/22/514-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 769,"post_author": 1,"post_date": "2016-07-22 12:28:06","post_date_gmt": "2016-07-22 03:28:06","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
<strong>☆ 内容</strong>
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickメソッドでクリックで更新。更新の度state.clickCountに1を足していく。
★ this.setStateは更新の記述。
renderで仮想DOMをレンダリング。
<pre>
//仮想DOM
<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>
</pre>
h2をクリックしたらhandleClickを機能させる。
変動する箇所は{this.state.clickCount}でclickCountを表示。

&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;

&nbsp;
***
<strong>コンパイルについて</strong>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。
&nbsp;
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。
<small>作業するフォルダに移動。
jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ] の順です。</small>
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
そのうちgulpとBrowserifyでもっと快適な環境を作る予定です。
***


&nbsp;","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:28:06","post_modified_gmt": "2016-07-22 03:28:06","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/07/22/492-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 770,"post_author": 1,"post_date": "2016-07-22 12:28:36","post_date_gmt": "2016-07-22 03:28:36","post_content": "前回<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\" target=\"_blank\">React サンプルを解読してみる１</a>でpropsについてメモしました。
propsは不変として扱う値だったのに対して、可変する値、srateについてメモ。
&nbsp;
<strong>★ キーワード【state】</strong>
stateオブジェクトのデフォルト値はnull。getInitialStateメソッドを用いてstateの初期値を定義する。
<pre>
getInitialState: function () {
    return {
        title: \'\',
        introduction: \'\',
        questions: [] //(例)質問を入れてく空の配列
    };
}
</pre>
renderメソッドの中でthis.stateを参照することで、現在の値をユーザーに表示することが出来る。
renderメソッドの中でthis.stateを扱う際、2通りの方法が考えられる。
1. 同じ要素を属性値を変えて表示する。
2. 全く異なった要素を表示する。
&nbsp;
reactのサンプルのbasic-click-counterがとてもわかりやすいので以下で見てみます。
<pre>
  <body>
    <div id=\"message\" align=\"center\"></div>

    <script type=\"text/babel\">
      var Counter = React.createClass({
        getInitialState: function () {
          return { clickCount: 0 };
        },
        handleClick: function () {
          this.setState(function(state) {
            return {clickCount: state.clickCount + 1};
          });
        },
        render: function () {
          return (<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>);
        }
      });
      ReactDOM.render(
        <Counter />,
        document.getElementById(\'message\')
      );
    </script>
  </body>
</pre>
<strong>☆ 内容</strong>
Counterというコンポーネントを定義し、まずgetInitialStateメソッドでstateの初期値を定義。
handleClickメソッドでクリックで更新。更新の度state.clickCountに1を足していく。
★ this.setStateは更新の記述。
renderで仮想DOMをレンダリング。
<pre>
//仮想DOM
<h2 onClick={this.handleClick}>Click me! Number of clicks: {this.state.clickCount}</h2>
</pre>
h2をクリックしたらhandleClickを機能させる。
変動する箇所は{this.state.clickCount}でclickCountを表示。

&nbsp;
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" rel=\"attachment wp-att-501\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/count.png\" alt=\"reactのサンプル画像\" width=\"471\" height=\"168\" class=\"aligncenter size-full wp-image-501\" /></a>
上記のコードを実行するとこうなります。
&nbsp;

&nbsp;
***
<strong>コンパイルについて</strong>
今回はjsxの記述です。Reactはjsxで記述する事を強く勧めている(可読性が上がる)ので、これからはjsxでいきます。
jsxをhtmlに読み込ませる場合は、jsにコンパイルしたものを読み込ませます。
&nbsp;
簡単なやつで、node.jsとnpmをインストールして、npmのパッケージ\"react-tools\"をインストールで
<pre>jsx ./src ./build</pre>
でコンパイル出来ます。
<small>作業するフォルダに移動。
jsx [jsxのファイルがあるフォルダ] [jsxをコンパイルしたファイルがあるフォルダ] の順です。</small>
<pre>jsx --watch ./src ./build</pre>
watchで監視して変更を保存する度自動コンパイル。
そのうちgulpとBrowserifyでもっと快適な環境を作る予定です。
***


&nbsp;","post_title": "React stateについて詳しく","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "492-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:28:36","post_modified_gmt": "2016-07-22 03:28:36","post_content_filtered": "","post_parent": 492,"guid": "http://kumao-no-mori.com/2016/07/22/492-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 771,"post_author": 1,"post_date": "2016-07-22 12:30:07","post_date_gmt": "2016-07-22 03:30:07","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
<strong>★ マージ変更を中止し、なかったことにする</strong>
<pre>git marge --abort</pre>
&nbsp;
<strong>★ リベース変更を中止し、なかったことにする</strong>
<pre>git rebase --abort</pre>
&nbsp;
<strong>★ リバート変更を中止し、なかったことにする</strong>
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
<strong>★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。</strong>
<pre>git reset --hard</pre>
&nbsp;
<strong>★ 直前のコミットログを修正</strong>
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
<strong>★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる</strong>
<pre>git cherry-pick [コミット番号]</pre>

&nbsp;","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "483-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:30:07","post_modified_gmt": "2016-07-22 03:30:07","post_content_filtered": "","post_parent": 483,"guid": "http://kumao-no-mori.com/2016/07/22/483-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 772,"post_author": 1,"post_date": "2016-07-22 12:31:29","post_date_gmt": "2016-07-22 03:31:29","post_content": "Gitで分けわかんない事になってしまったり、やらかしたかもーてなった時用。もう二度と慌てない。
&nbsp;
<strong>★ マージ変更を中止し、なかったことにする</strong>
<pre>git marge --abort</pre>
&nbsp;
<strong>★ リベース変更を中止し、なかったことにする</strong>
<pre>git rebase --abort</pre>
&nbsp;
<strong>★ リバート変更を中止し、なかったことにする</strong>
<pre>git revert --abort</pre>
&nbsp;
他にもabortでなかったことに出来るやつあるかも。
&nbsp;
&nbsp;
<strong>★ ステージングに登録されている変更を取り消し、作業ディレクトリのファイルの変更内容も取り消す。</strong>
<pre>git reset --hard</pre>
&nbsp;
<strong>★ 直前のコミットログを修正</strong>
<pre>git commit --amend -m  [変更したいコミットログ]</pre>
修正したらpushでオーケー。
&nbsp;
<strong>★ 間違えて別ブランチにコミットしてしまった場合に、コミットしたかったブランチに移動、または新しくブランチを作成、そこでgit cherry-pick [コミット番号]をやると、そのコミット番号のものを対象のブランチにコミットをコピーしてくれる</strong>
<pre>git cherry-pick [コミット番号]</pre>

&nbsp;","post_title": "Git パニック時メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "483-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:31:29","post_modified_gmt": "2016-07-22 03:31:29","post_content_filtered": "","post_parent": 483,"guid": "http://kumao-no-mori.com/2016/07/22/483-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 773,"post_author": 1,"post_date": "2016-07-22 12:34:28","post_date_gmt": "2016-07-22 03:34:28","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに計算を代入しrenderしてますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。

&nbsp;
","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:34:28","post_modified_gmt": "2016-07-22 03:34:28","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/07/22/454-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 774,"post_author": 1,"post_date": "2016-07-22 12:34:40","post_date_gmt": "2016-07-22 03:34:40","post_content": "<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の続きになります。

<pre>
      // Call React.createFactory instead of directly call ExampleApplication({...}) in React.render
      var ExampleApplicationFactory = React.createFactory(ExampleApplication);

      var start = new Date().getTime();
      setInterval(function() {
        ReactDOM.render(
          ExampleApplicationFactory({elapsed: new Date().getTime() - start}),
          document.getElementById(\'container\')
        );
      }, 50);
</pre>

次がこのような記述になっています。これでコードは終わりです。
&nbsp;
ここでまずコメントを書いてくれています。
&nbsp;
<em>Call React.createFactory instead of directly call ExampleApplication({...}) in React.render</em>
&nbsp;
excite翻訳さんで翻訳すると、
&nbsp;
<em>React.renderの直接的な呼び出しExampleApplication（{…}）の代わりにReact.createFactoryを呼びなさい</em>
&nbsp;
ということで、めんどくさいですが<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>の最初のコードを見ると、<strong>ExampleApplication</strong>という計算して出力するコンポーネントを作成していましたね。
&nbsp;
<strong>★ キーワード 【React.createFactory】</strong>
上記で、React.createFactoryというものが出てきます。これはファクトリー関数というみたいです。
指定されたHTMLタグ、もしくはコンポーネントクラスの<span style=\"font-size:small;vertical-align: top;\">※</span>ReactElementを作成するファクトリー関数を返すのがこれ。
<span style=\"font-size:small;\">※React.createElement()の戻り値として得られるオブジェクト。全てのコンポーネントクラスはReactElementへと変換される。</span>
React.createElement()を何度も呼び出す場合に、ファクトリー関数を使うとコードが簡潔になる。
&nbsp;
ということで、最初につくったExampleApplicationコンポーネントを直接使うのではなく、React.createFactoryでファクトリー関数にしたものを使ってということですね。
上記2段目の
<pre>var ExampleApplicationFactory = React.createFactory(ExampleApplication);</pre>
ここでファクトリー関数に変換してます。
&nbsp;
次にnew Date().getTime()でデバイスから現在時刻を取得します。
一定時間で繰り返すsetIntervalを使ってReactDOM.renderでDOMへ描画する記述をしていきます。
先ほどファクトリー関数にしたExampleApplicationFactoryをつかって、ExampleApplicationコンポーネントを利用します。
<pre>ExampleApplicationFactory({elapsed: new Date().getTime() - start}),</pre>
ここの({...})内にelapsedに計算式を入れます。<a href=\"http://kumao-no-mori.com/2016/02/09/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">React サンプルを解読してみる１</a>でthis.props.elapsedで呼び出されて使われていたやつです。
この次にそれを描画する場所を指定します。<pre><div id=\"container\"></div></pre>へ。変化が必要な箇所だけDOMの更新が行われます。
そして、最後の50はsetIntervalのミリ秒数(1/1000 秒) です。50は0.05秒毎、0.05秒毎にelapsedに計算を代入しrenderしてますね。
&nbsp;
ということなのかな！サンプルbasicの解読は以上になります。

&nbsp;
","post_title": "React サンプルを解読してみる２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "454-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:34:40","post_modified_gmt": "2016-07-22 03:34:40","post_content_filtered": "","post_parent": 454,"guid": "http://kumao-no-mori.com/2016/07/22/454-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 775,"post_author": 1,"post_date": "2016-07-22 12:35:54","post_date_gmt": "2016-07-22 03:35:54","post_content": "React勉強始めたばかりでふわふわですが。学んだ事をここにメモしていこうとおもいます。

&nbsp;　&nbsp;　　　
<em>Reactは仮想DOMを使い、DOMへのアクセスを極力減らし、必要最低限なDOMの更新のみを行う。</em>
<em>Reactコンポーネントは、プロパティ(props)と状態(state)を入力として受け取り、仮想DOMを出力する一種の関数とみなすことができる。</em>
&nbsp;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
まずReactで配布されているStarter Kitのサンプルの２つの解読に挑戦してみます。
配布されているReact本家様サイトはこちら<a href=\"https://facebook.github.io/react/downloads.html\">https://facebook.github.io/react/downloads.html</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" rel=\"attachment wp-att-408\"><img class=\"aligncenter size-full wp-image-408\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react1.png\" alt=\"react1\" width=\"1043\" height=\"277\" /></a>

ここの<strong>Download Starter Kit 0.14.7</strong>ボタンからダウンロードするとbuildと一緒にexamplesファイルが入っています。(2016年現在)
その中の一つ目のbasicから。

ブラウザで見ると以下の箇所が永遠にカウントを続けています。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" rel=\"attachment wp-att-410\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/react_basic.png\" alt=\"reactのbasicのサンプル画像\" width=\"585\" height=\"297\" class=\"aligncenter size-full wp-image-410\" /></a>

ロジックはどうなってるのかコードをみてみます。
まず最初の
<pre>
 var ExampleApplication = React.createClass({
        render: function() {
</pre>
Reactはコンポーネントを作って組み合わせて行くことでアプリケーションを作って行く。
そしてコンポーネントは上記の様にReact.createClassにrenderメソッドを持ったオブジェクトを渡す事で作成する。
&nbsp;
そしてこの書き出しから次は
<pre>
          var elapsed = Math.round(this.props.elapsed  / 100);
          var seconds = elapsed / 10 + (elapsed % 10 ? \'\' : \'.0\' );
          var message = \'React has been successfully running for \' + seconds + \' seconds.\';
          
          return React.DOM.p(null, message);
        }
      });
</pre>
elapsedに代入している内容について、
Math.roundメソッドで、小数点以下四捨五入。
&nbsp;　　
<strong>★ キーワード 【props】</strong>
propsはプロパティのこと。プロパティ経由でコンポーネントにデータを渡し、ツリー全体に伝播させる事ができる。
propsは不変として扱い、コンポーネント内でthis.propsの値を変更してはいけない。

上記のコードにthis.props.elapsedとあります。this.props.〇〇〇はコンポーネントの中でプロパティの値を参照する記述。elapsedを定義しているコードは後ほど出てきます。
ここではざっと、計算したものを代入、表示するもの代入してます。そして、return React.DOM.p(null, message);で、DOMのpタグに先ほど出てきた変数messageが返すように指定されてますね。
&nbsp;　&nbsp;　
長くなるので、続きは次回<a href=\"http://kumao-no-mori.com/2016/02/12/react-%e3%82%b5%e3%83%b3%e3%83%97%e3%83%ab%e3%82%92%e8%a7%a3%e8%aa%ad%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b%ef%bc%92/\">「React サンプルを解読してみる２」</a>に書く予定。

&nbsp;","post_title": "React サンプルを解読してみる１","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "407-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:35:54","post_modified_gmt": "2016-07-22 03:35:54","post_content_filtered": "","post_parent": 407,"guid": "http://kumao-no-mori.com/2016/07/22/407-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 776,"post_author": 1,"post_date": "2016-07-22 12:37:57","post_date_gmt": "2016-07-22 03:37:57","post_content": "stashを取り込んだらごちゃごちゃしてしまったとか、強制的にリモートに作業内容を合わせてしまいたいという時は、
<pre class=\"\">git reset --hard origin/[リモートブランチ]
</pre>

&nbsp;","post_title": "Git 強制的にリモートと一致させる","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "414-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:37:57","post_modified_gmt": "2016-07-22 03:37:57","post_content_filtered": "","post_parent": 414,"guid": "http://kumao-no-mori.com/2016/07/22/414-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 777,"post_author": 1,"post_date": "2016-07-22 12:38:59","post_date_gmt": "2016-07-22 03:38:59","post_content": "親要素にcolumn-count: カラム数;を付けるだけで、小要素のカラム数を変更できます。

10個ある要素を2カラムと5カラムに切り替えられるテスト作りました。

&nbsp;
<p data-height=\"500\" data-theme-id=\"22047\" data-slug-hash=\"bExGWa\" data-default-tab=\"result\" data-user=\"kumapoyo\" class=\'codepen\'>See the Pen <a href=\'http://codepen.io/kumapoyo/pen/bExGWa/\'>bExGWa</a> by NaoKidoguchi (<a href=\'http://codepen.io/kumapoyo\'>@kumapoyo</a>) on <a href=\'http://codepen.io\'>CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

","post_title": "CSS3 column-countでカラム数を指定","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "397-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:38:59","post_modified_gmt": "2016-07-22 03:38:59","post_content_filtered": "","post_parent": 397,"guid": "http://kumao-no-mori.com/2016/07/22/397-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 778,"post_author": 1,"post_date": "2016-07-22 12:40:29","post_date_gmt": "2016-07-22 03:40:29","post_content": "フェッチでリポジトリのものを取り出す。
<pre>git fetch
</pre>
&nbsp;&nbsp;
リモートブランチ一覧表示。
<pre>git branch -a
</pre>
&nbsp;&nbsp;
リモートブランチからローカルブランチ名を指定してローカルに持ってくる&amp;チェックアウトする。
引数は[ローカル][リモート]の順。
<pre>git checkout -b feature/branch_1 origin/branch_1
</pre>

&nbsp;","post_title": "Git リモートブランチからローカルブランチを作成","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "388-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:40:29","post_modified_gmt": "2016-07-22 03:40:29","post_content_filtered": "","post_parent": 388,"guid": "http://kumao-no-mori.com/2016/07/22/388-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 779,"post_author": 1,"post_date": "2016-07-22 12:42:04","post_date_gmt": "2016-07-22 03:42:04","post_content": "フェッチでリポジトリのものを取り出す。
<pre>git fetch
</pre>
&nbsp;&nbsp;
リモートブランチ一覧表示。
<pre>git branch -a
</pre>
&nbsp;&nbsp;
リモートブランチからローカルブランチ名を指定してローカルに持ってくる&amp;チェックアウトする。
引数は[ローカル][リモート]の順。
<pre>git checkout -b feature/branch_1 origin/branch_1
</pre>

&nbsp;","post_title": "Git リモートブランチからローカルブランチを作成","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "388-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:42:04","post_modified_gmt": "2016-07-22 03:42:04","post_content_filtered": "","post_parent": 388,"guid": "http://kumao-no-mori.com/2016/07/22/388-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 780,"post_author": 1,"post_date": "2016-07-22 12:43:42","post_date_gmt": "2016-07-22 03:43:42","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもみんな使えます。。

&nbsp;
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>

私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;
&nbsp;


<strong>2. npmを使ってESLintをインストール</strong>

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;
&nbsp;


<strong>3. ESLintのファイル作成</strong>

<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。
&nbsp;

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;font-size: 12px;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;font-size: 12px;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;font-size: 12px;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。
&nbsp;
&nbsp;


★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

&nbsp;","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:43:42","post_modified_gmt": "2016-07-22 03:43:42","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/07/22/365-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 781,"post_author": 1,"post_date": "2016-07-22 12:44:18","post_date_gmt": "2016-07-22 03:44:18","post_content": "JavaScriptの構文チェックツールESLintについてメモメモ。
vimやSublimeTextやAtomなどのテキストエディタでもプラグインをいれればバリデートができるので、フロントもバックもこれは使えます。

&nbsp;
<strong>1. まずESLintを扱えるようにnpm、node.jsをインストール</strong>

私はバージョンが古かったせいかうまくいかなかったので、バージョンアップの方法をメモします。

★node.jsはnを使ってバージョンアップ

nをインストール。
<pre class=\"\">$ npm install -g n</pre>
&nbsp;

最新版をインストールでオッケー。
<pre class=\"\">$ n latest</pre>
&nbsp;

★npmのバージョンアップ

これでオッケー。
<pre>$ npm update -g npm</pre>
&nbsp;
&nbsp;


<strong>2. npmを使ってESLintをインストール</strong>

ESLintをインストール。
<pre class=\"\">$ npm install -g eslint</pre>
&nbsp;

インストールされているか確認。
<pre class=\"\">$ eslint -v</pre>
&nbsp;
&nbsp;


<strong>3. ESLintのファイル作成</strong>

<pre class=\"\">$ eslint --init</pre>
これをやると「どうやってESLintを設定しますか？」「インデントはスペースですかタブですか？」「どのフォーマットで出力しますか？」など訊いてくるので、矢印キーで選んでいく。

.eslintrc(.拡張子)が作成される。これがバリデートのルールのファイル。ここに自由に足して行けばオリジナルのルールを作れる。
&nbsp;

★ルールの例え<a href=\"https://github.com/eslint/eslint\">本家様のGitHubから参照</a>
<pre class=\"\">{
    \"rules\": {
        \"semi\": [2, \"always\"],
        \"quotes\": [2, \"double\"]
    }
}
</pre>
<p style=\"text-align: center;font-size: 12px;\">\"semi\" -&gt; 半角
\"quotes\" -&gt; 引用符</p>
<p style=\"text-align: center;font-size: 12px;\">0 - オフ
1 - 警告
2 - エラー</p>
<p style=\"text-align: center;font-size: 12px;\">\"always\" -&gt; すべてに対して
\"double\" -&gt; ダブルクオート</p>
ってことだと思われます；
あと、
<pre class=\"\">{
    \"globals\": {
        \"var1\": true,
        \"var2\": false
    }
}
</pre>
とかでグローバル変数の扱いも設定出来たり...

詳しくは<a href=\"http://eslint.org/docs/user-guide/configuring\">http://eslint.org/docs/user-guide/configuring</a>こちらに詳しく載ってます。
&nbsp;
&nbsp;


★ちなみにSublimeTextのプラグインを使うとこんな感じ。(SublimeLinter)
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" rel=\"attachment wp-att-376\"><img class=\"aligncenter size-full wp-image-376\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint1.png\" alt=\"eslint1\" width=\"165\" height=\"142\" /></a>
タブが含まれているエラー。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" rel=\"attachment wp-att-375\"><img class=\"aligncenter size-full wp-image-375\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/02/eslint2-1.png\" alt=\"eslint2\" width=\"392\" height=\"62\" /></a>
エラー行にカーソルを置くと左下にエラー内容が表示される。

&nbsp;","post_title": "ESLint について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "365-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:44:18","post_modified_gmt": "2016-07-22 03:44:18","post_content_filtered": "","post_parent": 365,"guid": "http://kumao-no-mori.com/2016/07/22/365-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 782,"post_author": 1,"post_date": "2016-07-22 12:46:26","post_date_gmt": "2016-07-22 03:46:26","post_content": "間違えてpushしてしまった場合は
<pre>git rebase -i HEAD~2</pre>
を実行する。これは実行したらすぐ消えたりしないのでビビらないで気軽に実行。
<strong>HEAD~2</strong>これは直前の2つのコミットを修正のために表示してくれます。（指定したコミットより後のコミットを指定すると、指定したコミットからの一覧が表示されます。）

そうするとvimが立ち上がり、直前の2つのコミットが表示してあります。
<del datetime=\"2016-06-20T06:47:03+00:00\">削除したいコミットの一行を削除し保存する。</del>
(2016/6/20修正)
以下のような修正コマンドがあります。
コミット番号の前のpickになっている箇所を修正したいコマンドに書き換えます。
<pre>#  Commands:
#　　p, pick = 内容を変更しない
#　　r, reword = コミットメッセージを変更する
#　　e, edit = コミットを編集する
#　　s, squash = ひとつ前のコミットにまとめ、コミットメッセージを書き直す
#  　f, fixup = ひとつ前のコミットにまとめ、コミットメッセージをそのまま使う
#  　x, exec = shell でコマンドを実行する
#  　d, drop = コミットを削除する
</pre> 

変更しvimで保存した後、

<pre>git add .
git commit --amend
</pre>
で変更をコミット。

これだけではrebaseの処理は終わっておらず、
<pre>git rebase --continue</pre>
で終了させます。

これで完了です。

&nbsp;","post_title": "Git 間違えてpushしてしまった時のrebase","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "340-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:46:26","post_modified_gmt": "2016-07-22 03:46:26","post_content_filtered": "","post_parent": 340,"guid": "http://kumao-no-mori.com/2016/07/22/340-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 783,"post_author": 1,"post_date": "2016-07-22 12:48:21","post_date_gmt": "2016-07-22 03:48:21","post_content": "コマンドラインでGitを扱う時、見やすくする方法いろいろ。


<strong>☆ oh-my-zsh</strong>
<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\">oh-my-zsh</a>
こちらのものをREADME.markdown内に記述してある通りにcurlコマンドを実行。
それだけで今いるブランチが常に表示されつようになり、且つ矢印や色が付き、かなり見やすくなります。


<strong>☆ $ git config</strong>
git configコマンドを流すだけで、いろいろな設定ができます。(またはgitconfigファイルで設定出来ます。)

<strong>★ コードカラーの例</strong>
$ git diff時(差分確認)色を付ける。
<pre>$ git config --global color.diff auto</pre>
$ git branch時(ブランチ表示)色をつける。
<pre>$ git config --global color.branch auto</pre>
$ git status時(変更確認)色をつける。
<pre>$ git config --global color.status auto</pre>
interactive時(対話シェルモード)色をつける。
<pre>$ git config --global color.interactive auto</pre>

さらに以下のように色づけ設定ができる。
<pre>$ git config --global color.diff.meta \"blue black bold\"</pre>
上記のは、diffの出力で、「メタ情報を黒字に青の太字で出力」という設定。
指定出来る色は<strong>normal, black, red, green, yellow, blue, magenta, cyan, white</strong>のいずれか。
また、<strong>bold, dim, ul(下線つき), blink, reverse(文字と背景の色を逆にする)</strong>のいずれかでデコレーションも出来る。

<strong>★ エイリアスの例</strong>
$ git statusコマンドの省略。
<pre>$ git config --global alias.st status</pre>
$ git branchコマンドの省略。
<pre>$ git config --global alias.br branch</pre>
$ git checkoutコマンドの省略。
<pre>$ git config --global alias.co checkout</pre>
$ git commitコマンドの省略。
<pre>$ git config --global alias.ci commit</pre>

このように省略形を登録しておく事で、たとえばエイリアスの例の一つ目、$ git statusをやりたい時には$ git stで実行出来るようになる。
よく使うgitコマンドはこのようにエイリアスを作成すると仕事効率UPですね。

上記のコードカラーとエイリアス一気に流す用に ▽
<pre>
git config --global color.diff auto
git config --global color.branch auto
git config --global color.status auto
git config --global color.interactive auto
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout
git config --global alias.ci commit
</pre>

&nbsp;","post_title": "Git のカスタマイズ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "333-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:48:21","post_modified_gmt": "2016-07-22 03:48:21","post_content_filtered": "","post_parent": 333,"guid": "http://kumao-no-mori.com/2016/07/22/333-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 784,"post_author": 1,"post_date": "2016-07-22 12:49:59","post_date_gmt": "2016-07-22 03:49:59","post_content": "push, pull時に毎回ユーザー名とパスワードきかれるので、GitHubにSSH接続して無駄な作業をなくす。

まず公開鍵と秘密鍵を作成します。
★ 秘密鍵 <strong>id_rsa</strong>
★ 公開鍵 <strong>id_rsa.pub</strong>

☆ 鍵を入れるフォルダに移動
<pre>cd ~/.ssh</pre>

☆ 鍵の生成
<pre>ssh-keygen -t rsa</pre>

これで２つの鍵が作成される。


公開鍵をGitHubに登録する。
<a href=\"https://github.com/settings/ssh\" target=\"_blank\">GitHubのssh設定画面</a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" rel=\"attachment wp-att-327\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" alt=\"githubの画面画像\" width=\"998\" height=\"489\" class=\"aligncenter size-full wp-image-327\" /></a>
titleは適当に、
<pre>pbcopy < ~/.ssh/id_rsa.pub</pre>
で公開鍵をクリップボードにコピー。
それをそのままkeyの入力欄にペーストして、AddKeyボタンで登録完了。

公開鍵と同時に作成した秘密鍵、これを持っているデバイスのみSSH接続が出来ます。

&nbsp;

","post_title": "GitHub SSHキー作成メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "325-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:49:59","post_modified_gmt": "2016-07-22 03:49:59","post_content_filtered": "","post_parent": 325,"guid": "http://kumao-no-mori.com/2016/07/22/325-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 785,"post_author": 1,"post_date": "2016-07-22 12:51:24","post_date_gmt": "2016-07-22 03:51:24","post_content": "push, pull時に毎回ユーザー名とパスワードきかれるので、GitHubにSSH接続して無駄な作業をなくす。

まず公開鍵と秘密鍵を作成します。
★ 秘密鍵 <strong>id_rsa</strong>
★ 公開鍵 <strong>id_rsa.pub</strong>

☆ 鍵を入れるフォルダに移動
<pre>cd ~/.ssh</pre>

☆ 鍵の生成
<pre>ssh-keygen -t rsa</pre>

これで２つの鍵が作成される。


公開鍵をGitHubに登録する。
<a href=\"https://github.com/settings/ssh\" target=\"_blank\">GitHubのssh設定画面</a>
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" rel=\"attachment wp-att-327\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/gitsshkey.png\" alt=\"githubの画面画像\" width=\"998\" height=\"489\" class=\"aligncenter size-full wp-image-327\" /></a>
titleは適当に、
<pre>pbcopy < ~/.ssh/id_rsa.pub</pre>
で公開鍵をクリップボードにコピー。
それをそのままkeyの入力欄にペーストして、AddKeyボタンで登録完了。

公開鍵と同時に作成した秘密鍵、これを持っているデバイスのみSSH接続が出来ます。

&nbsp;

","post_title": "GitHub SSHキー作成メモ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "325-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:51:24","post_modified_gmt": "2016-07-22 03:51:24","post_content_filtered": "","post_parent": 325,"guid": "http://kumao-no-mori.com/2016/07/22/325-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 786,"post_author": 1,"post_date": "2016-07-22 12:52:35","post_date_gmt": "2016-07-22 03:52:35","post_content": "下にスクロールすると表示、上にスクロールすると非表示になるヘッダーを作ったので、ここに置いときます。
https://gist.github.com/naokidoguchi/88ec4e94da97770aee2b

CSS3のtransitionでスムーズに
https://gist.github.com/naokidoguchi/64788b39ff2b18af4e80

&nbsp;","post_title": "jQuery スクロールすると表示非表示するヘッダー","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "322-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:52:35","post_modified_gmt": "2016-07-22 03:52:35","post_content_filtered": "","post_parent": 322,"guid": "http://kumao-no-mori.com/2016/07/22/322-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 787,"post_author": 1,"post_date": "2016-07-22 12:53:47","post_date_gmt": "2016-07-22 03:53:47","post_content": "<pre class=\"lang:css decode:true \" >-webkit-tap-highlight-color:rgba(0,0,0,0);</pre> 
これを入れればデフォルトでなるタップ時の黒い影を消せる。
毎回わすれてしまうので。。

逆にオリジナルに色付けたいときは、rgbaの値を変えれば良い。

&nbsp;
","post_title": "CSS スマホでタップすると出来る黒い影を消す","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "316-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:53:47","post_modified_gmt": "2016-07-22 03:53:47","post_content_filtered": "","post_parent": 316,"guid": "http://kumao-no-mori.com/2016/07/22/316-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 788,"post_author": 1,"post_date": "2016-07-22 12:55:24","post_date_gmt": "2016-07-22 03:55:24","post_content": "変更途中のファイルがある時、切り替えるの厄介ですよね。
コミットするか、スタッシュするか。。
私はとにかくスタッシュするようにしてます。
あとAパターン、Bパターンと作成しておくのにも便利ですよね。
そのスタッシュについて一通りをメモ。

★ stashする
<pre>git stash</pre>

★ コメントを付けてstashする
<pre>git stash save \"自由にコメント\"</pre>

★ stashリストを確認
<pre>git stash list</pre>
(-p とオプション付けると変更内容も確認出来る。)

★ stashしたファイルの内容確認
<pre>git stash show \"stash名\"</pre>


★ stashしたものを取り出す
<pre>git stash apply stash@{0}</pre>
({}のなかの番号はリストを確認。最新は{0})

★ stashリストを消す
<pre>git stash drop stash@{0}</pre>

★ stashしたものを取り出した際に削除も同時に行う
<pre>git stash pop stash@{0}</pre>

&nbsp;
","post_title": "Git 一時退避のstashについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "311-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:55:24","post_modified_gmt": "2016-07-22 03:55:24","post_content_filtered": "","post_parent": 311,"guid": "http://kumao-no-mori.com/2016/07/22/311-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 789,"post_author": 1,"post_date": "2016-07-22 12:57:05","post_date_gmt": "2016-07-22 03:57:05","post_content": "vimの起動時に実行しておきたいコマンドは.vimrcに記述する。
ずらずらとコマンドを一行ずつ書いて行けば良い。

初心者の私は取りあえず
<strong>syntax on</strong> コードカラーを付ける
<strong>set number</strong> コード行番号を表示
の２つで満足してますが、その他に設定しておくと便利そうなのをメモしてみます↓
<strong>set tabstop=4</strong> インデントをスペース4つ分
<strong>set smartindent</strong> 自動インデント
<strong>set title</strong> 編集中のタイトルをセット


.vimrcでは<strong> \" </strong>(ダブルクオテーション)でコメントアウト。

<strong>[v]</strong> ビジュアルモード
<strong>[i]</strong> 挿入モード
<strong>[ESC]</strong> コマンドモード
<strong>[u]</strong> 前の状態に戻したい場合
<strong>[Ctrl]+[r]</strong> やり直したい場合
<strong>[dd]</strong> 一行削除
<strong>[番号]</strong> 行きたい行番号入力で飛べる
<strong>[gg]</strong> 最初の行へ 
<strong>[G]</strong> 画面上最後の行へ
<strong>[H]</strong> 画面上最初の行へ
<strong>[M]</strong> 画面上真ん中の行へ
<strong>[L]</strong> 画面上最後の行へ
<strong>[*]</strong> カーソル下の単語検索
<strong>[yy]</strong> 今いる行をコピー
<strong>[p]</strong> カーソルの箇所にペースト

&nbsp;

","post_title": "vim のカスタマイズとか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "307-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:57:05","post_modified_gmt": "2016-07-22 03:57:05","post_content_filtered": "","post_parent": 307,"guid": "http://kumao-no-mori.com/2016/07/22/307-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 790,"post_author": 1,"post_date": "2016-07-22 12:57:09","post_date_gmt": "2016-07-22 03:57:09","post_content": "vimの起動時に実行しておきたいコマンドは.vimrcに記述する。
ずらずらとコマンドを一行ずつ書いて行けば良い。

初心者の私は取りあえず
<strong>syntax on</strong> コードカラーを付ける
<strong>set number</strong> コード行番号を表示
の２つで満足してますが、その他に設定しておくと便利そうなのをメモしてみます↓
<strong>set tabstop=4</strong> インデントをスペース4つ分
<strong>set smartindent</strong> 自動インデント
<strong>set title</strong> 編集中のタイトルをセット


.vimrcでは<strong> \" </strong>(ダブルクオテーション)でコメントアウト。

<strong>[v]</strong> ビジュアルモード
<strong>[i]</strong> 挿入モード
<strong>[ESC]</strong> コマンドモード
<strong>[u]</strong> 前の状態に戻したい場合
<strong>[Ctrl]+[r]</strong> やり直したい場合
<strong>[dd]</strong> 一行削除
<strong>[番号]</strong> 行きたい行番号入力で飛べる
<strong>[gg]</strong> 最初の行へ 
<strong>[G]</strong> 画面上最後の行へ
<strong>[H]</strong> 画面上最初の行へ
<strong>[M]</strong> 画面上真ん中の行へ
<strong>[L]</strong> 画面上最後の行へ
<strong>[*]</strong> カーソル下の単語検索
<strong>[yy]</strong> 今いる行をコピー
<strong>[p]</strong> カーソルの箇所にペースト

&nbsp;

","post_title": "vim のカスタマイズとか","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "307-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:57:09","post_modified_gmt": "2016-07-22 03:57:09","post_content_filtered": "","post_parent": 307,"guid": "http://kumao-no-mori.com/2016/07/22/307-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 791,"post_author": 1,"post_date": "2016-07-22 12:58:37","post_date_gmt": "2016-07-22 03:58:37","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用していくにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452666164415.jpg\" rel=\"attachment wp-att-298\"><img class=\"aligncenter size-medium_large wp-image-298\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom: 0;\">
	<li style=\"list-style-position: inside;\">Microdata</li>
	<li style=\"list-style-position: inside;\">RDFa</li>
	<li style=\"list-style-position: inside;\">JSON-LD</li>
	<li style=\"list-style: none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>
そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

https://gist.github.com/naokidoguchi/6be5c6c35f5a251e425c

こんな感じに書いてみたのですが、ぱっと見で読めると思います。
パンくずリストはこういうことです。
<strong> カテゴリー > プロダクト > 商品1 </strong>


コードを上から見ていきます↓

★ JSONオブジェクト
<strong>\"@context\": \"http://schema.org\"</strong>
schema.orgについてこれから記述していく事を宣言。

<strong>\"@type\": \"BreadcrumbList\"</strong>
schema.orgで定義されている「型」を記述。
今回はパンくずなので、パンくずを扱うBreadcrumbListを使用。
他の型については、schema.org公式サイトで確認してください。
<a href=\"http://schema.org/docs/schemas.html\" target=\"_blank\">http://schema.org/docs/schemas.html</a>

★ プロパティ
<strong>\"position\": 1</strong>
パンくずリストの順番。

<strong>\"@id\": \"https://example.com/categories\"</strong>
そのパンくずで示されるページのURL。

<strong>\"name\": \"プロダクト\"</strong>
そのパンくずリストのラベル。


これで以上の情報を検索エンジンに伝えられます。

JSON-LDを記述し終わったら必ずこちらでチェック↓
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1.png\" rel=\"attachment wp-att-305\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1-768x377.png\" alt=\"image_schema\" width=\"660\" height=\"324\" class=\"aligncenter size-medium_large wp-image-305\" /></a>

このように問題が出なければ大丈夫です。

&nbsp;","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:58:37","post_modified_gmt": "2016-07-22 03:58:37","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/2016/07/22/286-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 792,"post_author": 1,"post_date": "2016-07-22 12:59:00","post_date_gmt": "2016-07-22 03:59:00","post_content": "schema.orgについて、前回軽く書きましたが、
<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>
これからパンくずに使用していくにあたってもう少し詳しく知った事をメモ。

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-e1452666164415.jpg\" rel=\"attachment wp-att-298\"><img class=\"aligncenter size-medium_large wp-image-298\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-150819082118_TP_V-768x512.jpg\" alt=\"パンくず\" width=\"660\" height=\"440\" /></a>

schema.orgを記述する方法として３パターンあるみたいです。
<ul style=\"margin-bottom: 0;\">
	<li style=\"list-style-position: inside;\">Microdata</li>
	<li style=\"list-style-position: inside;\">RDFa</li>
	<li style=\"list-style-position: inside;\">JSON-LD</li>
	<li style=\"list-style: none;\">Microdataと併せてRDFaとJSON-LDを記述したりもできます。</li>
</ul>
そして、前回<a href=\"http://kumao-no-mori.com/archives/187\" target=\"_blank\">schema.orgについて１</a>で軽く書いたプロパティはMicrodataの書き方でした。

Microdataでの記述は既存のCSSに影響を出してしまう可能性があります、JSON-LDがシンプルで導入しやすいということで、JSON-LDでの記述方法を以下にまとめてみます。

https://gist.github.com/naokidoguchi/6be5c6c35f5a251e425c

こんな感じに書いてみたのですが、ぱっと見で読めると思います。
パンくずリストはこういうことです。
<strong> カテゴリー > プロダクト > 商品1 </strong>


コードを上から見ていきます↓

★ JSONオブジェクト
<strong>\"@context\": \"http://schema.org\"</strong>
schema.orgについてこれから記述していく事を宣言。

<strong>\"@type\": \"BreadcrumbList\"</strong>
schema.orgで定義されている「型」を記述。
今回はパンくずなので、パンくずを扱うBreadcrumbListを使用。
他の型については、schema.org公式サイトで確認してください。
<a href=\"http://schema.org/docs/schemas.html\" target=\"_blank\">http://schema.org/docs/schemas.html</a>

★ プロパティ
<strong>\"position\": 1</strong>
パンくずリストの順番。

<strong>\"@id\": \"https://example.com/categories\"</strong>
そのパンくずで示されるページのURL。

<strong>\"name\": \"プロダクト\"</strong>
そのパンくずリストのラベル。


これで以上の情報を検索エンジンに伝えられます。

JSON-LDを記述し終わったら必ずこちらでチェック↓
<a href=\"https://developers.google.com/structured-data/testing-tool/\" target=\"_blank\">https://developers.google.com/structured-data/testing-tool/</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1.png\" rel=\"attachment wp-att-305\"><img src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/image_schema-1-768x377.png\" alt=\"image_schema\" width=\"660\" height=\"324\" class=\"aligncenter size-medium_large wp-image-305\" /></a>

このように問題が出なければ大丈夫です。

&nbsp;","post_title": "schema.orgについて２","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "286-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 12:59:00","post_modified_gmt": "2016-07-22 03:59:00","post_content_filtered": "","post_parent": 286,"guid": "http://kumao-no-mori.com/2016/07/22/286-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 793,"post_author": 1,"post_date": "2016-07-22 13:00:13","post_date_gmt": "2016-07-22 04:00:13","post_content": "border-radiusをボーダーではなく要素にかけるとき、効かないなってなったら
<pre>overflow: hidden;</pre>
を足せば良い。

&nbap;

","post_title": "CSS border-radiusについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "280-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 13:00:13","post_modified_gmt": "2016-07-22 04:00:13","post_content_filtered": "","post_parent": 280,"guid": "http://kumao-no-mori.com/2016/07/22/280-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 794,"post_author": 1,"post_date": "2016-07-22 14:34:32","post_date_gmt": "2016-07-22 05:34:32","post_content": "いつもgitはGUIを使ってcommitとかpushとかしてたのですが、pcのバージョン関係で突然使えなくなり、久々にコマンドラインでpushしたときにはまった事をメモメモ。

まず、私は間違えて
<pre class=\"lang:sh decode:true \" >git push [リモート先ブランチ]</pre> 
と記述してしまいました。

すると
<em>fatal: You didn\'t specify any refspecs to push, and push.default is \"nothing\".</em>
というエラーがでました。

それで エラー内のrefspecsてなんだと調べたら、[リモート先ブランチ]の部分のことで、そこが間違ってますよということみたいでした。

でもそこはあっているのでなんでかなとおもったら
<strong>origin</strong>
これ入れ忘れてました。

originとは、調べたところ起源、根源とかいう意味みたいですね。

そして正しくは
<pre class=\"lang:sh decode:true \" >git push origin [リモート先ブランチ]</pre>

これで無事pushできました。

ちなみに、refspecsは複数でも大丈夫です。

&nbsp;","post_title": "Git push時のエラー","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "275-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:34:32","post_modified_gmt": "2016-07-22 05:34:32","post_content_filtered": "","post_parent": 275,"guid": "http://kumao-no-mori.com/2016/07/22/275-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 795,"post_author": 1,"post_date": "2016-07-22 14:36:04","post_date_gmt": "2016-07-22 05:36:04","post_content": " <pre class=\"lang:sh decode:true \" >git branch --contains</pre> 
このコマンドで現在のブランチを表示出来る。

&nbsp;
","post_title": "Git 現在のブランチ名を表示","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "273-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:36:04","post_modified_gmt": "2016-07-22 05:36:04","post_content_filtered": "","post_parent": 273,"guid": "http://kumao-no-mori.com/2016/07/22/273-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 796,"post_author": 1,"post_date": "2016-07-22 14:36:58","post_date_gmt": "2016-07-22 05:36:58","post_content": "cookieの操作について書く前に...
2016年1月12日(米国時間)に、IEの古いバージョンのサポートが終了するんですってよ奥さん。
これで制作時は実質IE11の対応のみ考えれば良い事になるそうです。
IEとの長い戦い...遂におわるのです。flexboxも問題なく使えちゃいます。
簡単にflexboxについて書いてますので是非↓
<a title=\"flexboxについて\" href=\"http://kumao-no-mori.com/?s=flexbox\" target=\"_blank\">flexboxについての記事へ</a>

<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-e1452141104971.jpg\" rel=\"attachment wp-att-262\"><img class=\"aligncenter size-medium_large wp-image-262\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/shared-img-thumb-C785_coffeekukki-milk_TP_V-768x512.jpg\" alt=\"-shared-img-thumb-C785_coffeekukki-milk_TP_V\" width=\"660\" height=\"440\" /></a>
それでは、jsでのcookieの操作について覚えた事をメモしていきます。
クッキーを操作することにより、一度操作した後リロードさせても、ブラウザを閉じても操作が残るようにさせるとか、そんなことができます。

まずjQueryを読み込み、
<a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a>
こちらのサイト様からjquery.cookie.jsを落としてきて、読み込みます。

<strong style=\"text-align: center;\">☆cookieの作成☆</strong>
cookieを作成する時は、このように記述します。
<pre class=\"lang:js decode:true \">$.cookie(\"cookieの名前\", \"値\", { オプション });</pre>
オプションには次のようなものがあります。

<strong>★expires</strong>
保存する期間を設定出来ます。(例: expires: 7 [7日間保存する])
設定しない場合はブラウザを閉じた際に削除される。

<strong>★path</strong>
保存対象のパス名を指定出来ます。(例:path: \"/\" [サイト全体を対象])

<strong>★domain</strong>
有効となるドメインを指定出来ます。(例:domain: \"kumao-no-mori.com\" [kumao-no-mori.comを有効に])

<strong>★secure</strong>
セキュアなHTTPS接続の場合のみにcookieを送信。(例:secure: \"true\" [HTTPS接続のみ])
デフォルトはfalse。

<strong>☆cookieの取得☆</strong>
<pre class=\"lang:js decode:true\">$.cookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.cookieメソッドに記述すれば、取得できます。

<strong>☆cookieの削除☆</strong>
<pre class=\"lang:js decode:true \">$.removeCookie(\"cookieの名前\");</pre>
上記で保存したcookieの名前を$.removeCookieメソッドに記述すれば、削除できます。
オプションを付ける事も出来ますが、作成時に設定をしていれば、記述する必要はありません。

&nbsp;


テストなんかで、ブラウザでクッキーを操作したい場合、chromeの拡張機能で、こんな「EditThisCookie」というCookie管理ソフトがあります。
<a href=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" rel=\"attachment wp-att-264\"><img class=\"aligncenter size-full wp-image-264\" src=\"http://kumao-no-mori.com/wp-content/uploads/2016/01/スクリーンショット-2016-01-07-1.46.07-PM.png\" alt=\"スクリーンショット 2016-01-07 1.46.07 PM\" width=\"746\" height=\"123\" /></a>

これを使えば、Cookieを追加、削除、編集、検索、保護、ブロックすることができます。

&nbsp;","post_title": "jquery.cookie.js でのcookieの操作","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "257-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:36:58","post_modified_gmt": "2016-07-22 05:36:58","post_content_filtered": "","post_parent": 257,"guid": "http://kumao-no-mori.com/2016/07/22/257-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 797,"post_author": 1,"post_date": "2016-07-22 14:38:30","post_date_gmt": "2016-07-22 05:38:30","post_content": "FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。

<strong>☆コントローラー(Controller)</strong>
webブラウザからのリクエストを最初に受け取るのが、PHPファイルでドキュメントルート直下の\"index.php\"。これを「<strong>フロントコントローラー</strong>」と呼ぶ。
受け取ったリクエストを元に、どういった処理を行うかを決定し、必要に応じてモデルを呼び出しながら処理を行い、最終的に必要なビューを呼び出してブラウザに返す為のデータを生成するといったロジックは全てこのコントローラーに記述する。

＊コントローラーは大きく分けて4つある ↓

・Controllerクラスを拡張して作成する通常の<strong>「コントローラー」</strong>
・Controller_Templateを拡張して作成する<strong>「テンプレートコントローラー」</strong>
・Web APIとしてRESTフルなリクエストに対してXMLやJSON形式のデータ送信の為のController_Restを拡張する<strong>「Restコントローラー」</strong>
・テンプレートコントローラーとRestコントローラーの両方の機能をもつ<strong>「Hybridコントローラー」</strong>

(RESTフルってんだよ!って思って調べてみたらWebAPIの実装方式でRESTというものとSOAPというものがあるみたいです。それでRESTの原則に従って実装されているシステムのことを、\"RESTful\"と呼ぶらしいです。これは後日WebAPIについて勉強しないと...)

<strong>☆ビュー(View)</strong>
HTMLを記述したPHPファイル。あのテンプレートファイル(.tpl)のことですね。私はフロントエンドエンジニアなのでその私がいつも触ってるやつです。

<strong>☆モデル(Model)</strong>
データを取得し、操作し、あるいはそれを消去したい場合、その処理は常にモデルによって行われるべきです。
コントローラにはSQLクエリを一切記述せず、モデル側にそれを記述し、コントローラではモデルが実行したクエリを呼び出す、というような処理が出来ます。
この方法によって、データベースを変更した時もコントローラを書き換える必要はなく、データベースに影響を及ぼすモデルのみを書き換えるだけですむのです。

Fuel において、<strong>モデルの本質は単なるクラス</strong>です。つまり<strong>ライブラリ以外のなにものでもありません</strong>。 ただし Model_ 接頭辞が付いているので、他のクラスと見分けを付けることが容易になります。モデルを有効に使うためには、他のクラスを必要とするでしょう。

↑とってもわかりやすいのでFuelPHPの公式サイトからそのまま抜粋してしまいました。
モデルはコントローラーで呼び出して使うんですね。

＊そしてモデルを実装するには
<strong>
・Modelクラスを継承する。</strong>
FuelPHPで提供されているModelクラスは実際にはプロパティやメソッドが全く定義されていないクラスなので、データベースへの問い合わせ等はDBクラスを呼び出すなどして、クエリを生成するコードをモデル内に直接記述する形になる。

<strong>・Model_Crudクラスを継承する。</strong>
あらかじめCRUD(データの作成、取得、更新、削除)用のメソッドが用意されたクラス。このクラスを継承してモデルを実装すれば、単純なクエリであれば定義済みのメソッドを呼び出すだけで実装が済んだりする。

<strong>・\\Orm\\Modelクラスを継承する。</strong>
FuelPHPに同梱されるORM(Object Relation Mapping)パッケージで提供されているクラス。
これはデータベースのテーブル間のリレーション(関係、関連という意味)をあらかじめクラス内に設定する事で、関連テーブルのデータを同時に取得・変更する事が出来る。

という方法があります。


そして、これらの☆の三つがMVCというものです。
model-view-controllerでMVC。

【ざっくり言うと】
処理の中核を担うのが「Model」
表示、出力を司るのが「View」
入力を受け取ってその内容に応じてModelとViewを制御するのが「controller」


&nbsp;

","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "251-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:38:30","post_modified_gmt": "2016-07-22 05:38:30","post_content_filtered": "","post_parent": 251,"guid": "http://kumao-no-mori.com/2016/07/22/251-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 798,"post_author": 1,"post_date": "2016-07-22 14:38:53","post_date_gmt": "2016-07-22 05:38:53","post_content": "FuelPHPよくわからないまま触っていて詰みまくるので
今年一発目はFuelPHPについて一から整理して行こうと思います。

<strong>☆コントローラー(Controller)</strong>
webブラウザからのリクエストを最初に受け取るのが、PHPファイルでドキュメントルート直下の\"index.php\"。これを「<strong>フロントコントローラー</strong>」と呼ぶ。
受け取ったリクエストを元に、どういった処理を行うかを決定し、必要に応じてモデルを呼び出しながら処理を行い、最終的に必要なビューを呼び出してブラウザに返す為のデータを生成するといったロジックは全てこのコントローラーに記述する。

＊コントローラーは大きく分けて4つある ↓

・Controllerクラスを拡張して作成する通常の<strong>「コントローラー」</strong>
・Controller_Templateを拡張して作成する<strong>「テンプレートコントローラー」</strong>
・Web APIとしてRESTフルなリクエストに対してXMLやJSON形式のデータ送信の為のController_Restを拡張する<strong>「Restコントローラー」</strong>
・テンプレートコントローラーとRestコントローラーの両方の機能をもつ<strong>「Hybridコントローラー」</strong>

(RESTフルってんだよ!って思って調べてみたらWebAPIの実装方式でRESTというものとSOAPというものがあるみたいです。それでRESTの原則に従って実装されているシステムのことを、\"RESTful\"と呼ぶらしいです。これは後日WebAPIについて勉強しないと...)

<strong>☆ビュー(View)</strong>
HTMLを記述したPHPファイル。あのテンプレートファイル(.tpl)のことですね。私はフロントエンドエンジニアなのでその私がいつも触ってるやつです。

<strong>☆モデル(Model)</strong>
データを取得し、操作し、あるいはそれを消去したい場合、その処理は常にモデルによって行われるべきです。
コントローラにはSQLクエリを一切記述せず、モデル側にそれを記述し、コントローラではモデルが実行したクエリを呼び出す、というような処理が出来ます。
この方法によって、データベースを変更した時もコントローラを書き換える必要はなく、データベースに影響を及ぼすモデルのみを書き換えるだけですむのです。

Fuel において、<strong>モデルの本質は単なるクラス</strong>です。つまり<strong>ライブラリ以外のなにものでもありません</strong>。 ただし Model_ 接頭辞が付いているので、他のクラスと見分けを付けることが容易になります。モデルを有効に使うためには、他のクラスを必要とするでしょう。

↑とってもわかりやすいのでFuelPHPの公式サイトからそのまま抜粋してしまいました。
モデルはコントローラーで呼び出して使うんですね。

＊そしてモデルを実装するには
<strong>
・Modelクラスを継承する。</strong>
FuelPHPで提供されているModelクラスは実際にはプロパティやメソッドが全く定義されていないクラスなので、データベースへの問い合わせ等はDBクラスを呼び出すなどして、クエリを生成するコードをモデル内に直接記述する形になる。

<strong>・Model_Crudクラスを継承する。</strong>
あらかじめCRUD(データの作成、取得、更新、削除)用のメソッドが用意されたクラス。このクラスを継承してモデルを実装すれば、単純なクエリであれば定義済みのメソッドを呼び出すだけで実装が済んだりする。

<strong>・\\Orm\\Modelクラスを継承する。</strong>
FuelPHPに同梱されるORM(Object Relation Mapping)パッケージで提供されているクラス。
これはデータベースのテーブル間のリレーション(関係、関連という意味)をあらかじめクラス内に設定する事で、関連テーブルのデータを同時に取得・変更する事が出来る。

という方法があります。


そして、これらの☆の三つがMVCというものです。
model-view-controllerでMVC。

【ざっくり言うと】
処理の中核を担うのが「Model」
表示、出力を司るのが「View」
入力を受け取ってその内容に応じてModelとViewを制御するのが「controller」


&nbsp;

","post_title": "FuelPHPのMVCモデル","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "251-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:38:53","post_modified_gmt": "2016-07-22 05:38:53","post_content_filtered": "","post_parent": 251,"guid": "http://kumao-no-mori.com/2016/07/22/251-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 799,"post_author": 1,"post_date": "2016-07-22 14:41:51","post_date_gmt": "2016-07-22 05:41:51","post_content": "2015年最後の投稿になります。
Sassあんまり使わないからずっと初心者のままで嫌になります。(←勉強しろ)
ということで今日はSassについて覚えた事をメモメモ。

Sassの関数１
★ <strong>abs()について</strong>
この関数は、引数の絶対値を返してくれる関数です。
（絶対数とはその数が0からどれくらい離れているかを表す値。例えばその値が-15だった場合、0から15離れているので、15の正数が絶対値。）
 
<pre class=\"lang:sass decode:true \" >$hoge: -15px;

// このように同じ数値でプラスかマイナスかの違いの場合に便利。
section{
    margin-left: $hoge;
      .item {
          float: left;
          width: 100px;
          margin-left: abs($hoge);
      }
}</pre> 


Sassの関数２
★ <strong>round()について</strong>
この関数は、小数点以下の数値を四捨五入してくれる。
 
<pre class=\"lang:sass decode:true \" >$hoge: 7px;

.piyo {
    width: round($hoge / 3);
}

// 結果は2px</pre> 

☆ 四捨五入の設定 【ceil() , floor()】
round()では四捨五入しましたが、小数点以下を全て切り上げたいときはround()の代わりに\"ceil()\"を使用する。
逆に小数点以下を全て切り捨てたい場合は\"floor()\"を代わりに使用する。

Sassの関数３
★ <strong>lighten()について</strong>
この関数は、指定した色を明るくしてくれる。 
<pre class=\"lang:sass decode:true \" >// 黒(#000)を30%明るくする
body {
    background: lighten(#000, 30%);
}
// 結果は#4d4d4d(濃いグレー)になる</pre> 

☆ 暗くする関数 【darken()】
逆に暗くしたい場合はlightenの代わりにdarken()を使えば暗く出来ます。

&nbsp;

","post_title": "Sass 関数について","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "246-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:41:51","post_modified_gmt": "2016-07-22 05:41:51","post_content_filtered": "","post_parent": 246,"guid": "http://kumao-no-mori.com/2016/07/22/246-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 800,"post_author": 1,"post_date": "2016-07-22 14:48:40","post_date_gmt": "2016-07-22 05:48:40","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
★ <a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイトの\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。


2016.4.28 追記
reactでマテリアルデザインをするなら
★ <a href=\"http://www.material-ui.com/\" target=\"_blank\">material-ui</a>
こちらのサイトが素敵ですね。
今これ使ってみてます。

&nbsp;&nbsp;&nbsp;&nbsp;

<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=42&l=ur1&category=literaturebooks&banner=0E3R1FMFGRH02M3C66R2&f=ifr\" width=\"234\" height=\"60\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>
<br><br><br><br>
<iframe src=\"http://rcm-fe.amazon-adsystem.com/e/cm?t=kumapoyo-22&o=9&p=21&l=ur1&category=coupons&banner=024PRW0SYTB79SQAZ882&f=ifr\" width=\"125\" height=\"125\" scrolling=\"no\" border=\"0\" marginwidth=\"0\" style=\"border:none;max-width:900px;max-height:600px;\" frameborder=\"0\"></iframe>","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:48:40","post_modified_gmt": "2016-07-22 05:48:40","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2016/07/22/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 801,"post_author": 1,"post_date": "2016-07-22 14:49:01","post_date_gmt": "2016-07-22 05:49:01","post_content": "<blockquote>マテリアルデザインとは、スマートフォンやタブレットをはじめ、テレビ、メガネ、腕時計など様々なデバイスで統一感があるデザインを取り入れることにより、<span class=\"blue\"><strong>デバイスが変わっても使いやすいシームレスなデザイン</strong></span>の概念。マテリアルデザインはデバイスが変わっても違和感がなく、ユーザーがストレスを感じずに操作できることが肝となる。
-略-
マテリアルデザインは2014年6月に<span class=\"blue\"><strong>Googleが発表したデザインの概念</strong></span>で、Gmail、Google Maps、Google Calendar、Google日本語入力などに導入されている。Android 5.0 LollipopではマテリアルUIの作成をサポートしており、Googleがマテリアルデザインというガイドラインを提示することにより、Androidのデザインが統一されてユーザーにとって使いやすくデザインとなる。</blockquote>
<em>http://sabanavi.com/website-term/material-design/
サバナビ – IT用語辞典 WEB・SEO・サーバー 様から引用</em>

そんなマテリアルデザインを簡単に取り入れられるテンプレートを教えてもらったので紹介してみます。
★ <a href=\"http://www.getmdl.io/index.html\" target=\"_blank\">Material Design Lite</a>
こちらのサイトの\"GETTING STARTED\"から一式ダウンロードすると、jsやcssファイルなどが入っているので、
それを読み込めばclassをはめるだけで、綺麗なマテリアルデザインにすることができるみたいです。
classやjsはメニューの\"COMPONENTS\"から確認できます。
たっくさん種類があるので面白いです。

しかもこちらのサイトでは、ブログやダッシュボードなどのテンプレートをダウンロードすることができるので、とても素晴らしいです。プレビューもあるので是非見てみてください。

そして最後に、メニューの\"CUSTOMIZE\"から、自分の好きな色にカスタマイズした状態のテンプレートcssをダウンロードできます。

いやもう至れり尽くせりですね。
説明が雑ですみません。英語サイトですがとてもわかりやすいので、取りあえずサイトを見てくれください。


2016.4.28 追記
reactでマテリアルデザインをするなら
★ <a href=\"http://www.material-ui.com/\" target=\"_blank\">material-ui</a>
こちらのサイトが素敵ですね。
今これ使ってみてます。

&nbsp;","post_title": "簡単にマテリアルデザインができるサイト紹介","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "234-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:49:01","post_modified_gmt": "2016-07-22 05:49:01","post_content_filtered": "","post_parent": 234,"guid": "http://kumao-no-mori.com/2016/07/22/234-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 802,"post_author": 1,"post_date": "2016-07-22 14:55:29","post_date_gmt": "2016-07-22 05:55:29","post_content": "cssで:afterに:hoverをかけたい時、
 
<pre class=\"lang:css decode:true \" >.classname:hover:after {}</pre> 

でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:55:29","post_modified_gmt": "2016-07-22 05:55:29","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/2016/07/22/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 803,"post_author": 1,"post_date": "2016-07-22 14:56:37","post_date_gmt": "2016-07-22 05:56:37","post_content": "cssで:afterに:hoverをかけたい時、
 
<pre class=\"lang:css decode:true \" >.classname:hover:after {}</pre> 

でできます。hoverが先なんですね。
cssは右から読み込まれるということなので、これもそういうことなんですかね。

&nbsp;","post_title": "CSSでafterにhoverをかける","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "1-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 14:56:37","post_modified_gmt": "2016-07-22 05:56:37","post_content_filtered": "","post_parent": 1,"guid": "http://kumao-no-mori.com/2016/07/22/1-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 804,"post_author": 1,"post_date": "2016-07-22 15:05:30","post_date_gmt": "2016-07-22 06:05:30","post_content": "border-radiusをボーダーではなく要素にかけるとき、効かないなってなったら
<pre>overflow: hidden;</pre>
を足せば良い。

&nbsp;

","post_title": "CSS border-radiusについて","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "280-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-22 15:05:30","post_modified_gmt": "2016-07-22 06:05:30","post_content_filtered": "","post_parent": 280,"guid": "http://kumao-no-mori.com/2016/07/22/280-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 805,"post_author": 1,"post_date": "2016-07-23 00:41:57","post_date_gmt": "2016-07-22 15:41:57","post_content": "<p data-height=\"232\" data-theme-id=\"light\" data-slug-hash=\"yJYgqE\" data-default-tab=\"result\" data-user=\"kumapoyo\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/kumapoyo/pen/yJYgqE/\">vue練習</a> by NaoKidoguchi (<a href=\"http://codepen.io/kumapoyo\">@kumapoyo</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>
<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>

とても単純で読みやすいという印象でした。
これ以上シンプルなjsはないのでは?というくらい。
公式ページは綺麗な日本語ページがあり、デザインもとっても好きです。

<a href=\"https://jp.vuejs.org/guide/\">https://jp.vuejs.org/guide/</a>
こちらの公式のガイドを読むだけで、すぐにいろんなものが作成できて楽しいです。
このページを理解するだけで、何かそれなりのアプリを作れそうです。

上に置いたサンプルのjsを見ると、このコード量で双方向バインディングができてしまいます。
react.jsやknockout.jsより断然取っ付きやすかったです。
他のフレームワークとの比較も丁寧に記述してくれています。
<a href=\"https://jp.vuejs.org/guide/comparison.html\">https://jp.vuejs.org/guide/comparison.html</a>

htmlの書き方はmustacheみたいで、とってもわかりやすい。
<a href=\"http://kumao-no-mori.com/2016/04/26/mustache-js-%e3%81%a7%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%82%92%e3%82%a4%e3%83%b3%e3%82%af%e3%83%ab%e3%83%bc%e3%83%89%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b/\">過去のmustache記事</a>

まだ深く勉強してないですが、これは私の理想のjsライブラリかもしれないです。

&nbsp;","post_title": "Vue.js を触ってみた","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "694-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 00:41:57","post_modified_gmt": "2016-07-22 15:41:57","post_content_filtered": "","post_parent": 694,"guid": "http://kumao-no-mori.com/2016/07/23/694-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 806,"post_author": 1,"post_date": "2016-07-23 03:13:16","post_date_gmt": "2016-07-22 18:13:16","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<!-- Place this tag where you want the button to render. -->
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><!-- Place this tag right after the last button or just before your close body tag. -->
<script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:13:16","post_modified_gmt": "2016-07-22 18:13:16","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 807,"post_author": 1,"post_date": "2016-07-23 03:14:18","post_date_gmt": "2016-07-22 18:14:18","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script><a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><!-- Place this tag right after the last button or just before your close body tag. -->
<script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:14:18","post_modified_gmt": "2016-07-22 18:14:18","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 808,"post_author": 1,"post_date": "2016-07-23 03:15:04","post_date_gmt": "2016-07-22 18:15:04","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script><a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><!-- Place this tag right after the last button or just before your close body tag. -->
<script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:15:04","post_modified_gmt": "2016-07-22 18:15:04","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 809,"post_author": 1,"post_date": "2016-07-23 03:19:17","post_date_gmt": "2016-07-22 18:19:17","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-show-screen-name=\"false\" style=\"margin:20px auto 0;\">Follow @kumapoyo_</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script><a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><!-- Place this tag right after the last button or just before your close body tag. -->
<script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:19:17","post_modified_gmt": "2016-07-22 18:19:17","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 810,"post_author": 1,"post_date": "2016-07-23 03:24:05","post_date_gmt": "2016-07-22 18:24:05","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script><a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:24:05","post_modified_gmt": "2016-07-22 18:24:05","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 811,"post_author": 1,"post_date": "2016-07-23 03:24:45","post_date_gmt": "2016-07-22 18:24:45","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script><a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:24:45","post_modified_gmt": "2016-07-22 18:24:45","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 812,"post_author": 1,"post_date": "2016-07-23 03:26:10","post_date_gmt": "2016-07-22 18:26:10","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\" data-dnt=\"true\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script><a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:26:10","post_modified_gmt": "2016-07-22 18:26:10","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 813,"post_author": 1,"post_date": "2016-07-23 03:29:08","post_date_gmt": "2016-07-22 18:29:08","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script><a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:29:08","post_modified_gmt": "2016-07-22 18:29:08","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 814,"post_author": 1,"post_date": "2016-07-23 03:32:38","post_date_gmt": "2016-07-22 18:32:38","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script><a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:32:38","post_modified_gmt": "2016-07-22 18:32:38","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 815,"post_author": 1,"post_date": "2016-07-23 03:33:13","post_date_gmt": "2016-07-22 18:33:13","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:33:13","post_modified_gmt": "2016-07-22 18:33:13","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 816,"post_author": 1,"post_date": "2016-07-23 03:33:57","post_date_gmt": "2016-07-22 18:33:57","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:33:57","post_modified_gmt": "2016-07-22 18:33:57","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 817,"post_author": 1,"post_date": "2016-07-23 03:37:12","post_date_gmt": "2016-07-22 18:37:12","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div id=\"SNS\" style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

<style>
<!--
  #SNS > * {
    text-align: center;
  }
-->
</style>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:37:12","post_modified_gmt": "2016-07-22 18:37:12","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 818,"post_author": 1,"post_date": "2016-07-23 03:37:43","post_date_gmt": "2016-07-22 18:37:43","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div id=\"SNS\" style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>

<style>

  #SNS > * {
    text-align: center;
  }

</style>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:37:43","post_modified_gmt": "2016-07-22 18:37:43","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 819,"post_author": 1,"post_date": "2016-07-23 03:38:46","post_date_gmt": "2016-07-22 18:38:46","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div id=\"ProfSNS\" style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:38:46","post_modified_gmt": "2016-07-22 18:38:46","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 820,"post_author": 1,"post_date": "2016-07-23 03:41:35","post_date_gmt": "2016-07-22 18:41:35","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"text-align:center;margin-top: 10px;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:41:35","post_modified_gmt": "2016-07-22 18:41:35","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 821,"post_author": 1,"post_date": "2016-07-23 03:42:16","post_date_gmt": "2016-07-22 18:42:16","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"margin:10px 50% 0\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:42:16","post_modified_gmt": "2016-07-22 18:42:16","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 822,"post_author": 1,"post_date": "2016-07-23 03:43:06","post_date_gmt": "2016-07-22 18:43:06","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"margin:10px 50% 0;text-align:center;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:43:06","post_modified_gmt": "2016-07-22 18:43:06","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 823,"post_author": 1,"post_date": "2016-07-23 03:44:05","post_date_gmt": "2016-07-22 18:44:05","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"margin:15px 33% 0;text-align:center;line-height:0em;\">
<a href=\"https://twitter.com/kumapoyo_\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumapoyo_</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-07-23 03:44:05","post_modified_gmt": "2016-07-22 18:44:05","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/07/23/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 825,"post_author": 1,"post_date": "2016-08-15 11:29:34","post_date_gmt": "2016-08-15 02:29:34","post_content": "rubyの基礎を今日ちょっとだけ勉強したので、覚えたことを早速使ってやっぱりおみくじ作りました。
<a href=\"http://kumao-no-mori.com/2016/04/28/react-%e3%81%8a%e3%81%bf%e3%81%8f%e3%81%98/\" target=\"_blank\">他のおみくじ</a>

<script src=\"//repl.it/embed/Cdwc/1.js\"></script>

rubyの良さがわかってきた気がします。
余計なものを全て取っ払って、コードを最小限しか書かなくて良いような。まさに。
&nbsp;
あと、今回新しく使ったこのオンラインでプログラミングができるサービスは、
<a href=\"https://repl.it/\">repl.it</a>
というサービスを利用しました。
すぐに利用できてこんな風にコードを記事に載せるのも簡単。
新しいお気に入りです。


&nbsp;","post_title": "Ruby おみくじ","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "733-revision-v1","to_ping": "","pinged": "","post_modified": "2016-08-15 11:29:34","post_modified_gmt": "2016-08-15 02:29:34","post_content_filtered": "","post_parent": 733,"guid": "http://kumao-no-mori.com/2016/08/15/733-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 827,"post_author": 1,"post_date": "2016-08-25 00:47:57","post_date_gmt": "2016-08-24 15:47:57","post_content": "<a href=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1.jpg\"><img class=\"alignnone size-thumbnail wp-image-20 aligncenter\" src=\"http://kumao-no-mori.com/wp-content/uploads/2015/10/image1-150x150.jpg\" alt=\"image\" width=\"150\" height=\"150\" /></a>
<p style=\"text-align: center;\">テディモルモットのくまおだよ☆</br>記事の投稿状況などつぶやいてるので、気軽にフォローしてね★</p>

<div style=\"margin:15px 33% 0;text-align:center;line-height:0em;\">
<a href=\"https://twitter.com/kumao_no_mori\" class=\"twitter-follow-button\" data-show-count=\"false\" data-size=\"large\">Follow @kumao_no_mori</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?\'http\':\'https\';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+\'://platform.twitter.com/widgets.js\';fjs.parentNode.insertBefore(js,fjs);}}(document, \'script\', \'twitter-wjs\');</script>
<a class=\"github-button\" href=\"https://github.com/naokidoguchi\" data-style=\"mega\" aria-label=\"Follow @naokidoguchi on GitHub\">Follow @naokidoguchi</a><script async defer id=\"github-bjs\" src=\"https://buttons.github.io/buttons.js\"></script>
</div>
","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-08-25 00:47:57","post_modified_gmt": "2016-08-24 15:47:57","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/08/25/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 829,"post_author": 1,"post_date": "2016-09-29 19:11:12","post_date_gmt": "2016-09-29 10:11:12","post_content": "一時公開を停止しています。
気が向いたらまたこのURLで戻ってきます〜。
その時には技術メモブログじゃなくなってるかm","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-autosave-v1","to_ping": "","pinged": "","post_modified": "2016-09-29 19:11:12","post_modified_gmt": "2016-09-29 10:11:12","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/09/29/18-autosave-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}, {"ID": 830,"post_author": 1,"post_date": "2016-09-29 19:11:39","post_date_gmt": "2016-09-29 10:11:39","post_content": "一時公開を停止しています。
気が向いたらまたこのURLで戻ってくるつもりです。
その時には技術メモブログじゃなくなってるかも。わくわく","post_title": "森の主","post_excerpt": "","post_status": "inherit","comment_status": "closed","ping_status": "closed","post_password": "","post_name": "18-revision-v1","to_ping": "","pinged": "","post_modified": "2016-09-29 19:11:39","post_modified_gmt": "2016-09-29 10:11:39","post_content_filtered": "","post_parent": 18,"guid": "http://kumao-no-mori.com/2016/09/29/18-revision-v1/","menu_order": 0,"post_type": "revision","post_mime_type": "","comment_count": 0}]